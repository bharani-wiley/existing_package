*-----------------------------------*
* PROGRAM NAME: ZQTCR_SUBSCRIPTION_UPLOAD (Main Program)
* PROGRAM DESCRIPTION: To upload subscription orders
* DEVELOPER: Prosenjit Chaudhuri(PCHAUDHURI)
* CREATION DATE:   28/11/2016
* OBJECT ID:  E101
* TRANSPORT NUMBER(S):  ED2K903417
*-----------------------------------*
*----------------------------------------------------------------------*
* REVISION HISTORY-----------------------------------------------------*
* BOC by PBANDLAPAL on 16-Feb-2018 for ERP-6665:
* REVISION NO: ED2K910967                                              *
* REFERENCE NO: ERP-6665                                               *
* DEVELOPER: Pavan Bandlapalli(PBANDLAPAL)                             *
* DATE:  16-Feb-2018                                                   *
* DESCRIPTION: Dump was coming during the download option and fixed the*
*              same. Apart from this fixed issue related to customer   *
*              value shown as blank for some of the partner functions. *
*----------------------------------------------------------------------*
* * BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059                 *
* REVISION NO: ED2K911059, ED2K911212                                  *
* REFERENCE NO: ERP-6292                                               *
* DEVELOPER: Dinakar T(DTIRUKOOVA)                                     *
* DATE:  23-Feb-2018                                                   *
* DESCRIPTION: Adding New condition type columns and defalut Sales Off *
*              to 0050 as per CR 6292                                  *
*----------------------------------------------------------------------*
* REVISION NO: ED1K907870                                              *
* REFERENCE NO: RITM0025043                                            *
* DEVELOPER: Siva Guda(SGUDA)                                          *
* DATE:  02-July-2018                                                  *
* DESCRIPTION: oad JCore subs missed from conversion - approx 410      *
*----------------------------------------------------------------------*
* REVISION NO: ED2K913082                                              *
* REFERENCE NO: ERP-7640                                               *
* DEVELOPER: Writtick Roy (WROY)                                       *
* DATE:  15-AUG-2018                                                   *
* DESCRIPTION: Add new field-Document Currency for New Order creation  *
*----------------------------------------------------------------------*
* REVISION NO: ED2K913189, ED2K913477                                  *
* REFERENCE NO: ERP-7614                                               *
* DEVELOPER: Sayantan Das (SAYANDAS)                                   *
* DATE: 24-AUG-2018                                                    *
* DESCRIPTION: Add Background Processing Option                        *
*----------------------------------------------------------------------*
* REVISION NO: ED2K913481                                              *
* REFERENCE NO: INC0211601                                             *
* DEVELOPER: Rajasekhar.T (RBTIRUMALA)                                 *
* DATE:  20-SEP-2018                                                   *
* DESCRIPTION: Added new Order type ZOFL                               *
*----------------------------------------------------------------------*
* REVISION NO: ED2K913574                                              *
* REFERENCE NO: ERP7614                                                *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  12-Oct-2018                                                   *
* DESCRIPTION: Application Server paths changed to FILE from constants *
*----------------------------------------------------------------------*
* REVISION NO: ED1K908983                                              *
* REFERENCE NO: INC0219123                                             *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  15-Nov-2018                                                   *
* DESCRIPTION: Fix for thousand separator in amount and                *
*              Invoice Text added to update credit memo                *
*----------------------------------------------------------------------*
* REVISION NO: ED2K913722                                              *
* REFERENCE NO: ERP7763                                                *
* DEVELOPER: SNGUNTUPAL                                                *
* DATE:  29-Oct-2018                                                   *
* DESCRIPTION: Added Templates to DOwnload                             *
*----------------------------------------------------------------------*
* REVISION NO: ED2K913722/ED2K914078/ED2K914144                        *
* REFERENCE NO: ERP7763                                                *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  12-Dec-2018                                                   *
* DESCRIPTION: Added Converted Order(ZSCR) download and Upload         *
*----------------------------------------------------------------------*
* REVISION NO: ED1K908983                                              *
* REFERENCE NO: INC0224101                                             *
* DEVELOPER: Siva Guda (SGUDA)                                         *
* DATE:  28-Dec-2018                                                   *
* DESCRIPTION: PO number removed prefixed with zeros                   *
*----------------------------------------------------------------------*
* REVISION NO: ED2K914311                                              *
* REFERENCE NO: ERP7822                                                *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  25-Jan-2019                                                   *
* DESCRIPTION:Added new fields in Create/Change Subscription order ZSBP*
*----------------------------------------------------------------------*
* REVISION NO: ED2K915066                                              *
* REFERENCE NO: ERP7822 / ERP7816                                      *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  22-May-2019                                                   *
* DESCRIPTION:Logic Added to redetermine Billing plan dates for billing*
*             rule for ZSBP                                            *
*----------------------------------------------------------------------*
* REVISION NO: ED2K915483                                              *
* REFERENCE NO: DM1913                                                 *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  01-July-2019                                                  *
* DESCRIPTION:Order Reason A10 update                                  *
*----------------------------------------------------------------------*
* REVISION NO: ED2K916556                                              *
* REFERENCE NO:ERPM4543                                                *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  24-Oct-2019                                                   *
* DESCRIPTION:Condition Group2 update to ZOFL Order Items              *
*----------------------------------------------------------------------*
* REVISION NO: ED2K916854                                              *
* REFERENCE NO:ERPM2334                                                *
* DEVELOPER: Nageswara Polina (NPOLINA)                                *
* DATE:  05-Dec-2019                                                   *
* DESCRIPTION: Code adjustment to work for BP and Order Upload(E225)   *
*----------------------------------------------------------------------*ED2K918499
*----------------------------------------------------------------------*
* REVISION NO: ED2K919600                                         *
* REFERENCE NO:OTCM-4390                                            *
* DEVELOPER: Lahru Wathudura (LWATHUDURA)                                *
* DATE:  09/22/2020                                                   *
* DESCRIPTION: Add condition group2 for regular order creation/change
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* REVISION NO: ED2K919704                                           *
* REFERENCE NO:OTCM-4390                                            *
* DEVELOPER: Lahru Wathudura (LWATHUDURA)                           *
* DATE:  09/29/2020                                                   *
* DESCRIPTION: Make Condition grp2 Mandatory when order type 'ZOR' and
* Item category ZTXD or ZTXP
*----------------------------------------------------------------------*
* REVISION NO: ED2K919734                                             *
* REFERENCE NO: OTCM-4390                                              *
* DEVELOPER: Lahiru Wathudura (LWATHUDURA)                             *
* DATE:  09/30/2020                                                    *
* DESCRIPTION: Add PO type to order upload template
*----------------------------------------------------------------------*
* REVISION NO: ED2K919818                                             *
* REFERENCE NO: OTCM-22276                                             *
* DEVELOPER: Lahiru Wathudura (LWATHUDURA)                             *
* DATE:  10/09/2020                                                    *
* DESCRIPTION: Add line item Content Start/End Dates to Order Upload to *
*              Accommodate Takeover Perpetual Access
*----------------------------------------------------------------------*
* REVISION NO: ED2K920076                                              *
* REFERENCE NO: INC0318030(ED1K912300)                                             *
* DEVELOPER: Lahiru Wathudura (Lwathudura)                                 *
* DATE:  10/22/2020                                                    *
* DESCRIPTION: Retrofit activity : Offline Issue Upload: Failed due to PO Type missing is  *
* fixed by Added PO type while writing the data to the application server*
*----------------------------------------------------------------------*
* REVISION NO: ED2K920083
* REFERENCE NO: OTCM-22276
* DEVELOPER: Lahiru Wathudura (Lwathudura)                                 *
* DATE:  10/23/2020                                                    *
* DESCRIPTION: defect fixing for OTCM-22276
*----------------------------------------------------------------------*
* REVISION NO: ED2K920134                                              *
* REFERENCE NO:ERPM-27580                                              *
* DEVELOPER: AMOHAMMED                                                 *
* DATE:  29-Oct-2020                                                   *
* DESCRIPTION: ZADR Acquisition Debit Additional Enhancements          *
*----------------------------------------------------------------------*
* REVISION NO: ED2K920341                                              *
* REFERENCE NO:ERPM-26293                                              *
* DEVELOPER: AMOHAMMED                                                 *
* DATE:  17-Nov-2020                                                   *
* DESCRIPTION: JPY ZOFL upload - Incorrect or zero value (INC0303269)  *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* REVISION NO:ED2K919818                                               *
* REFERENCE NO:OTCM-42807                                              *
* DEVELOPER: PTUAFARM(Prabhu)                                          *
* DATE:  03/25/2021                                                    *
* DESCRIPTION: Add new Fields Validity period category of contract     *
*              and Validity period of contract                         *
*----------------------------------------------------------------------*
* REVISION NO: ED2K923278/ED2K923650                                              *
* REFERENCE NO: OTCM-44200                                             *
* DEVELOPER: Lahiru Wathudura (LWATHUDURA)                             *
* DATE:  05/05/2021                                                    *
* DESCRIPTION: ZADR File template changes and new validatinos          *
* ED2K923650 - Check whether contract no is blank or not               *
*----------------------------------------------------------------------*
* REVISION NO: ED1K912763
* REFERENCE NO: INC0344979
* DEVELOPER: Gadeela Arjun Reddy(ARGADEELA)
* DATE:  12/03/2021
* DESCRIPTION: defect fixing for Invalid Content End Date-FTP upload using template
*----------------------------------------------------------------------*
* REVISION NO: ED1K913075                                              *
* REFERENCE NO:INC0363877                                              *
* DEVELOPER: ARGADEELA                                                 *
* DATE:  03-June-2021                                                  *
* DESCRIPTION: Added New Order type ZCOP                               *
*----------------------------------------------------------------------*
* REVISION NO: ED2K924094                                              *
* REFERENCE NO:OTCM-42807/OTCM-44200                                   *
* DEVELOPER: Lahiru Wathudura(LWATHUDURA)                              *
* DATE:  07/14/2021 | 07/27/2021                                                   *
* DESCRIPTION: * change the sequence of the text symbols According to the ED1*
*              * L/Item Po number update UAT Issue handling
*----------------------------------------------------------------------*
* REVISION NO: ED1K913133                                              *
* REFERENCE NO: PRB0047398                                             *
* DEVELOPER: ARGADEELA                                                 *
* DATE:  28-June-2021                                                  *
* DESCRIPTION: Fixed the issue of Content start date/end date conversion*
*----------------------------------------------------------------------*
* REVISION NO: ED2K924570                                              *
* REFERENCE NO: OTCM-44200                                             *
* DEVELOPER: Lahiru Wathudura (LWATHUDURA)                             *
* DATE:  09/21/2021                                                    *
* DESCRIPTION: ZADR BOM subcomponent reference line item not getting copied and
*              prcing issue                                            *
*----------------------------------------------------------------------*
* REVISION NO: ED2K924398                                              *
* REFERENCE NO: OTCM-44200                                             *
* DEVELOPER: Lahiru Wathudura (LWATHUDURA)                             *
* DATE:  09/21/2021                                                    *
* DESCRIPTION: ZADR BOM subcomponent reference line item not getting copied and
*              prcing issue                                            *
*----------------------------------------------------------------------*
* REVISION NO: ED1K913826                                              *
* REFERENCE NO: INC0410015                                             *
* DEVELOPER: Gadeela Arjun Reddy(ARGADEELA)                            *
* DATE:  11/24/2021                                                    *
* DESCRIPTION: Fixed the issue Issue when uploading Reason for Rejection
*----------------------------------------------------------------------*
* REVISION NO: ED2K924398                                              *
* REFERENCE NO: OTCM-47267                                             *
* DEVELOPER: Nikhilesh Palla (NPALLA)                                  *
* DATE:     09/01/2021                                                 *
* DESCRIPTION: New Changes as below                                    *
*              - Changes to download Templates                         *
*              - Upload File Validations                               *
*              - Logging in Staging Table (for E101)                   *
*              All the Program Options Below                           *
*              RB_CREA -  2A  E101 - Create New Subscription Order     *
*              RB_CROS -  2B  E101 - Create Ren Ord with SubrefID      *
*              RB_MODI -  2C  E101 - Modify Existing Subscription      *
*              RB_CREM -  2D  E101 - Create New Credit Memo            *
*              RB_CRCG -  2E  E101 - Change Existing Credit Memo       *
*              RB_DM_CR - 2F  E101 - Create New Acquisition Debit Memo Request   *
*              RB_OR_CT - 2G  E101 - Create Regular Order              *
*              RB_OR_CN - 2H  E101 - Modify Regular Order              *
*----------------------------------------------------------------------*
FORM f_f4_file_name  CHANGING fp_p_file TYPE rlgrap-filename. " Local file for upload/download

* Popup for file path

  CALL FUNCTION 'KD_GET_FILENAME_ON_F4'
    CHANGING
      file_name     = fp_p_file " File Path
    EXCEPTIONS
      mask_too_long = 1
      OTHERS        = 2.

  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid
          TYPE sy-msgty
        NUMBER sy-msgno
          WITH sy-msgv1
               sy-msgv2
               sy-msgv3
               sy-msgv4.
  ENDIF. " IF sy-subrc NE 0

ENDFORM.
*&-----------------------------------*
*&      Form  F_CONVERT_EXCEL
*&-----------------------------------*
*       Convert Excel
*-----------------------------------*
*      ->P_P_FILE  text
*      <-P_I_FINAL  text
*-----------------------------------*
FORM f_convert_new_subs_ord_excel USING fp_p_file  TYPE rlgrap-filename " Local file for upload/download
                               CHANGING fp_i_final TYPE tt_excel_enh.
*--*BOC ERP7775 PRABHU ED2K913637
  DATA : li_excel        TYPE STANDARD TABLE OF zqtc_alsmex_tabline "alsmex_tabline " Rows for Table with Excel Data
                              INITIAL SIZE 0,                  " Rows for Table with Excel Data
         lst_excel_dummy TYPE zqtc_alsmex_tabline, "alsmex_tabline,                  " Rows for Table with Excel Data
         lst_excel       TYPE zqtc_alsmex_tabline, "alsmex_tabline,                  " Rows for Table with Excel Data
         lst_final       TYPE ty_excel_enhanced.

  DATA:  lv_zmeng TYPE char17. " Zmeng of type CHAR17
  DATA:lv_auart_cre TYPE auart,   "ERPM4543 NPOLINA 24/Oct/2019
       lv_kdkg2     TYPE kdkg2.
* BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
  DATA lv_date TYPE sy-datum.
  CONSTANTS c_special_char TYPE string VALUE '@#$%^&*()!/\|{}[]-_+?.,'.
* EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
  CALL FUNCTION 'ZQTC_EXCEL_TO_INTERNAL_TABLE' "'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = fp_p_file
      i_begin_col             = 1
      i_begin_row             = 2
*     i_end_col               = 31
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*     Begin of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*     i_end_col               = 32
*     i_end_col               = 33
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
*     i_end_col               = 34
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
*     i_end_col               = 35
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
*     i_end_col               = 36   "" NPOLINA ERP7763 ED2K913722
*     i_end_col               = 41      "  NPOLINA 01/25/2019 ERP7822 : ED2K914311
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*     i_end_col               = 42      "  NPOLINA 01/July/2019 DM1913 E209 ED2K915483
*     i_end_col               = 43      "  NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
      i_end_col               = 46
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*     End   of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*     Begin of CHANGE:ERP-4080:WROY:29-AUG-2017:ED2K908224
*     i_end_row               = 1000
      i_end_row               = 65000
*     End   of CHANGE:ERP-4080:WROY:29-AUG-2017:ED2K908224
    TABLES
      intern                  = li_excel
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
*--*EOC ERP7775 PRABHU ED2K913637
  IF sy-subrc EQ 0.

* Now fill data from excel into final legacy data internal table

    IF NOT li_excel[] IS INITIAL.
      CLEAR lst_final.
      LOOP AT li_excel INTO lst_excel.
        lst_excel_dummy = lst_excel.
        IF lst_excel_dummy-value(1) EQ text-sqt.
          lst_excel_dummy-value(1) = space.
          SHIFT lst_excel_dummy-value LEFT DELETING LEADING space.
        ENDIF. " IF lst_excel_dummy-value(1) EQ text-sqt

        AT NEW col.

          CASE lst_excel_dummy-col.
            WHEN 1.
              IF NOT lst_final IS INITIAL.
                APPEND lst_final TO fp_i_final.
                CLEAR lst_final.
              ENDIF. " IF NOT lst_final IS INITIAL

              lst_final-customer = lst_excel_dummy-value(10).
              CLEAR lst_excel_dummy.

            WHEN 2.
              lst_final-parvw = lst_excel_dummy-value(2).

              IF lst_final-parvw IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-parvw
                  IMPORTING
                    output = lst_final-parvw.
              ENDIF. " IF lst_final-parvw IS NOT INITIAL

            WHEN 3.

              lst_final-kunnr = lst_excel_dummy-value(10).

              IF lst_final-kunnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-kunnr
                  IMPORTING
                    output = lst_final-kunnr.
              ENDIF. " IF lst_final-kunnr IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 4.

              lst_final-vkorg = lst_excel_dummy-value(4).

              IF lst_final-vkorg IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-vkorg
                  IMPORTING
                    output = lst_final-vkorg.
              ENDIF. " IF lst_final-vkorg IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 5.
              lst_final-vtweg = lst_excel_dummy-value(2).
              IF lst_final-vtweg IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-vtweg
                  IMPORTING
                    output = lst_final-vtweg.
              ENDIF. " IF lst_final-vtweg IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 6.
              lst_final-spart = lst_excel_dummy-value(2).
              IF lst_final-spart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-spart
                  IMPORTING
                    output = lst_final-spart.
              ENDIF. " IF lst_final-spart IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 7.

              WRITE lst_excel_dummy-value(8) TO lst_final-guebg.
              CLEAR lst_excel_dummy.

            WHEN 8.

              WRITE lst_excel_dummy-value(8) TO lst_final-gueen.
              CLEAR lst_excel_dummy.

            WHEN 9.

              WRITE lst_excel_dummy-value(06) TO lst_final-posnr.
              IF lst_final-posnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-posnr
                  IMPORTING
                    output = lst_final-posnr.
              ENDIF. " IF lst_final-posnr IS NOT INITIAL
            WHEN 10.

              lst_final-matnr = lst_excel_dummy-value(18).

              IF lst_final-matnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input  = lst_final-matnr
                  IMPORTING
                    output = lst_final-matnr.

                CLEAR lst_excel_dummy.
              ENDIF. " IF lst_final-matnr IS NOT INITIAL

            WHEN 11.
              lst_final-plant = lst_excel_dummy-value(4).

            WHEN 12.   "11 " NPOLINA ERP7763 ED2K913722
              lst_final-vbeln = lst_excel_dummy-value(10).

            WHEN 13. "12 " NPOLINA ERP7763 ED2K913722

              lst_final-pstyv = lst_excel_dummy-value(4).
              IF lst_final-pstyv IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-pstyv
                  IMPORTING
                    output = lst_final-pstyv.
              ENDIF. " IF lst_final-pstyv IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 14.    "13. " NPOLINA ERP7763 ED2K913722
              lv_zmeng         =  lst_excel_dummy-value(13).
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_final-zmeng  = lv_zmeng.
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Quantity & is not in the correct format
                  MESSAGE i131(o3) WITH lst_excel_dummy-value. " Quantity & is not in the correct format
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.

            WHEN 15.   "14  NPOLINA ERP7763 ED2K913722

              lst_final-lifsk = lst_excel_dummy-value(2).
              IF lst_final-lifsk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-lifsk
                  IMPORTING
                    output = lst_final-lifsk.
              ENDIF. " IF lst_final-lifsk IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 16. "15  NPOLINA ERP7763 ED2K913722
              lst_final-faksk = lst_excel_dummy-value(2).
              IF lst_final-faksk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-faksk
                  IMPORTING
                    output = lst_final-faksk.
              ENDIF. " IF lst_final-faksk IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 17. "16  NPOLINA ERP7763 ED2K913722 .
              lst_final-abgru = lst_excel_dummy-value(2).
              IF lst_final-abgru IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-abgru
                  IMPORTING
                    output = lst_final-abgru.
              ENDIF. " IF lst_final-abgru IS NOT INITIAL
              CLEAR lst_excel_dummy.
            WHEN 18. "17.  NPOLINA ERP7763 ED2K913722

              lst_final-auart = lst_excel_dummy-value(4).
              IF lst_final-auart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-auart
                  IMPORTING
                    output = lst_final-auart.
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
                IF lv_auart_cre IS INITIAL.
                  lv_auart_cre = lst_final-auart.
                ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
              ENDIF. " IF lst_final-auart IS NOT INITIAL

              CLEAR lst_excel_dummy.
            WHEN 19. "18.  NPOLINA ERP7763 ED2K913722
              lst_final-xblnr = lst_excel_dummy-value(16).
              CLEAR lst_excel_dummy.
            WHEN 20. "19.  NPOLINA ERP7763 ED2K913722
              lst_final-zlsch = lst_excel_dummy-value(1).
              CLEAR lst_excel_dummy.
            WHEN 21. "20.   NPOLINA ERP7763 ED2K913722
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*              lst_final-bsark = lst_excel_dummy-value(20).
              lst_final-bsark = lst_excel_dummy-value(4).
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_final-bsark
                IMPORTING
                  output = lst_final-bsark.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.

            WHEN 22. "21.  NPOLINA ERP7763 ED2K913722
              lst_final-bstnk = lst_excel_dummy-value(20).
*     Begin of CHANGE:INC0224101:SGUDA:28-Dec-2018:ED1K908983
*              IF lst_final-bstnk IS NOT INITIAL.
*                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*                  EXPORTING
*                    input  = lst_final-bstnk
*                  IMPORTING
*                    output = lst_final-bstnk.
*              ENDIF. " IF lst_final-bstnk IS NOT INITIAL
*     End of CHANGE:INC0224101:SGUDA:28-Dec-2018:ED1K908983
              CLEAR lst_excel_dummy.
            WHEN 23. "22  NPOLINA ERP7763 ED2K913722 .
              lst_final-stxh = lst_excel_dummy-value(50).
              CLEAR lst_excel_dummy.
            WHEN 24. "23  NPOLINA ERP7763 ED2K913722 .
              lst_final-kschl = lst_excel_dummy-value(4).
              IF lst_final-kschl IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-kschl
                  IMPORTING
                    output = lst_final-kschl.
              ENDIF. " IF lst_final-kschl IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 25. "24.  NPOLINA ERP7763 ED2K913722
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_final-kbetr = lst_excel_dummy-value(11).
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Amount & format is incorrect
                  MESSAGE i406(aw) WITH lst_excel_dummy-value. " Amount & format is incorrect
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.

            WHEN 26. "25.  NPOLINA ERP7763 ED2K913722
              lst_final-ihrez = lst_excel_dummy-value(12).
              CLEAR lst_excel_dummy.
            WHEN 27. "26.  NPOLINA ERP7763 ED2K913722
              lst_final-zzpromo = lst_excel_dummy-value(10).

              IF lst_final-zzpromo IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-zzpromo
                  IMPORTING
                    output = lst_final-zzpromo.
              ENDIF. " IF lst_final-zzpromo IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 28. "27.  NPOLINA ERP7763 ED2K913722
              lst_final-kdkg4 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
            WHEN 29. "28.  NPOLINA ERP7763 ED2K913722
              lst_final-kdkg5 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
            WHEN 30. "29.  NPOLINA ERP7763 ED2K913722
              lst_final-kdkg3 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
            WHEN 31. "30.  NPOLINA ERP7763 ED2K913722
              lst_final-srid = lst_excel_dummy-value(12).
              CLEAR lst_excel_dummy.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*** For ZREW with ref to Quotation we are populating value
*** here as column 1 is not present in this case
              IF rb_cros EQ 'X'.
                IF NOT lst_final IS INITIAL.
                  APPEND lst_final TO fp_i_final.
                  CLEAR lst_final.
                ENDIF. " IF NOT lst_final IS INITIAL
              ENDIF. " IF rb_cros EQ 'X'
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
            WHEN 32. "31.  NPOLINA ERP7763 ED2K913722
              lst_final-vkbur = lst_excel_dummy-value(4).
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_final-vkbur
                IMPORTING
                  output = lst_final-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
            WHEN 33. "32.  NPOLINA ERP7763 ED2K913722
              WRITE lst_excel_dummy-value(8) TO lst_final-fkdat.
              CLEAR lst_excel_dummy.
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*           Begin of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
            WHEN 34. "33.  NPOLINA ERP7763 ED2K913722
              lst_final-waerk = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
*           End   of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*** For ZREW with ref to Quotation we are populating value
*** here as column 1 is not present in this case
              IF rb_cros EQ 'X'.
                IF NOT lst_final IS INITIAL.
                  APPEND lst_final TO fp_i_final.
                  CLEAR lst_final.
                ENDIF. " IF NOT lst_final IS INITIAL
              ENDIF. " IF rb_cros EQ 'X'
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
            WHEN 35. "34.  NPOLINA ERP7763 ED2K913722  "Assignment number
              lst_final-zuonr  = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
            WHEN 36. "35. "Text for Invoice instructions  NPOLINA ERP7763 ED2K913722
              lst_final-inv_text = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
            WHEN 37.              "Action
              lst_final-vaktsch = lst_excel_dummy-value.

              IF lst_final-vaktsch IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-vaktsch
                  IMPORTING
                    output = lst_final-vaktsch.
              ENDIF.
              CLEAR lst_excel_dummy.

            WHEN 38.              "Date for Action
              WRITE lst_excel_dummy-value(8) TO lst_final-vasda .
              CLEAR lst_excel_dummy.

            WHEN 39.              "Rule for Origin of Next Billing/Invoice Date
              lst_final-perio = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.

            WHEN 40.              "In Advance
              lst_final-autte = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.

            WHEN 41.              "Rule for Determination of a Deviating Billing/Invoice Date
              lst_final-peraf = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* SOC  NPOLINA 01/July/2019 DM1913 E209 ED2K915483
            WHEN 42.              "Order Reason
              lst_final-augru = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* EOC  NPOLINA 01/July/2019 DM1913 E209 ED2K915483
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
            WHEN 43.              "Condition Group2
              lst_final-kdkg2 = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
              IF lst_final-kdkg2 IS NOT INITIAL AND lv_auart_cre IS NOT INITIAL AND lv_auart_cre NE c_zofl.
                v_error = abap_true.
                lv_kdkg2 = lst_final-kdkg2.
                EXIT.
              ENDIF.
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
            WHEN 44.            " Content Start Date
* BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
              IF lst_excel_dummy-value(8) CA c_special_char.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-111) according to the ED1 sequence with  ED2K924094  *
                MESSAGE s000 WITH text-107 DISPLAY LIKE c_e.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-111) according to the ED1 sequence with  ED2K924094  *
                LEAVE LIST-PROCESSING.
              ELSE.
                lv_date = lst_excel_dummy-value(8).
* Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
                IF lv_date IS NOT INITIAL.
* End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
                  CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
                    EXPORTING
                      date                      = lv_date
                    EXCEPTIONS
                      plausibility_check_failed = 1
                      OTHERS                    = 2.
                  IF sy-subrc <> 0.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-113) according to the ED1 sequence with  ED2K924094  *
                    MESSAGE s000 WITH text-109 DISPLAY LIKE c_e.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-113) according to the ED1 sequence with  ED2K924094  *
                    LEAVE LIST-PROCESSING.
                  ELSE.
                    CLEAR lv_date.
                  ENDIF.
* Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
                ENDIF.
* End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
* EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
                WRITE lst_excel_dummy-value(8) TO lst_final-zzconstart.
                CLEAR lst_excel_dummy.
* BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
              ENDIF.
* EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
            WHEN 45.            " Content End Date
* BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
              IF lst_excel_dummy-value(8) CA c_special_char.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-112) according to the ED1 sequence with  ED2K924094  *
                MESSAGE s000 WITH text-108 DISPLAY LIKE c_e.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-112) according to the ED1 sequence with  ED2K924094  *
                LEAVE LIST-PROCESSING.
              ELSE.
                lv_date = lst_excel_dummy-value(8).
* Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
                IF lv_date IS NOT INITIAL.
* End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
                  CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
                    EXPORTING
                      date                      = lv_date
                    EXCEPTIONS
                      plausibility_check_failed = 1
                      OTHERS                    = 2.
                  IF sy-subrc <> 0.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-114) according to the ED1 sequence with  ED2K924094  *
                    MESSAGE s000 WITH text-110 DISPLAY LIKE c_e.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-111) according to the ED1 sequence with  ED2K924094  *
                    LEAVE LIST-PROCESSING.
                  ELSE.
                    CLEAR lv_date.
                  ENDIF.
* Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
                ENDIF.
* End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
* EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
                WRITE lst_excel_dummy-value(8) TO lst_final-zzconend.
                CLEAR lst_excel_dummy.
* BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
              ENDIF.
* EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
            WHEN 46.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
              lst_final-vlaufz = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
*              lst_final-vlaufk = lst_excel_dummy-value.
*              CLEAR lst_excel_dummy.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*            WHEN 47.
*              lst_final-vlaufz = lst_excel_dummy-value.
*              CLEAR lst_excel_dummy.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
          ENDCASE.
        ENDAT.
      ENDLOOP. " LOOP AT li_excel INTO lst_excel
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      IF lst_final-kdkg2 IS NOT INITIAL AND lv_auart_cre IS NOT INITIAL
                  AND lv_auart_cre NE c_zofl AND v_error IS NOT INITIAL.
        v_error = abap_true.
        MESSAGE s000 WITH text-068 DISPLAY LIKE  'E'.
      ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      IF rb_cros NE 'X'.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

* For last row population
        APPEND lst_final TO fp_i_final.
        CLEAR lst_final.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      ENDIF. " IF rb_cros NE 'X'
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
    ENDIF. " IF NOT li_excel[] IS INITIAL

  ENDIF. " IF sy-subrc EQ 0

ENDFORM.
*&-----------------------------------*
*&      Form  DISPLAY_NEW_SUBS_ORD_ALV
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_display_new_subs_ord_alv .
  REFRESH i_fcat_out.

  DATA: lv_counter TYPE sycucol VALUE 1, " Counter of type Integers
        lv_auart   TYPE auart.           "NPOLINA 01/25/2019 ERP7822 : ED2K914311
  DATA: lv_grid_title TYPE lvc_title.    "NPALLA  09/01/2021 E101 OTCM-47267 : ED2K924398

  PERFORM f_buildcat USING:
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'IDENTIFIER' text-113    ,
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'CUSTOMER'  text-h01    , "item number
            lv_counter 'PARVW'     text-011    ,
            lv_counter 'KUNNR'     text-h02    ,
            lv_counter 'VKORG'     text-025    ,
            lv_counter 'VTWEG'     text-026    , "Dist. channel
            lv_counter 'SPART'     text-027    , "division
            lv_counter 'GUEBG'     text-015    , "Contract start date
            lv_counter 'GUEEN'     text-016    , "Contract end date
            lv_counter 'POSNR'     text-h03    ,
            lv_counter 'MATNR'     text-h04    ,
            lv_counter 'PLANT'     text-h10    , " NPOLINA ERP7763 ED2K913722
            lv_counter 'VBELN'     text-h05    ,
            lv_counter 'PSTYV'     text-017    , "Item category
            lv_counter 'ZMENG'     text-014    , "target quantity
            lv_counter 'LIFSK'     text-020    , "delivery block
            lv_counter 'FAKSK'     text-021    , "billing block
            lv_counter 'ABGRU'     text-022    , "reason for rejection
            lv_counter 'AUART'     text-023    , "document type
            lv_counter 'XBLNR'     text-060    , "reference
            lv_counter 'ZLSCH'     text-061    , "Payment Method
            lv_counter 'BSARK'     text-058    , "PO Type
            lv_counter 'BSTNK'     text-024    , "purchase document number
            lv_counter 'STXH'      text-032    , "object name
            lv_counter 'KSCHL'     text-030    , "pricing condition
            lv_counter 'KBETR'     text-031    , "pricing
            lv_counter 'IHREZ'     text-h06    , "Legacy Reference No
            lv_counter 'ZZPROMO'   text-028    , "promo code
            lv_counter 'KDKG4'     text-012    , "Customer group
            lv_counter 'KDKG5'     text-013    , "Customer group
            lv_counter 'KDKG3'     text-029    , "Customer group
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
            lv_counter 'SRID'      text-062   ,  "Sub Ref ID
            lv_counter 'VKBUR'     text-063   ,  "Sales Office
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
            lv_counter 'FKDAT'     text-064   ,  "Billing Date
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*           Begin of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
            lv_counter 'WAERK'     text-065   , "Doc Currency
*           End   of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
            lv_counter 'ZUONR'    text-066 ,  "Assignment number
* EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
            lv_counter 'INV_TEXT' text-067.
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311 ED2K914956
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914956
*  IF rb_crea IS NOT INITIAL.
*    CLEAR:st_final_x.
*    READ TABLE i_final INTO st_final_x INDEX 1.
*    IF sy-subrc EQ 0 AND st_final_x-auart = c_zsbp.
*      lv_auart = c_zsbp.
* EOC by NPOLINA 01/25/2019 ERP7822 :  ED2K914956
  PERFORM f_buildcat USING:
    lv_counter 'VAKTSCH' text-041,
    lv_counter 'VASDA'   text-043,
    lv_counter 'PERIO'   text-045,
    lv_counter 'AUTTE'   text-047,
    lv_counter 'PERAF'   text-052.

  PERFORM f_buildcat USING:  lv_counter 'AUGRU' text-t01.  "NPOLINA DM1913 01/July/2019 ED2K915483
  PERFORM f_buildcat USING:  lv_counter 'KDKG2' text-056.  "NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
  PERFORM f_buildcat USING:  lv_counter 'ZZCONSTART' text-095.
  PERFORM f_buildcat USING:  lv_counter 'ZZCONEND' text-096.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*  PERFORM f_buildcat USING:  lv_counter 'VLAUFK' text-107.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
*  PERFORM f_buildcat USING:  lv_counter 'VLAUFZ' text-108.
  PERFORM f_buildcat USING:  lv_counter 'VLAUFZ' text-111.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_buildcat USING:  lv_counter 'ZLOGNO' text-115.
  PERFORM f_buildcat USING:  lv_counter 'LOG_HANDLE' text-116.
*  PERFORM f_buildcat USING:  lv_counter 'ZOID' text-117.
  PERFORM f_buildcat USING:  lv_counter 'ICON' text-120.
  PERFORM f_buildcat USING:  lv_counter 'MSGTY' text-118.
  PERFORM f_buildcat USING:  lv_counter 'MSGV1' text-119.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* SOC by NPOLINA 01/25/2019 ERP7822 :  ED2K914956
*    ELSE.
*      CLEAR:st_final_x.
*    ENDIF.
*  ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 :  ED2K914956
  CLEAR:st_final_x.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
* fill up the ALV table
  LOOP AT i_final INTO st_final_x.
    CLEAR: st_output_x.
    st_output_x-identifier = st_final_x-identifier.  " Order Identifier
    st_output_x-customer = st_final_x-customer. " Customer Number
    st_output_x-parvw    = st_final_x-parvw. " Partner Function
    st_output_x-kunnr    = st_final_x-kunnr. " Customer Number
    st_output_x-vkorg    = st_final_x-vkorg. "sales org. SAP mandatory
    st_output_x-vtweg    = st_final_x-vtweg. "dist. channel SAP mandatory
    st_output_x-spart    = st_final_x-spart. "division SAP mandatory
    WRITE st_final_x-guebg  TO st_output_x-guebg.
    WRITE st_final_x-gueen  TO st_output_x-gueen.
    st_output_x-posnr    = st_final_x-posnr. "Item number
    st_output_x-matnr    = st_final_x-matnr. "Material
    st_output_x-plant    = st_final_x-plant. "Plant
    st_output_x-vbeln    = st_final_x-vbeln. "Sales and Distribution Document Number
    st_output_x-pstyv    = st_final_x-pstyv. "item category SAP mandatory
    st_output_x-zmeng    = st_final_x-zmeng. "target quantity
    st_output_x-lifsk    = st_final_x-lifsk. "delivery block Wiley mandatory
    st_output_x-faksk    = st_final_x-faksk. "billing block Wiley mandatory
    st_output_x-abgru    = st_final_x-abgru. "reason for rejection
    st_output_x-auart    = st_final_x-auart. "Sales Document Type
    st_output_x-bsark    = st_final_x-bsark. "PO Type
    st_output_x-xblnr    = st_final_x-xblnr.
    st_output_x-zlsch    = st_final_x-zlsch.
    st_output_x-bstnk    = st_final_x-bstnk. "purchase order number Wiley mandatory
    st_output_x-stxh     = st_final_x-stxh. "Stxh of type CHAR200
    st_output_x-kschl    = st_final_x-kschl. "Pricing condition value Wiley mandatory
    st_output_x-kbetr    = st_final_x-kbetr. "Pricing Wiley mandatory
    st_output_x-ihrez    = st_final_x-ihrez. "Your Reference
    st_output_x-zzpromo  = st_final_x-zzpromo. "Promo code
    st_output_x-kdkg4    = st_final_x-kdkg4. "Customer condition group 4
    st_output_x-kdkg5    = st_final_x-kdkg5. "Customer condition group 5
    st_output_x-kdkg3    = st_final_x-kdkg3.
    st_output_x-kdkg2    = st_final_x-kdkg2.   "NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
    st_output_x-srid     = st_final_x-srid.
    st_output_x-vkbur    = st_final_x-vkbur.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

* SOC by NPOLINA DM1913(E209)
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = st_output_x-vkbur
      IMPORTING
        output = st_output_x-vkbur.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = st_output_x-bsark
      IMPORTING
        output = st_output_x-bsark.

    st_output_x-augru    = st_final_x-augru.
* EOC by NPOLINA DM1913(E209)
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
    WRITE st_final_x-fkdat  TO st_output_x-fkdat.
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*   Begin of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
    st_output_x-waerk    = st_final_x-waerk.
*   End   of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
    st_output_x-zuonr =   st_final_x-zuonr.  "Assignment number
* EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
    st_output_x-inv_text = st_final_x-inv_text.
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
*    IF rb_crea IS NOT INITIAL AND lv_auart = c_zsbp.  " NPOLINA 04/23/2019 ERP7822 : ED2K914956
    st_output_x-vaktsch = st_final_x-vaktsch.

    IF st_output_x-vaktsch IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = st_output_x-vaktsch
        IMPORTING
          output = st_output_x-vaktsch.
    ENDIF.

    WRITE st_final_x-vasda TO st_output_x-vasda .
    st_output_x-perio = st_final_x-perio.
    st_output_x-autte = st_final_x-autte.
    st_output_x-peraf = st_final_x-peraf.
*    ENDIF.                                  " NPOLINA 04/23/2019 ERP7822 : ED2K914956
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
    WRITE st_final_x-zzconstart TO st_output_x-zzconstart.
    WRITE st_final_x-zzconend  TO st_output_x-zzconend.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*    st_output_x-vlaufk = st_final_x-vlaufk.      "Validity period category of contract
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
    st_output_x-vlaufz = st_final_x-vlaufz.      "Validity period of contract
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    st_output_x-zlogno     = st_final_x-zlogno. "log
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = st_output_x-zlogno
      IMPORTING
        output = st_output_x-zlogno.

    st_output_x-log_handle = st_final_x-log_handle.
    st_output_x-zoid       = st_final_x-zoid.
    st_output_x-msgty      = st_final_x-msgty.
    st_output_x-msgv1      = st_final_x-msgv1.
*
    PERFORM f_get_icon USING st_output_x-msgty
                       CHANGING st_output_x-icon.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

    APPEND st_output_x TO i_output_x.
    CLEAR st_output_x.
  ENDLOOP. " LOOP AT i_final INTO st_final_x

  IF    i_output_x[] IS NOT INITIAL
    AND i_fcat_out IS NOT INITIAL.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    IF v_oid IS NOT INITIAL.
      CONCATENATE 'Orders Only Upload ID'(T00) c_hyphen v_oid INTO lv_grid_title SEPARATED BY space.
    ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    st_layout-box_fieldname = 'SEL'.
    st_layout-colwidth_optimize = abap_true.

    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program       = sy-repid
        i_callback_pf_status_set = 'F_SET_PF_STATUS'
        i_callback_user_command  = 'F_USER_COMMAND'
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        i_grid_title             = lv_grid_title
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        is_layout                = st_layout
        it_fieldcat              = i_fcat_out
      TABLES
        t_outtab                 = i_output_x
      EXCEPTIONS
        program_error            = 1
        OTHERS                   = 2.
    IF sy-subrc <> 0.

      MESSAGE e000 WITH text-008.

    ENDIF. " IF sy-subrc <> 0

  ENDIF. " IF i_output_x[] IS NOT INITIAL
* SOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
  IF i_output_x[] IS INITIAL .
    MESSAGE s000 WITH text-055 DISPLAY LIKE  'E'.
  ENDIF.
* EOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
ENDFORM.
*&-----------------------------------*
*&      Form  F_BUILDCAT
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_LV_COUNTER  text
*      ->P_1057   text
*      ->P_TEXT_001  text
*-----------------------------------*
FORM f_buildcat  USING  fp_col   TYPE sycucol   " Horizontal Cursor Position
                        fp_fld   TYPE fieldname " Field Name
                        fp_title TYPE itex132.  " Text Symbol length 132

  CONSTANTS: lc_ref_tab_kschl  TYPE tabname   VALUE 'T685',       " Table Name
             lc_ref_tab_lifsk  TYPE tabname   VALUE 'VBAK',       " Table Name
             lc_ref_tab_abgru  TYPE tabname   VALUE 'VBAP',       " Table Name
             lc_ref_tab_kdkg   TYPE tabname   VALUE 'VBKD',       " Table Name
             lc_tabname        TYPE tabname   VALUE 'I_OUTPUT_X', " Table Name
             lc_ref_fld_kschl  TYPE fieldname VALUE 'KSCHL',      " Field Name
             lc_ref_fld_lifsk  TYPE fieldname VALUE 'LIFSK',      " Field Name
             lc_ref_fld_faksk  TYPE fieldname VALUE 'FAKSK',      " Field Name
             lc_ref_fld_augru  TYPE fieldname VALUE 'AUGRU',      " Field Name
             lc_plant          TYPE fieldname VALUE 'PLANT',      " Field Name
             lc_kdkg4          TYPE fieldname VALUE 'KDKG4',      " Field Name
             lc_kdkg3          TYPE fieldname VALUE 'KDKG3',      " Field Name
             lc_kdkg5          TYPE fieldname VALUE 'KDKG5',      " Field Name
             lc_ref_fld_abgru  TYPE fieldname VALUE 'ABGRU',      " Field Name
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
             lc_zlogno         TYPE fieldname VALUE 'ZLOGNO',     " Field Name
             lc_log_handle     TYPE fieldname VALUE 'LOG_HANDLE', " Field Name
             lc_icon           TYPE fieldname VALUE 'ICON',       " Field Name
             lc_kwmeng         TYPE fieldname VALUE 'KWMENG',
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
             lc_inv_text       TYPE fieldname VALUE 'INV_TEXT',
             lc_l              TYPE c VALUE 'L',
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
             lc_tax            TYPE fieldname VALUE 'TAX',  "NPOLINA ERP7763 ZSCR
             lc_kdkg2          TYPE fieldname VALUE 'KDKG2',      " Field Name
             lc_vlaufk         TYPE fieldname VALUE 'VLAUFK',
             lc_vlaufz         TYPE fieldname VALUE 'VLAUFZ',
             lc_ref_tab_vlaufk TYPE tabname VALUE 'VEDA'.


  st_fcat_out-col_pos      = fp_col + 1.
  st_fcat_out-lowercase    = abap_true.
  st_fcat_out-fieldname    = fp_fld.
  st_fcat_out-tabname      = lc_tabname. "'I_OUTPUT_X'.
  st_fcat_out-seltext_m    = fp_title.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  fp_col                   = fp_col + 1.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  IF fp_fld     = lc_ref_fld_kschl. "'KSCHL'.
    st_fcat_out-edit = abap_true.
    st_fcat_out-ref_tabname   = lc_ref_tab_kschl.
    st_fcat_out-ref_fieldname = lc_ref_fld_kschl.
  ELSEIF fp_fld = lc_ref_fld_lifsk. "'LIFSK'.
    st_fcat_out-edit = abap_true.
    st_fcat_out-ref_tabname   = lc_ref_tab_lifsk.
    st_fcat_out-ref_fieldname = lc_ref_fld_lifsk.
  ELSEIF fp_fld = lc_ref_fld_faksk. "'FAKSK'.
    st_fcat_out-edit = abap_true.
    st_fcat_out-ref_tabname   = lc_ref_tab_lifsk.
    st_fcat_out-ref_fieldname = lc_ref_fld_faksk.
  ELSEIF fp_fld = lc_ref_fld_augru. "'AUGRU'.
*    st_fcat_out-edit = abap_true.
    st_fcat_out-ref_tabname   = lc_ref_tab_lifsk.
    st_fcat_out-ref_fieldname = lc_ref_fld_augru.
  ELSEIF fp_fld = lc_plant. "'PLANT'.
*    st_fcat_out-edit = abap_true.
    st_fcat_out-ref_tabname   = lc_ref_tab_lifsk.
    st_fcat_out-ref_fieldname = lc_plant.
  ELSEIF fp_fld = lc_ref_fld_abgru.
    st_fcat_out-edit = abap_true.
    st_fcat_out-ref_tabname   = lc_ref_tab_abgru.
    st_fcat_out-ref_fieldname = lc_ref_fld_abgru.
  ELSEIF fp_fld = lc_kdkg5.
    st_fcat_out-edit          = abap_true.
    st_fcat_out-ref_fieldname = lc_kdkg5.
    st_fcat_out-ref_tabname   = lc_ref_tab_kdkg.
    st_fcat_out-edit          = c_x.
    st_fcat_out-seltext_l = text-013.
    st_fcat_out-ddictxt = lc_l.
  ELSEIF fp_fld = lc_kdkg4.
    st_fcat_out-edit          = abap_true.
    st_fcat_out-ref_fieldname = lc_kdkg4.
    st_fcat_out-ref_tabname   = lc_ref_tab_kdkg.
**BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
    st_fcat_out-seltext_l = text-012.
    st_fcat_out-ddictxt = lc_l.
**EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
    st_fcat_out-edit          = c_x.
  ELSEIF fp_fld = lc_kdkg3.
    st_fcat_out-edit          = abap_true.
    st_fcat_out-ref_fieldname = lc_kdkg3.
    st_fcat_out-ref_tabname   = lc_ref_tab_kdkg.
    st_fcat_out-edit          = c_x.
    st_fcat_out-seltext_l = text-029.
    st_fcat_out-ddictxt = lc_l.
*    st_fcat_out-outputlen = 40.
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
  ELSEIF fp_fld = lc_inv_text.
    st_fcat_out-seltext_l = text-067.
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*  ELSEIF fp_fld = lc_vlaufk.
*    st_fcat_out-seltext_l = text-107.
*    st_fcat_out-edit      = abap_true.
*    st_fcat_out-ref_fieldname = lc_vlaufk.
*    st_fcat_out-ref_tabname   = lc_ref_tab_vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
  ELSEIF fp_fld = lc_vlaufz.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
*    st_fcat_out-seltext_l = text-108.
    st_fcat_out-seltext_l = text-111.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
    st_fcat_out-edit          = abap_true.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ELSEIF fp_fld = lc_kwmeng.
    st_fcat_out-edit          = abap_true.
  ELSEIF fp_fld = lc_zlogno.
    st_fcat_out-hotspot = abap_true.
  ELSEIF fp_fld = lc_log_handle.
    st_fcat_out-outputlen = '5'.  " ddic_outputlen / no_out
    st_fcat_out-no_out = c_x.  " ddic_outputlen / no_out
  ELSEIF fp_fld = lc_icon.
    st_fcat_out-icon = c_x.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDIF. " IF fp_fld = lc_ref_fld_kschl

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  IF rb_cros EQ c_x.
    IF fp_fld = 'ZUONR'      OR
       fp_fld = 'INV_TEXT'   OR
       fp_fld = 'VAKTSCH'    OR
       fp_fld = 'VASDA'      OR
       fp_fld = 'PERIO'      OR
       fp_fld = 'AUTTE'      OR
       fp_fld = 'PERAF'      OR
       fp_fld = 'AUGRU'      OR
       fp_fld = 'KDKG2'      OR
       fp_fld = 'BP_EMAIL'   OR
       fp_fld = 'ZZCONSTART' OR
       fp_fld = 'ZZCONEND'   OR
       fp_fld = 'BP_EMAIL'   OR
       fp_fld = 'VLAUFZ'.
      st_fcat_out-no_out = c_x.  " ddic_outputlen / no_out
    ENDIF.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
  IF fp_fld = lc_tax.
    st_fcat_out-edit = abap_true.
  ENDIF.
  IF fp_fld IN i_edit.
    st_fcat_out-edit        = c_x.
  ENDIF. " IF fp_fld IN i_edit
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
  IF fp_fld = c_kdkg2.
    CLEAR:st_fcat_out-seltext_l.
*    st_fcat_out-seltext_l    = fp_title.
*    st_fcat_out-edit = abap_true.
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
    st_fcat_out-edit          = abap_true.
    st_fcat_out-ref_fieldname = lc_kdkg2.
    st_fcat_out-ref_tabname   = lc_ref_tab_kdkg.
    st_fcat_out-edit          = c_x.
    st_fcat_out-seltext_l = fp_title.
    st_fcat_out-ddictxt = lc_l.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
  ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556

* BOC by Lahiru on 05/07/2021 for OTCM-44200 with ED2K923278  *
  IF fp_fld = c_kbetr  OR  fp_fld = c_kbetr2  OR  fp_fld = c_kbetr3.
    st_fcat_out-edit  = abap_false.
  ELSEIF fp_fld = lc_ref_fld_augru.
    st_fcat_out-edit  = abap_false.
  ENDIF.
* EOC by Lahiru on 05/07/2021 for OTCM-44200 with ED2K923278  *

  st_fcat_out-row_pos = '1'.
  APPEND st_fcat_out TO i_fcat_out.
  CLEAR st_fcat_out.

ENDFORM.
*====================================================================*
*
*====================================================================*
FORM f_set_pf_status USING fp_i_extab TYPE slis_t_extab.
  SET PF-STATUS 'ZQTC_SUBS_ALV'.
ENDFORM.
*====================================================================*
*
*====================================================================*
FORM f_user_command USING fp_ucomm        TYPE sy-ucomm       " ABAP System Field: PAI-Triggering Function Code
                          fp_st_selfields TYPE slis_selfield. " ABAP System Field: PAI-Triggering Function Code
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  CONSTANTS:
    lc_hotspot  TYPE syst_ucomm     VALUE '&IC1'.       " ABAP System Field: PAI-Triggering Function Code
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  CASE fp_ucomm.
    WHEN 'UPDA'.

      IF rb_crea EQ c_x.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        DATA(li_output_x) = i_output_x.
*        DATA li_output_x TYPE STANDARD TABLE OF ty_output_x.
        DELETE li_output_x WHERE sel NE abap_true.
        DATA(lv_lines) = lines( li_output_x ).
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        READ TABLE li_output_x TRANSPORTING NO FIELDS WITH KEY msgty = c_e.
        IF sy-subrc = 0.
          MESSAGE i000(zqtc_r2) WITH 'The Input file has Errors'(122).
        ELSE.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_get_updated_alv_values CHANGING li_output_x.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_save_file_app_server_submit USING li_output_x.
*--**  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
          PERFORM f_send_notification.
*--*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
*--*BOC INC0202165 10/9/2018 : PRABHU :  ED2K913520
          SET SCREEN 0.
          LEAVE SCREEN.
*--*EOC INC0202165 10/9/2018 : PRABHU :  ED2K913520
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
          PERFORM f_contract_createfromdata .
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      ELSEIF rb_cros EQ c_x.
*        PERFORM f_rew_qref_contract_create. " commented for new approach
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        li_output_x = i_output_x.
        DELETE li_output_x WHERE sel NE abap_true.
        lv_lines = lines( li_output_x ).
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        READ TABLE li_output_x TRANSPORTING NO FIELDS WITH KEY msgty = c_e.
        IF sy-subrc = 0.
          MESSAGE i000(zqtc_r2) WITH 'The Input file has Errors'(122).
        ELSE.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_get_updated_alv_values CHANGING li_output_x.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_save_file_app_server_submit USING li_output_x.
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
*--*BOC INC0202165 10/9/2018 : PRABHU :  ED2K913520
          SET SCREEN 0.
          LEAVE SCREEN.
*--*EOC INC0202165 10/9/2018 : PRABHU :  ED2K913520
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*** BOC CR#498
          PERFORM f_rew_qref_contract_copy.
*** EOC CR#498
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      ELSEIF rb_modi EQ c_x.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        li_output_x = i_output_x.
        DELETE li_output_x WHERE sel NE abap_true.
        lv_lines = lines( li_output_x ).
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        READ TABLE li_output_x TRANSPORTING NO FIELDS WITH KEY msgty = c_e.
        IF sy-subrc = 0.
          MESSAGE i000(zqtc_r2) WITH 'The Input file has Errors'(122).
        ELSE.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_get_updated_alv_values CHANGING li_output_x.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_save_file_app_server_submit USING li_output_x.
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          SET SCREEN 0.
          LEAVE SCREEN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
          PERFORM f_change_subscription.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*         Display Updated ALV with Log Details
          IF rb_sel_m IS NOT INITIAL. "sy-ucomm "Back
            IF sy-ucomm = '&F03' OR sy-ucomm = '&F15' OR sy-ucomm = '&F12'. "Back/Exit/Cancel
              PERFORM f_display_change_subs_ord .
              SET SCREEN 0.
              LEAVE SCREEN.
            ENDIF.
          ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      ELSEIF rb_crem EQ c_x.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* Internal Table i_final_crme_crt is Used in ALV display hence commenting below
** SOC by NPOLINA ERP7763 ED2K914078
*        IF rb_ord IS NOT INITIAL.
*          MOVE-CORRESPONDING i_final_crdt TO i_final_crme_crt.
*        ENDIF.
** EOC by NPOLINA ERP7763 ED2K914078
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        DATA(li_final_crme_crt) = i_final_crme_crt.
        DELETE li_final_crme_crt WHERE sel NE abap_true.
        lv_lines = lines( li_final_crme_crt ).
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
          PERFORM f_sfile_app_crdt_submit USING li_final_crme_crt.
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
*        PERFORM f_create_cred_memo    CHANGING i_final_crdt.

* Change in table structure
          PERFORM f_create_cred_memo    CHANGING i_final_crme_crt.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
      ELSEIF rb_crcg EQ c_x.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        DATA(li_final_crdt) = i_final_crdt.
        DELETE li_final_crdt WHERE sel NE abap_true.
        lv_lines = lines( li_final_crdt ).
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
          PERFORM f_sfile_app_crdtc_submit USING li_final_crdt.
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
          PERFORM f_change_cred_memo    USING i_final_crdt.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189

* Begin by AMOHAMMED on 10/29/2020 TR # ED2K920134
      ELSEIF rb_dm_cr EQ abap_true.
        DATA(li_final_dbm_crt) = i_final_dbm_crt.
        DELETE li_final_dbm_crt WHERE sel NE abap_true.
        lv_lines = lines( li_final_dbm_crt ).
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
          PERFORM f_sfile_app_dbt_submit USING li_final_dbm_crt.
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
          " Change in table structure
          PERFORM f_create_debit_memo CHANGING i_final_dbm_crt.
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
* End by AMOHAMMED on 10/29/2020 TR # ED2K920134

      ELSEIF rb_or_ct EQ abap_true.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        DATA(li_ord_alv) = i_ord_alv.
        DELETE li_ord_alv WHERE sel NE abap_true.
        lv_lines = lines( li_ord_alv ).
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        READ TABLE li_ord_alv TRANSPORTING NO FIELDS WITH KEY msgty = c_e.
        IF sy-subrc = 0.
          MESSAGE i000(zqtc_r2) WITH 'The Input file has Errors'(122).
        ELSE.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_get_updated_alv_values_ord CHANGING li_ord_alv.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_sfile_app_ord_submit USING li_ord_alv.
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          SET SCREEN 0.
          LEAVE SCREEN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
          PERFORM f_create_reg_ord      CHANGING i_ord_alv.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      ELSEIF rb_or_cn EQ abap_true.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        li_ord_alv = i_ord_alv.
        DELETE li_ord_alv WHERE sel NE abap_true.
        lv_lines = lines( li_ord_alv ).
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        READ TABLE li_ord_alv TRANSPORTING NO FIELDS WITH KEY msgty = c_e.
        IF sy-subrc = 0.
          MESSAGE i000(zqtc_r2) WITH 'The Input file has Errors'(122).
        ELSE.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_get_updated_alv_values_ord CHANGING li_ord_alv.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          PERFORM f_sfile_app_ord_submit USING li_ord_alv.
          MESSAGE i528(zqtc_r2) WITH v_line_lmt v_job_name sy-datum sy-uzeit. " The no. of selected lines is greater than & so backgroung job scheduled
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          SET SCREEN 0.
          LEAVE SCREEN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ELSE. " ELSE -> IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
          PERFORM f_change_reg_ord      USING i_ord_alv.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*         Display Updated ALV with Log Details
          IF rb_sel_m IS NOT INITIAL. "sy-ucomm "Back
            IF sy-ucomm = '&F03' OR sy-ucomm = '&F15' OR sy-ucomm = '&F12'. "Back/Exit/Cancel
              PERFORM f_display_display_reg_ord.
              SET SCREEN 0.
              LEAVE SCREEN.
            ENDIF.
          ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
        ENDIF. " IF lv_lines GE v_line_lmt AND p_a_file IS INITIAL
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      ENDIF. " IF rb_crea EQ c_x
*    ENDIF.

    WHEN lc_hotspot.
      PERFORM f_process_hotspot USING fp_st_selfields.

    WHEN 'DLOAD_XXL'.
      fp_ucomm = '&XXL'.

  ENDCASE.
ENDFORM.
*&-----------------------------------*
*&      Form  F_CONTRACT_CREATEFROMDATA
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_contract_createfromdata .

  TYPES: BEGIN OF lty_cond_class,
           kappl TYPE kappl,     " Application
           kschl TYPE kscha,     " Condition Type
           krech TYPE krech,     " Condition Class
         END OF lty_cond_class,

         BEGIN OF lty_mvke,
           matnr TYPE  matnr,    " Material Number
           vkorg TYPE  vkorg,    " Sales Organization
           vtweg TYPE vtweg,     " Distribution Channel
           dwerk TYPE dwerk_ext, " Delivering Plant (Own or External)
         END OF lty_mvke.
*====================================================================*
*       Local Internal Table
*====================================================================*
  DATA: li_return             TYPE STANDARD TABLE OF bapiret2,  " Return messages
        li_contract_itm       TYPE STANDARD TABLE OF bapisditm, " Item data
*        MM01
        li_contract_items_inx TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
*--------------------------------------------------------------------*
        li_contract_partn     TYPE STANDARD TABLE OF bapiparnr,  " Contract partner
        li_contract_data      TYPE STANDARD TABLE OF bapictr     " Communciation Fields: SD Contract Data
        INITIAL SIZE 0,                                          " Contract Data
        li_mvke               TYPE STANDARD TABLE OF lty_mvke
        INITIAL SIZE 0,
        li_cond_class         TYPE STANDARD TABLE OF lty_cond_class
        INITIAL SIZE 0,
        li_contract_data_inx  TYPE STANDARD TABLE OF bapictrx    " Communication fields: SD Contract Data Checkbox
        INITIAL SIZE 0,
        li_contract_cond      TYPE STANDARD TABLE OF bapicond,   " Contract conditions
        li_extensionin        TYPE STANDARD TABLE OF bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_text               TYPE STANDARD TABLE OF bapisdtext, " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
*** BOC by SAYANDAS on 29th June 2017 for ERP-2801
        li_text1              TYPE STANDARD TABLE OF bapisdtext,            " Communication fields: SD texts
        li_lines1             TYPE STANDARD TABLE OF tline  INITIAL SIZE 0, " SAPscript: Text Lines
*** EOC by SAYANDAS on 29th June 2017 for ERP-2801
*====================================================================*
*       Local Work-area
*====================================================================*
        lst_contract_hdrin    TYPE bapisdhd1,  " Header data
        lst_text              TYPE bapisdtext, " Communication fields: SD texts
*** BOC by SAYANDAS on 29th June 2017 for ERP-2801
        lst_text1             TYPE bapisdtext, " Communication fields: SD texts
        lst_header1           TYPE thead,      " SAPscript: Text Header
        lst_lines1            TYPE tline,      " SAPscript: Text Lines
*** EOC by SAYANDAS on 29th June 2017 for ERP-2801
        lst_contract_hrdinx   TYPE bapisdhd1x, " Header data extended for promo code
        lst_contract_itm      TYPE bapisditm,  " Item data
        lst_bape_vbak         TYPE bape_vbak,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbap         TYPE bape_vbap,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbapx        TYPE bape_vbapx, " BAPI Interface for Customer Enhancements to Table VBAK
        lst_extensionin       TYPE bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        lst_bape_vbakx        TYPE bape_vbakx, " BAPI Interface for Customer Enhancements to Table VBAKX
        lst_contract_partn    TYPE bapiparnr,  " Contract partner
        lst_contract_cond     TYPE bapicond,   " Contract conditions
        lst_contract_data     TYPE bapictr,    " Contract Data
        li_bom_items          TYPE STANDARD TABLE OF ty_bom_items,
**** BOC BY SAYANDAS for BOM Partner on 23-AUG-2017
*        lst_bom_partner       TYPE ty_bom_partner,
**** EOC BY SAYANDAS for BOM Partner on 23-AUG-2017
        lst_contract_data_inx TYPE bapictrx, " Communication fields: SD Contract Data Checkbox
        lst_output_dummy      TYPE ty_output_x,
        lst_return            TYPE bapiret2, " For status of contract creation
        lst_bapi_addr         TYPE bapiaddr1,         "NPOLINA "ERPM2334
        lst_adr_comp          TYPE szadr_addr1_complete,
        li_bapi_addr          TYPE STANDARD TABLE OF bapiaddr1 INITIAL SIZE 0,  "NPOLINA "ERPM2334
*====================================================================*
*       Local Variable
*====================================================================*
        lv_salesdocin         TYPE bapivbeln-vbeln, "for export field
        lv_refdoc             TYPE vbeln .    "NPOLINA ERPM16504  ED2K918499

  DATA:lt_evbak TYPE vbak.     "NPOLINA 01/25/2019 ERP7822 : ED2K914311

*====================================================================*
*       Local Constants
*====================================================================*
  CONSTANTS:lc_bape_vbak       TYPE char9  VALUE 'BAPE_VBAK',  " Bape_vbak of type CHAR9
            lc_bape_vbap       TYPE char9  VALUE 'BAPE_VBAP',  " Bape_vbak of type CHAR9
            lc_posnr           TYPE posnr  VALUE '000000',     " Item number of the SD document
            lc_bape_vbakx      TYPE char10 VALUE 'BAPE_VBAKX', " Bape_vbak of type CHAR9
            lc_bape_vbapx      TYPE char10 VALUE 'BAPE_VBAPX', " Bape_vbak of type CHAR9
*** BOC by SAYANDAS on 29th June 2017 for ERP-2801
            lc_vbbp            TYPE char4 VALUE 'VBBP',    " Vbbp of type CHAR4
            lc_msgid           TYPE msgid VALUE 'ZQTC_R2', " Message identification
            lc_e               TYPE msgty VALUE 'E',       " Message Type
            lc_msgno           TYPE msgno VALUE '242',     " System Message Number
            lc_tdid_eal        TYPE tdid VALUE '0012',
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
            lc_tdid_inv_header TYPE tdid VALUE '0007',
            lc_999             TYPE addr_link VALUE  '999999',  "NPOLINA ERPM2334
            lc_int(3)          TYPE c VALUE  'INT'.                  "NPOLINA ERPM2334
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
*** EOC by SAYANDAS on 29th June 2017 for ERP-2801

*  LOOP AT i_output_x INTO DATA(lst_output_x) WHERE sel = c_x.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL
*  ENDLOOP. " LOOP AT i_output_x INTO DATA(lst_output_x) WHERE sel = c_x

* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA(li_output_x) = i_output_x.
  DATA : lv_waerk TYPE waerk,
         lv_kbetr TYPE kbetr.
  LOOP AT li_output_x ASSIGNING FIELD-SYMBOL(<lst_output>).
    IF sy-tabix EQ 1.
      lv_waerk = <lst_output>-waerk.
    ENDIF.
    CLEAR : lv_kbetr.
    lv_kbetr = <lst_output>-kbetr.
    PERFORM f_curr_conv_to_intrnl USING <lst_output>-customer " ED2K921132
                                        <lst_output>-parvw
                                        <lst_output>-vkorg
                                        <lst_output>-vtweg
                                        <lst_output>-spart
                                        <lst_output>-vbeln
                                  CHANGING lv_waerk
                                           lv_kbetr.
    <lst_output>-kbetr = lv_kbetr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <lst_output>-zlogno
      IMPORTING
        output = <lst_output>-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDLOOP.
  FREE : lv_waerk, lv_kbetr.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341

* Get Increment of item number in the SD document

  DATA(li_output) = li_output_x.

* Sort by Order Type
  SORT li_output BY auart.

  DELETE li_output WHERE auart IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING auart.

  SELECT auart,	 " Sales Document Type
         incpo   " Increment of item number in the SD document
    FROM tvak    " Sales Document Types
    INTO TABLE @DATA(li_tvak)
    FOR ALL ENTRIES IN @li_output
    WHERE auart EQ @li_output-auart.
  IF sy-subrc IS INITIAL.
    SORT li_tvak BY auart.
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = li_output_x.

  SORT li_output BY kschl.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING kschl.

  SELECT kappl,	 " Application
         kschl,	 " Condition type
         krech   " Condition class
   FROM t685a    " Conditions: Types: Additional Price Element Data
   INTO TABLE @li_cond_class
   FOR ALL ENTRIES IN @li_output
   WHERE kappl EQ 'V'
   AND   kschl EQ @li_output-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_cond_class BY kschl. "  class
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = li_output_x.

  SORT li_output BY matnr vkorg vtweg.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING matnr
                                                      vkorg
                                                      vtweg.
  IF li_output IS NOT INITIAL.
    SELECT matnr, " Material Number
           vkorg, " Sales Organization
           vtweg, " Distribution Channel
           dwerk  " Plant
      FROM mvke   " Sales Data for Material
      INTO TABLE @li_mvke
      FOR ALL ENTRIES IN @li_output
      WHERE matnr = @li_output-matnr
      AND   vkorg = @li_output-vkorg
      AND   vtweg = @li_output-vtweg.

    IF sy-subrc IS INITIAL.
      SORT li_mvke BY matnr vkorg vtweg.
    ENDIF. " IF sy-subrc IS INITIAL
  ENDIF. " IF li_output IS NOT INITIAL

* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected

  PERFORM f_deselect_lines CHANGING li_output_x.

  DATA(li_create_contract) = li_output_x.
  DELETE li_create_contract WHERE sel NE abap_true.

  IF li_create_contract IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_create_contract IS INITIAL

* SOC by NPOLINA DM1913 28/June/2019 ED2K915483
  DATA(li_orders) = li_create_contract.
  DELETE li_orders WHERE vbeln IS INITIAL .
  IF li_orders[] IS NOT INITIAL.
    SELECT vbeln, auart,augru FROM vbak INTO TABLE @DATA(li_ordreason)
      FOR ALL ENTRIES IN @li_orders
      WHERE vbeln = @li_orders-vbeln.
*        AND augru = @v_augru.
    IF sy-subrc EQ 0.
      SORT li_ordreason[] BY vbeln.
    ENDIF.
  ENDIF.
* EOC by NPOLINA DM1913 28/June/2019 ED2K915483
* SOC by NPOLINA ERPM2334 05/Dec/2019
  IF p_devid = c_e225 AND li_create_contract[] IS NOT INITIAL.
    SELECT * FROM ze225_staging INTO TABLE i_e225_stage
      FOR ALL ENTRIES IN li_create_contract
      WHERE
      zuid_upld EQ li_create_contract-zoid
        AND zoid EQ li_create_contract-identifier AND
        zlogno EQ li_create_contract-zlogno.
    IF sy-subrc EQ 0.
      SORT i_e225_stage.
    ENDIF.

    SELECT vbeln ,vbtyp FROM vbak
      INTO TABLE @DATA(li_doc_cat)
      FOR ALL ENTRIES IN @li_create_contract
      WHERE vbeln = @li_create_contract-vbeln.
    IF sy-subrc EQ 0.
      SORT li_doc_cat BY vbeln.
    ENDIF.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ELSEIF li_create_contract[] IS NOT INITIAL.
    SELECT * FROM ze225_staging INTO TABLE i_e101_stage
      FOR ALL ENTRIES IN li_create_contract
      WHERE zuid_upld EQ li_create_contract-zoid
        AND zoid EQ li_create_contract-identifier
        AND zlogno EQ li_create_contract-zlogno.
    IF sy-subrc EQ 0.
      SORT i_e101_stage.
    ENDIF.

    SELECT vbeln ,vbtyp FROM vbak
      INTO TABLE @li_doc_cat
      FOR ALL ENTRIES IN @li_create_contract
      WHERE vbeln = @li_create_contract-vbeln.
    IF sy-subrc EQ 0.
      SORT li_doc_cat BY vbeln.
    ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019

* SOC by NPOLINA ERPM16504 15/June/2020  ED2K918499
  IF li_orders[] IS NOT INITIAL.
    SELECT vbeln, posnr,bstkd FROM vbkd INTO TABLE @DATA(li_vbkdpo)
      FOR ALL ENTRIES IN @li_orders
      WHERE vbeln = @li_orders-vbeln.
    IF sy-subrc EQ 0.
      SORT li_vbkdpo[] BY vbeln posnr.
    ENDIF.
  ENDIF.
* EOC by NPOLINA ERPM16504 15/June/2020  ED2K918499

  LOOP AT li_create_contract INTO DATA(lst_output_x).
    " This loop is run to populate the required internal tables for BAPI purchase doc. no. wise

    DATA(lv_index) = sy-tabix.

    CLEAR lst_output_dummy.
    lst_output_dummy = lst_output_x.
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
    IF wa_output IS INITIAL.
      CLEAR:wa_output.
      wa_output = lst_output_x.
    ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

*   Whenever we see new header entry, we refresh the tables
    IF lst_output_dummy-parvw  EQ c_ag.
      CLEAR: lst_output_x.
      CLEAR: li_contract_itm,
             li_contract_partn,
             li_contract_cond,
             li_contract_data,
             li_contract_data_inx,
             lst_contract_hdrin,
             li_extensionin,
             li_text,
*** BOC by SAYANDAS on 5th AUG 2017 for ERP-3831
             li_text1,
*** EOC by SAYANDAS on 5th AUG 2017 for ERP-3831
             lst_contract_hrdinx,
             lst_contract_data,
             lst_contract_data_inx,
             lv_salesdocin,
             li_bapi_addr,            "NPOLINA ERPM2334
             li_return,
             lv_refdoc.             "NPOLINA ERPM16504  ED2K918499
    ENDIF. " IF lst_output_dummy-parvw EQ c_ag

*  Populate the Header records
*     Begin of CHANGE:RITM0025043:SGUDA:02-JULY-2018:ED1K907870
*    IF lst_output_dummy-posnr IS INITIAL.
    IF lst_output_dummy-posnr = '000000'
     OR lst_output_dummy-posnr  EQ space.
      lv_refdoc = lst_output_dummy-vbeln.    "NPOLINA ERPM16504  ED2K918499
*     End of CHANGE:RITM0025043:SGUDA:02-JULY-2018:ED1K907870
*====================================================================*
* Populate Header structure
*====================================================================*
      IF lst_contract_hdrin IS INITIAL.
        lst_contract_hdrin-doc_type   = lst_output_dummy-auart.
        lst_contract_hdrin-sales_org  = lst_output_dummy-vkorg.
        lst_contract_hdrin-distr_chan = lst_output_dummy-vtweg.
        lst_contract_hdrin-division   = lst_output_dummy-spart.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        lst_contract_hdrin-sales_off  = lst_output_dummy-vkbur.
* SOC by NPOLINA DM1913(E209) ED2K915483
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_contract_hdrin-sales_off
          IMPORTING
            output = lst_contract_hdrin-sales_off.
* EOC by NPOLINA DM1913(E209) ED2K915483
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        lst_contract_hdrin-cstcndgrp3 = lst_output_dummy-kdkg3.
        lst_contract_hdrin-cstcndgrp4 = lst_output_dummy-kdkg4.
        lst_contract_hdrin-cstcndgrp5 = lst_output_dummy-kdkg5.
        lst_contract_hdrin-purch_no_c = lst_output_dummy-bstnk.

* SOC by NPOLINA ERPM-16504 ED2K918499
        IF  lst_output_dummy-bstnk IS INITIAL  AND lst_output_dummy-vbeln IS NOT INITIAL.
          READ TABLE li_vbkdpo INTO DATA(ls_vbkdpoh) WITH KEY vbeln = lst_output_dummy-vbeln
                                                           posnr = lst_output_dummy-posnr BINARY SEARCH.
          IF sy-subrc EQ 0.
            lst_contract_hdrin-purch_no_c = ls_vbkdpoh-bstkd.
          ENDIF.
        ENDIF.
* EOC by NPOLINA ERPM-16504 ED2K918499

        lst_contract_hdrin-po_method  = lst_output_dummy-bsark.
        lst_contract_hdrin-dlv_block  = lst_output_dummy-lifsk.
        lst_contract_hdrin-bill_block = lst_output_dummy-faksk.
        lst_contract_hdrin-ref_1_s    = lst_output_dummy-ihrez.
        lst_contract_hdrin-ref_doc_l  = lst_output_dummy-xblnr.
        lst_contract_hdrin-pymt_meth  = lst_output_dummy-zlsch.
*       Begin of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
        lst_contract_hdrin-currency   = lst_output_dummy-waerk.
        lst_contract_hdrin-created_by  = p_userid."sy-uname.
*       End   of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        lst_contract_hdrin-ref_1     = lst_output_dummy-srid.
        lst_contract_hdrin-ass_number = lst_output_dummy-zuonr. "Assignment number
* EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
*        IF lst_output_dummy-auart = c_zofl.
**          lst_contract_hdrin-cstcndgrp2 = lst_output_dummy-kdkg2. "NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*        ENDIF.
        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-guebg
          IMPORTING
            date_internal            = lst_contract_hdrin-ct_valid_f
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-ct_valid_f.
        ENDIF. " IF sy-subrc IS NOT INITIAL

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-gueen
          IMPORTING
            date_internal            = lst_contract_hdrin-ct_valid_t
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-ct_valid_t.
        ENDIF. " IF sy-subrc IS NOT INITIAL
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-fkdat
          IMPORTING
            date_internal            = lst_contract_hdrin-bill_date
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-bill_date.
        ENDIF. " IF sy-subrc IS NOT INITIAL
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
        lst_contract_data-con_st_dat = lst_contract_hdrin-ct_valid_f.
        lst_contract_data-con_en_dat = lst_contract_hdrin-ct_valid_t.

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311


**        IF rb_crea IS NOT INITIAL AND lst_contract_hdrin-doc_type = c_zsbp.

        IF lst_output_dummy-vaktsch IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_output_dummy-vaktsch
            IMPORTING
              output = lst_contract_data-con_en_act.
        ENDIF.

        IF lst_output_dummy-vasda IS NOT INITIAL.
          CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
            EXPORTING
              date_external            = lst_output_dummy-vasda
            IMPORTING
              date_internal            = lst_contract_data-action_dat
            EXCEPTIONS
              date_external_is_invalid = 1.
          IF sy-subrc IS NOT INITIAL.
            CLEAR lst_contract_data-action_dat.
          ENDIF. " IF sy-subrc IS NOT INITIAL
        ENDIF.
**        ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        "Validity period category of contract
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*        lst_contract_data-val_per_ca  = lst_output_dummy-vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
        "Validity period of contract
        lst_contract_data-val_per  = lst_output_dummy-vlaufz.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        APPEND lst_contract_data TO li_contract_data.
*====================================================================*
*     Add ZZPROMO to Extension structure of BAPI
*====================================================================*
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
        CLEAR: lst_bape_vbak, lst_bape_vbakx.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_output_dummy-zzpromo
          IMPORTING
            output = lst_output_dummy-zzpromo.

*        lst_bape_vbak-vbeln       = lst_output_dummy-vbeln.  "NPOLINA 01/July/2019 DM1913 ED2K915483
        lst_bape_vbak-zzpromo     = lst_output_dummy-zzpromo.
        lst_extensionin-structure = lc_bape_vbak .
        lst_extensionin+30(960)   = lst_bape_vbak.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR  lst_extensionin.

*        lst_bape_vbakx-vbeln      = lst_output_dummy-vbeln. "NPOLINA 01/July/2019 DM1913 ED2K915483
        lst_bape_vbakx-zzpromo    = abap_true.
        lst_extensionin-structure = lc_bape_vbakx.
        lst_extensionin+30(960)   = lst_bape_vbakx.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR  lst_extensionin.


*====================================================================*
*     Header INX structure population for Header
*====================================================================*
        CLEAR lst_contract_hrdinx.

        IF lst_contract_hdrin-doc_type  IS NOT INITIAL.
          lst_contract_hrdinx-doc_type = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-doc_type IS NOT INITIAL
          lst_contract_hrdinx-doc_type = abap_false.
        ENDIF. " IF lst_contract_hdrin-doc_type IS NOT INITIAL

        IF lst_contract_hdrin-sales_org IS NOT INITIAL.
          lst_contract_hrdinx-sales_org = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-sales_org IS NOT INITIAL
          lst_contract_hrdinx-sales_org = abap_false.
        ENDIF. " IF lst_contract_hdrin-sales_org IS NOT INITIAL

        IF lst_contract_hdrin-distr_chan IS NOT INITIAL.
          lst_contract_hrdinx-distr_chan = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-distr_chan IS NOT INITIAL
          lst_contract_hrdinx-distr_chan = abap_false.
        ENDIF. " IF lst_contract_hdrin-distr_chan IS NOT INITIAL

        IF lst_contract_hdrin-division  IS NOT INITIAL.
          lst_contract_hrdinx-division = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-division IS NOT INITIAL
          lst_contract_hrdinx-division = abap_false.
        ENDIF. " IF lst_contract_hdrin-division IS NOT INITIAL

*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        IF lst_contract_hdrin-sales_off IS NOT INITIAL.
          lst_contract_hrdinx-sales_off = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-sales_off IS NOT INITIAL
          lst_contract_hrdinx-sales_off = abap_false.
        ENDIF. " IF lst_contract_hdrin-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

** SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*        IF lst_contract_hdrin-cstcndgrp2 IS NOT INITIAL.
*          lst_contract_hrdinx-cstcndgrp2 = abap_true.
*        ELSE. " ELSE -> IF lst_contract_hdrin-CSTCNDGRP2 IS NOT INITIAL
*          lst_contract_hrdinx-cstcndgrp2 = abap_false.
*        ENDIF.
** EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556


        IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL.
          lst_contract_hrdinx-cust_grp3 = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-cust_grp3 IS NOT INITIAL
          lst_contract_hrdinx-cust_grp3 = abap_false.
        ENDIF. " IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL

        IF lst_contract_hdrin-cstcndgrp4 IS NOT INITIAL.
          lst_contract_hrdinx-cust_grp4 = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-cust_grp4 IS NOT INITIAL
          lst_contract_hrdinx-cust_grp4 = abap_false.
        ENDIF. " IF lst_contract_hdrin-cstcndgrp4 IS NOT INITIAL

        IF lst_contract_hdrin-cstcndgrp5 IS NOT INITIAL.
          lst_contract_hrdinx-cust_grp5 = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-cust_grp5 IS NOT INITIAL
          lst_contract_hrdinx-cust_grp5 = abap_false.
        ENDIF. " IF lst_contract_hdrin-cstcndgrp5 IS NOT INITIAL

        IF lst_contract_hdrin-purch_no_c IS NOT INITIAL.
          lst_contract_hrdinx-purch_no_c = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-purch_no_c IS NOT INITIAL
          lst_contract_hrdinx-purch_no_c = abap_true.
        ENDIF. " IF lst_contract_hdrin-purch_no_c IS NOT INITIAL

        lst_contract_hrdinx-dlv_block  = abap_true.
        lst_contract_hrdinx-bill_block = abap_true.

        IF lst_contract_hdrin-ct_valid_t  IS NOT INITIAL.
          lst_contract_hrdinx-ct_valid_t = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL
          lst_contract_hrdinx-ct_valid_t = abap_false.
        ENDIF. " IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL

        IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL.
          lst_contract_hrdinx-ct_valid_f = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL
          lst_contract_hrdinx-ct_valid_f = abap_false.
        ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
        IF lst_contract_hdrin-bill_date IS NOT INITIAL.
          lst_contract_hrdinx-bill_date = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-bill_date IS NOT INITIAL
          lst_contract_hrdinx-bill_date = abap_false.
        ENDIF. " IF lst_contract_hdrin-bill_date IS NOT INITIAL
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*       Begin of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
        IF lst_contract_hdrin-currency IS NOT INITIAL.
          lst_contract_hrdinx-currency = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-currency IS NOT INITIAL
          lst_contract_hrdinx-currency = abap_false.
        ENDIF. " IF lst_contract_hdrin-currency IS NOT INITIAL
*       End   of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        IF lst_contract_hdrin-ass_number IS NOT INITIAL.
          lst_contract_hrdinx-ass_number = abap_true. "Assignment number
        ELSE.
          lst_contract_hrdinx-ass_number = abap_false.
        ENDIF.
        IF lst_contract_hdrin-ref_1 IS NOT INITIAL.
          lst_contract_hrdinx-ref_1 = abap_true.
        ELSE.
          lst_contract_hrdinx-ref_1 = abap_false.
        ENDIF.
* EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
        IF lst_contract_data-con_en_act IS NOT INITIAL.
          lst_contract_data_inx-con_en_act = abap_true.
        ENDIF.

        IF lst_contract_data-action_dat IS NOT INITIAL.
          lst_contract_data_inx-action_dat = abap_true.
        ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

        lst_contract_data_inx-itm_number = abap_true.
        lst_contract_data_inx-con_st_dat = abap_true.
        lst_contract_data_inx-con_st_rul = abap_true.
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        "Validity period category of contract
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*        IF lst_contract_data-val_per_ca IS NOT INITIAL.
*          lst_contract_data_inx-val_per_ca  = abap_true.
*        ENDIF.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
        "Validity period of contract
        IF lst_contract_data-val_per IS NOT INITIAL.
          lst_contract_data_inx-val_per  = abap_true.
        ENDIF.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        APPEND lst_contract_data_inx TO li_contract_data_inx.
*====================================================================*
* Populate the conditions table
*====================================================================*
        lst_contract_cond-itm_number = lc_posnr.
        lst_contract_cond-cond_type  = lst_output_dummy-kschl.
        lst_contract_cond-cond_value  = lst_output_dummy-kbetr / 10.
        APPEND lst_contract_cond TO li_contract_cond.
        CLEAR lst_contract_cond.

*====================================================================*
*     Populating Partner Table
*====================================================================*
        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
          EXPORTING
            input  = lst_output_dummy-parvw
          IMPORTING
            output = lst_output_dummy-parvw.

        lst_contract_partn-partn_role = lst_output_dummy-parvw.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_output_dummy-customer
          IMPORTING
            output = lst_contract_partn-partn_numb.

        lst_contract_partn-itm_number = lc_posnr.

        APPEND lst_contract_partn TO li_contract_partn.
        CLEAR lst_contract_partn.
*====================================================================*
*      BAPI TEXT
*====================================================================*
        lst_text-itm_number = lc_posnr.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = lst_output_dummy-stxh.

        APPEND lst_text TO li_text.
        CLEAR  lst_text.
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
        IF lst_output_dummy-inv_text IS NOT INITIAL.  "Text for Invoice instructions- header
          lst_text-itm_number = lc_posnr.
          lst_text-text_id    = lc_tdid_inv_header.
          lst_text-langu      = sy-langu.
          lst_text-format_col = c_format.
          lst_text-text_line  = lst_output_dummy-inv_text+0(132).
          APPEND lst_text TO li_text.
          CLEAR  lst_text.
          lst_text-itm_number = lc_posnr.
          lst_text-text_id    = lc_tdid_inv_header.
          lst_text-langu      = sy-langu.
*          lst_text-format_col = c_format.
          lst_text-text_line  = lst_output_dummy-inv_text+132(132).
          APPEND lst_text TO li_text.
          CLEAR  lst_text.
        ENDIF.

* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
*     Get Increment of item number in the SD document
        IF lst_output_dummy-auart IS NOT INITIAL.
          DATA(lst_tvak) = li_tvak[ auart = lst_output_dummy-auart ].
        ENDIF. " IF lst_output_dummy-auart IS NOT INITIAL

      ELSE. " ELSE -> IF lst_contract_hdrin IS INITIAL
*====================================================================*
*     Populating Partner Table
*====================================================================*
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        IF lst_output_dummy-parvw = c_sp.
          lst_contract_partn-partn_role = lst_output_dummy-parvw.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_output_dummy-kunnr
            IMPORTING
              output = lst_contract_partn-partn_numb.
          lst_contract_partn-itm_number = lc_posnr.
          APPEND lst_contract_partn TO li_contract_partn.
          CLEAR lst_contract_partn.
        ELSE.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443

          CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
            EXPORTING
              input  = lst_output_dummy-parvw
            IMPORTING
              output = lst_output_dummy-parvw.

          lst_contract_partn-partn_role = lst_output_dummy-parvw.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_output_dummy-customer
            IMPORTING
              output = lst_contract_partn-partn_numb.

          lst_contract_partn-itm_number = lc_posnr.

          APPEND lst_contract_partn TO li_contract_partn.
          CLEAR lst_contract_partn.
        ENDIF. "IF lst_output_dummy-parvw = c_sp.
      ENDIF. " IF lst_contract_hdrin IS INITIAL
* SOC by NPOLINA 28/June/2019 DM1913 ED2K915483
* Check Source and Target Order types  match with ZCACONSTANT
      IF lst_output_dummy-vbeln IS NOT INITIAL.
        READ TABLE li_ordreason ASSIGNING FIELD-SYMBOL(<lfs_reason>) WITH KEY vbeln = lst_output_dummy-vbeln
                                                                              BINARY SEARCH.
        IF <lfs_reason> IS ASSIGNED .
          IF <lfs_reason>-augru = v_augru.
            READ TABLE i_const ASSIGNING FIELD-SYMBOL(<lfs_cons>) WITH KEY devid = c_devid_e209
                                                                                 param1 = c_auart
                                                                                 low = <lfs_reason>-auart
                                                                                 high = lst_contract_hdrin-doc_type.
            IF sy-subrc EQ 0.
              CLEAR :lst_contract_hdrin-ord_reason.
              lst_contract_hrdinx-ord_reason = abap_true.
            ELSE.
              lst_contract_hdrin-ord_reason = <lfs_reason>-augru.
              lst_contract_hrdinx-ord_reason = abap_true.
            ENDIF.
          ELSE.
            lst_contract_hdrin-ord_reason = <lfs_reason>-augru.
            lst_contract_hrdinx-ord_reason = abap_true.
          ENDIF.
        ENDIF.

* SOC by NPOLINA ERPM2334 05/Dec/2019
        lst_contract_hdrin-ref_doc    = lst_output_dummy-vbeln.
        lst_contract_hrdinx-ref_doc = abap_true.

        IF p_devid = c_e225.    "ED2K917202 NPOLINA
          READ TABLE li_doc_cat INTO DATA(lst_doccat) WITH KEY vbeln = lst_output_dummy-vbeln BINARY SEARCH.
          IF sy-subrc EQ 0.
            lst_contract_hdrin-refdoc_cat = lst_doccat-vbtyp.
          ENDIF.
        ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019
      ENDIF.
* Order Reason ppopulated through Input file
      IF lst_output_dummy-augru IS NOT INITIAL.
        lst_contract_hdrin-ord_reason = lst_output_dummy-augru.
        lst_contract_hrdinx-ord_reason = abap_true.
      ENDIF.
* EOC by NPOLINA 28/June/2019 DM1913 ED2K915483
    ELSE. " ELSE -> IF lst_output_dummy-posnr = '000000'

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_output_dummy-posnr
        IMPORTING
          output = lst_output_dummy-posnr.

      READ TABLE li_contract_itm WITH KEY itm_number =
      lst_output_dummy-posnr TRANSPORTING NO FIELDS.
      IF sy-subrc IS NOT INITIAL.
*====================================================================*
*    Check BOM to determine line item numbers
*====================================================================*
        READ TABLE li_mvke ASSIGNING FIELD-SYMBOL(<lfs_mvke>)
        WITH KEY matnr = lst_output_dummy-matnr        " Material Number
                 vkorg = lst_contract_hdrin-sales_org  " Sales Organization
                 vtweg = lst_contract_hdrin-distr_chan " Distribution Channel
                 BINARY SEARCH.
* Begin by AMOHAMMED on 12/8/2020 TR # ED2K920719
*        lst_contract_hdrin-division   = lst_output_dummy-spart.
* End by AMOHAMMED on 12/8/2020 TR # ED2K920719
        IF sy-subrc IS INITIAL.
          IF <lfs_mvke>-dwerk IS NOT INITIAL.
            PERFORM f_get_bom USING    lst_output_dummy-matnr
                                       <lfs_mvke>-dwerk
                                       lst_output_dummy-zmeng
                                       lv_index
                                       lst_tvak-incpo
                              CHANGING li_create_contract
                                       li_bom_items.
          ENDIF. " IF <lfs_mvke>-dwerk IS NOT INITIAL
        ENDIF. " IF sy-subrc IS INITIAL

*   If not the Sold to lines, they are the ship to Lines ( PARVW = 'WE')  in an order
*   Which can be multiple and is considered as the ITEM lines of the Order
*====================================================================*
* First populate item table
*====================================================================*
        lst_contract_itm-cstcndgrp3  = lst_output_dummy-kdkg3.
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
        IF wa_output-auart = c_zofl AND rb_crea EQ c_x..
          lst_contract_itm-cstcndgrp2  = lst_output_dummy-kdkg2.
        ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        lst_contract_itm-cstcndgrp4  = lst_output_dummy-kdkg4.
        lst_contract_itm-cstcndgrp5  = lst_output_dummy-kdkg5.
        lst_contract_itm-ref_1       = lst_output_dummy-srid.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        lst_contract_itm-itm_number  = lst_output_dummy-posnr.
        lst_contract_itm-material    = lst_output_dummy-matnr.
        lst_contract_itm-target_qty  = lst_output_dummy-zmeng.
        lst_contract_itm-item_categ  = lst_output_dummy-pstyv.
        lst_contract_itm-hg_lv_item  = lc_posnr.
        lst_contract_itm-ref_1_s     = lst_output_dummy-ihrez.
        lst_contract_itm-reason_rej  = lst_output_dummy-abgru.
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        lst_contract_itm-purch_no_s  = lst_output_dummy-bstnk.
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443

* SOC by NPOLINA ERPM-16504 ED2K918499
        IF  lst_output_dummy-bstnk IS INITIAL  AND lv_refdoc IS NOT INITIAL.
          READ TABLE li_vbkdpo INTO DATA(ls_vbkd) WITH KEY vbeln = lv_refdoc
                                                           posnr = lst_output_dummy-posnr BINARY SEARCH.
          IF sy-subrc EQ 0.
            lst_contract_itm-purch_no_c = ls_vbkd-bstkd.
          ENDIF.
        ENDIF.
* EOC by NPOLINA ERPM-16504 ED2K918499

        APPEND lst_contract_itm TO li_contract_itm.
        CLEAR lst_contract_itm.

*====================================================================*
* Populate the conditions table
*====================================================================*
        lst_contract_cond-itm_number = lst_output_dummy-posnr.
        lst_contract_cond-cond_type  = lst_output_dummy-kschl.

        READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
        WITH KEY kschl = lst_output_dummy-kschl
        BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          IF <lfs_cond>-krech NE 'A'.
            lst_contract_cond-cond_value = lst_output_dummy-kbetr / 10.
          ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
            lst_contract_cond-cond_value = lst_output_dummy-kbetr.
          ENDIF. " IF <lfs_cond>-krech NE 'A'
        ENDIF. " IF sy-subrc IS INITIAL

        APPEND lst_contract_cond TO li_contract_cond.
        CLEAR lst_contract_cond.

*====================================================================*
*      BAPI TEXT
*====================================================================*
        lst_text-itm_number = lst_output_dummy-posnr.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = lst_output_dummy-stxh.

        APPEND lst_text TO li_text.
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        IF lst_output_dummy-bstnk IS NOT INITIAL.
          lst_text-itm_number = lst_output_dummy-posnr.
          lst_text-text_id    = lc_tdid_eal.
          lst_text-langu      = sy-langu.
          lst_text-format_col = c_format.
          lst_text-text_line  = lst_output_dummy-bstnk.

          APPEND lst_text TO li_text.
        ENDIF.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
*** BOC by SAYANDAS on 29th June 2017 for ERP-2801
        IF li_bom_items IS NOT INITIAL.
          LOOP AT li_bom_items ASSIGNING FIELD-SYMBOL(<lfs_bom>).

            lst_text-itm_number = <lfs_bom>-old_posnr + lst_tvak-incpo.
            lst_text-text_id    = v_tdid.
            lst_text-langu      = sy-langu.
            lst_text-format_col = c_format.
            lst_text-text_line  = lst_output_dummy-stxh.
            IF lst_text-text_line IS NOT INITIAL.
              APPEND lst_text TO li_text1.
            ENDIF.
            CLEAR  lst_text.

*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
            IF lst_output_dummy-bstnk IS NOT INITIAL.
              lst_text-itm_number = <lfs_bom>-old_posnr + lst_tvak-incpo.
              lst_text-text_id    = lc_tdid_eal.
              lst_text-langu      = sy-langu.
              lst_text-format_col = c_format.
              lst_text-text_line  = lst_output_dummy-bstnk.
              APPEND lst_text TO li_text1.
            ENDIF.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
          ENDLOOP. " LOOP AT li_bom_items ASSIGNING FIELD-SYMBOL(<lfs_bom>)
          REFRESH : li_bom_items.
        ENDIF. " IF li_bom_items IS NOT INITIAL
*** EOC by SAYANDAS on 29th June 2017 for ERP-2801


*====================================================================*
* Populate the Extensionin table
*====================================================================*
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
        CLEAR: lst_bape_vbap.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
        lst_bape_vbap-vbeln       = lst_output_dummy-vbeln.
        lst_bape_vbap-zzpromo     = lst_output_dummy-zzpromo.

* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-zzconstart
          IMPORTING
            date_internal            = lst_bape_vbap-zzconstart
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_bape_vbap-zzconstart.
        ENDIF.

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-zzconend
          IMPORTING
            date_internal            = lst_bape_vbap-zzconend
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
* BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
*          CLEAR lst_bape_vbap-zzconstart.
          CLEAR lst_bape_vbap-zzconend.
* EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
        ENDIF.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *

        lst_extensionin-structure = lc_bape_vbap.
        lst_bape_vbap-posnr       = lst_output_dummy-posnr.
        lst_extensionin+30(960)   = lst_bape_vbap.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR lst_extensionin.

        CLEAR lst_bape_vbapx.
        lst_bape_vbapx-vbeln      = lst_output_dummy-vbeln.
        lst_bape_vbapx-zzpromo    = abap_true.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
** BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*        lst_bape_vbap-zzconstart  = abap_true.
*        lst_bape_vbap-zzconend    = abap_true.
** EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
        lst_bape_vbapx-zzconstart  = abap_true.
        lst_bape_vbapx-zzconend    = abap_true.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
        lst_extensionin-structure = lc_bape_vbapx.
        lst_bape_vbapx-posnr      = lst_output_dummy-posnr.
        lst_extensionin+30(960)   = lst_bape_vbapx.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR  lst_extensionin.
*====================================================================*
*     Populate Item Date
*====================================================================*
        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-guebg
          IMPORTING
            date_internal            = lst_contract_data-con_st_dat
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_data-con_st_dat.
        ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL

          CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
            EXPORTING
              date_external            = lst_output_dummy-gueen
            IMPORTING
              date_internal            = lst_contract_data-con_en_dat
            EXCEPTIONS
              date_external_is_invalid = 1.
          IF sy-subrc IS NOT INITIAL.
            CLEAR lst_contract_data-con_en_dat.
          ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL
            lst_contract_data_inx-con_en_dat = abap_true.
            lst_contract_data_inx-con_en_rul = abap_true.
          ENDIF. " IF sy-subrc IS NOT INITIAL
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
          "Validity period category of contract
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*          IF lst_output_dummy-vlaufk IS NOT INITIAL.
*            lst_contract_data-val_per_ca  = lst_output_dummy-vlaufk.
*            lst_contract_data_inx-val_per_ca = abap_true.
*          ENDIF.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
          "Validity period of contract
          IF lst_output_dummy-vlaufz IS NOT INITIAL.
            lst_contract_data-val_per  = lst_output_dummy-vlaufz.
            lst_contract_data_inx-val_per = abap_true.
          ENDIF.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
          lst_contract_data-itm_number = lst_output_dummy-posnr.
          APPEND lst_contract_data TO li_contract_data.

          lst_contract_data_inx-itm_number = abap_true.
          lst_contract_data_inx-con_st_dat = abap_true.
          lst_contract_data_inx-con_st_rul = abap_true.
          APPEND lst_contract_data_inx TO li_contract_data_inx.
        ENDIF. " IF sy-subrc IS NOT INITIAL
*====================================================================*
*     Populate partner details
*====================================================================*

        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
          EXPORTING
            input  = lst_output_dummy-parvw
          IMPORTING
            output = lst_output_dummy-parvw.


        lst_contract_partn-partn_role = lst_output_dummy-parvw.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_output_dummy-kunnr
          IMPORTING
            output = lst_contract_partn-partn_numb.

*** BOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
        SELECT kunnr,
               vkorg,
               vtweg,
               spart " Division
          FROM knvv  " Customer Master Sales Data
          INTO TABLE @DATA(li_knvv)
          WHERE kunnr = @lst_contract_partn-partn_numb
          AND vkorg = @lst_contract_hdrin-sales_org
          AND vtweg = @lst_contract_hdrin-distr_chan
          AND spart = @lst_contract_hdrin-division.
        IF sy-subrc NE 0.

          st_err_msg-msgid = lc_msgid.
          st_err_msg-msgty = lc_e.
          st_err_msg-msgno = lc_msgno.
          st_err_msg-msgv1 = lst_contract_partn-partn_numb.
          st_err_msg-msgv2 = lst_contract_hdrin-sales_org.
          APPEND st_err_msg TO i_err_msg.

* SOC by NPOLINA ERPM2334 05/Dec/2019
          IF p_devid = c_e225.
            FREE:i_return[].
            st_err_msg-msgid = lc_msgid.
            st_return-type = lc_e.
            st_return-number = lc_msgno.
            st_return-message = lst_contract_partn-partn_numb.
            st_return-message_v1 = lst_contract_hdrin-sales_org.
            APPEND st_return TO i_return.
            PERFORM f_update_log_staging_e225 USING lst_output_dummy-log_handle
                                                    lv_salesdocin lst_output_dummy-zlogno.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          ELSE.
            FREE:i_return[].
            st_err_msg-msgid = lc_msgid.
            st_return-id = lc_msgid.
            st_return-type = lc_e.
            st_return-number = lc_msgno.
            st_return-message_v1 = lst_contract_partn-partn_numb.
            st_return-message_v2 = lst_contract_hdrin-sales_org.
            APPEND st_return TO i_return.
            PERFORM f_update_log_staging_e101 USING lst_output_dummy-log_handle
                                                    lv_salesdocin lst_output_dummy-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019
          CLEAR: st_err_msg.
          CONTINUE.
        ENDIF. " IF sy-subrc NE 0

*** EOC BY SAYANDAS on 31-JAN-2018 for ERP-6266

        lst_contract_partn-itm_number = lst_output_dummy-posnr.
        APPEND lst_contract_partn TO li_contract_partn.
        CLEAR lst_contract_partn.

**** BOC BY SAYANDAS for BOM Partner on 23-AUG-2017
*        IF i_bom_partner IS NOT INITIAL.
*
*          LOOP AT i_bom_partner INTO lst_bom_partner.
*            lst_contract_partn-itm_number = lst_bom_partner-posnr.
*
*            CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
*              EXPORTING
*                input  = lst_bom_partner-parvw
*              IMPORTING
*                output = lst_bom_partner-parvw.
*
*            lst_contract_partn-partn_role = lst_bom_partner-parvw.
*
*            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*              EXPORTING
*                input  = lst_bom_partner-kunnr
*              IMPORTING
*                output = lst_bom_partner-kunnr.
*
*            lst_contract_partn-partn_numb =  lst_bom_partner-kunnr.
*            APPEND lst_contract_partn TO li_contract_partn.
*            CLEAR lst_contract_partn.
*
*          ENDLOOP. " LOOP AT i_bom_partner INTO lst_bom_partner
*
*        ENDIF. " IF i_bom_partner IS NOT INITIAL
**** EOC BY SAYANDAS for BOM Partner on 23-AUG-2017

      ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL
*====================================================================*
*     Populate partner details
*====================================================================*
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
        IF lst_output_dummy-parvw = c_sp.
          lst_contract_partn-partn_role = lst_output_dummy-parvw.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_output_dummy-kunnr
            IMPORTING
              output = lst_contract_partn-partn_numb.
          lst_contract_partn-itm_number = lst_output_dummy-posnr.
          APPEND lst_contract_partn TO li_contract_partn.
          CLEAR lst_contract_partn.
        ELSE.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443

          CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
            EXPORTING
              input  = lst_output_dummy-parvw
            IMPORTING
              output = lst_output_dummy-parvw.


          lst_contract_partn-partn_role = lst_output_dummy-parvw.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_output_dummy-kunnr
            IMPORTING
              output = lst_contract_partn-partn_numb.
*** BOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
          SELECT kunnr,
                 vkorg,
                 vtweg,
                 spart " Division
            FROM knvv  " Customer Master Sales Data
            INTO TABLE @li_knvv
            WHERE kunnr = @lst_contract_partn-partn_numb
            AND vkorg = @lst_contract_hdrin-sales_org
            AND vtweg = @lst_contract_hdrin-distr_chan
            AND spart = @lst_contract_hdrin-division.
          IF sy-subrc NE 0.

            st_err_msg-msgid = lc_msgid.
            st_err_msg-msgty = lc_e.
            st_err_msg-msgno = lc_msgno.
            st_err_msg-msgv1 = lst_contract_partn-partn_numb.
            st_err_msg-msgv2 = lst_contract_hdrin-sales_org.
            APPEND st_err_msg TO i_err_msg.
* SOC by NPOLINA ERPM2334 05/Dec/2019
            IF p_devid = c_e225.
              st_err_msg-msgid = lc_msgid.
              st_return-type = lc_e.
              st_return-number = lc_msgno.
              st_return-message = lst_contract_partn-partn_numb.
              st_return-message_v1 = lst_contract_hdrin-sales_org.
              FREE:i_return[].
              APPEND st_return TO i_return.
              PERFORM f_update_log_staging_e225 USING lst_output_dummy-log_handle
                                                      lv_salesdocin lst_output_dummy-zlogno.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            ELSE.
              st_err_msg-msgid = lc_msgid.
              st_return-id = lc_msgid.
              st_return-type = lc_e.
              st_return-number = lc_msgno.
              st_return-message_v1 = lst_contract_partn-partn_numb.
              st_return-message_v2 = lst_contract_hdrin-sales_org.
              FREE:i_return[].
              APPEND st_return TO i_return.
              PERFORM f_update_log_staging_e101 USING lst_output_dummy-log_handle
                                                      lv_salesdocin lst_output_dummy-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019
            CLEAR: st_err_msg.
            CONTINUE.
          ENDIF. " IF sy-subrc NE 0

*** EOC BY SAYANDAS on 31-JAN-2018 for ERP-6266

          lst_contract_partn-itm_number = lst_output_dummy-posnr.
          APPEND lst_contract_partn TO li_contract_partn.
          CLEAR lst_contract_partn.
        ENDIF. "IF lst_output_dummy-parvw = c_sp.
      ENDIF. " IF sy-subrc IS NOT INITIAL
    ENDIF. " IF lst_output_dummy-posnr = '000000'
***************
* SOC by NPOLINA ERPM2334 05/Dec/2019
    IF p_devid EQ c_e225 AND lst_output_dummy-bp_email IS NOT INITIAL.
* Populate Partner Email ID
      CLEAR:st_addr.
      st_addr-partner = lst_output_dummy-customer.
      st_addr-parvw = lst_output_dummy-parvw.
      st_addr-posnr = lst_output_dummy-posnr.
      st_addr-email = lst_output_dummy-bp_email.
      APPEND st_addr TO i_addr.

    ENDIF.   "P_devid eq C_E225 and BP_EMAIL not initial
** EOC by NPOLINA ERPM2334 05/Dec/2019
***************
*   Before a new header record/ last entry - Create contract
    IF lv_index EQ lines( li_create_contract ).
      DATA(lv_create_contract) = abap_true.
    ELSE. " ELSE -> IF lv_index EQ lines( li_create_contract )
      IF li_create_contract[ ( lv_index + 1 ) ]-parvw EQ c_ag.
        lv_create_contract = abap_true.
      ENDIF. " IF li_create_contract[ ( lv_index + 1 ) ]-parvw EQ c_ag
    ENDIF. " IF lv_index EQ lines( li_create_contract )

    IF lv_create_contract EQ abap_true.
      CLEAR lv_create_contract.
*====================================================================*
*     Call Bapi
*====================================================================*
      CALL FUNCTION 'BAPI_CONTRACT_CREATEFROMDATA' ##FM_SUBRC_OK
        EXPORTING
          contract_header_in     = lst_contract_hdrin
          contract_header_inx    = lst_contract_hrdinx
        IMPORTING
          salesdocument          = lv_salesdocin
        TABLES
          return                 = li_return
          contract_items_in      = li_contract_itm
          contract_partners      = li_contract_partn
          contract_conditions_in = li_contract_cond
          contract_data_in       = li_contract_data
          contract_data_inx      = li_contract_data_inx
          contract_text          = li_text
          extensionin            = li_extensionin
          partneraddresses       = li_bapi_addr.   "ERPM2334

      IF NOT li_return IS INITIAL.
* SOC by NPOLINA ERPM2334 05/Dec/2019
        IF p_devid = c_e225.
          CLEAR:v_err.
          i_return[] = li_return[].
          PERFORM f_update_log_staging_e225 USING lst_output_dummy-log_handle
                                                  lv_salesdocin lst_output_dummy-zlogno.
          IF i_addr IS NOT INITIAL AND v_err IS INITIAL..
            PERFORM f_update_partner_email USING lv_salesdocin lst_contract_hdrin lst_contract_hrdinx.
          ENDIF.
        ELSE. " IF p_devid = c_e225.
          CLEAR:v_err.
          i_return[] = li_return[].
          PERFORM f_update_log_staging_e101 USING lst_output_dummy-log_handle
                                                  lv_salesdocin lst_output_dummy-zlogno.
        ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019
        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc IS INITIAL.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: lst_return,
                 st_err_msg.
        ELSE. " ELSE -> IF sy-subrc IS INITIAL

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.

          READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
          IF sy-subrc IS INITIAL.
            st_err_msg-wbeln = lv_salesdocin.
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return,
                   st_err_msg.
          ENDIF. " IF sy-subrc IS INITIAL
*** BOC by SAYANDAS on 29th June 2017 for ERP-2801
*------------------------------------------------------MM01----------*
*          refresh li_return.
*        CALL FUNCTION 'BAPI_CUSTOMERCONTRACT_CHANGE'
*        EXPORTING
*          salesdocument       = lv_salesdocin
*          contract_header_in  = lst_contract_hdrin
*          contract_header_inx = lst_contract_hrdinx
**          behave_when_error   = 'P'
*        TABLES
*          return              = li_return
**          contract_item_in    = li_contract_itm
**          contract_item_inx   = li_contract_items_inx
*          contract_text       = li_text.
*        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' .
*--------------------------------------------------------------------*

          IF li_text1 IS NOT INITIAL. " BOM item text internal table

            LOOP AT li_text1 INTO lst_text1. " loop on BOM item text
*** concatenating contract number with line item number
              CONCATENATE lv_salesdocin lst_text1-itm_number INTO lst_header1-tdname.

              lst_header1-tdspras = sy-langu.
              lst_header1-tdobject  = lc_vbbp.
              lst_header1-tdid      = lst_text1-text_id.

              lst_lines1-tdline = lst_text1-text_line.
              lst_lines1-tdformat = lst_text1-format_col.
              APPEND lst_lines1 TO li_lines1. " appending text
              CLEAR lst_lines1.

*** Calling SAVE_TEXT FM to update text
              CALL FUNCTION 'SAVE_TEXT'
                EXPORTING
                  client          = sy-mandt
                  header          = lst_header1
                  savemode_direct = abap_true
                TABLES
                  lines           = li_lines1
                EXCEPTIONS
                  id              = 1
                  language        = 2
                  name            = 3
                  object          = 4
                  OTHERS          = 5.

              IF sy-subrc = 0.
                REFRESH li_lines1.
                CLEAR : lst_lines1, lst_header1.
              ENDIF. " IF sy-subrc = 0

            ENDLOOP. " LOOP AT li_text1 INTO lst_text1

          ENDIF. " IF li_text1 IS NOT INITIAL
*** EOC by SAYANDAS on 29th June 2017 for ERP-2801
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
          IF rb_crea IS NOT INITIAL AND lst_contract_hdrin-doc_type EQ c_zsbp.
            CLEAR:v_fplnr.
            SELECT SINGLE fplnr FROM vbkd INTO v_fplnr
                WHERE vbeln = lv_salesdocin
                  AND posnr = v_posnr.
            IF sy-subrc EQ 0.
              IF wa_output-autte IS NOT INITIAL.
                IF wa_output-autte EQ 1 OR wa_output-autte EQ '1'.
                  wa_output-autte = abap_true.
                ENDIF.
              ENDIF.
* SOC by NPOLINA ERP7816 ED2K915066
* This logic to redetermine/calculate Billing plan dates as per In Advance and Billing Rule
              PERFORM f_update_billplan_zsbp USING lv_salesdocin v_fplnr wa_output-perio
                                                    wa_output-autte wa_output-peraf.
              CLEAR:wa_output.
* EOC by NPOLINA ERP7816 ED2K915066
            ENDIF.                           "IF sy-subrc on VBKD
          ENDIF.                            "IF rb_crea is NOT INITIAL.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
        ENDIF. " IF sy-subrc IS INITIAL
      ENDIF. " IF NOT li_return IS INITIAL

    ENDIF. " IF lv_create_contract EQ abap_true

  ENDLOOP  . " LOOP AT li_create_contract INTO DATA(lst_output_x)

***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  PERFORM f_send_email_move_file.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189

  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0


ENDFORM.
*&-----------------------------------*
*&      Form  F_FILL_PO
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_fill_po USING fp_lc_selopt TYPE dynfnam. " Field name

  CONSTANTS: lc_field TYPE dfies-fieldname     VALUE 'BSTNK', " Field Name
             lc_s     TYPE ddbool_d            VALUE 'S'.     " DD: truth value


  SELECT DISTINCT bstnk
    FROM vbak " Sales Document: Header Data
    INTO TABLE i_bstnk
    WHERE auart = c_sub
    AND bstnk <> space.

  IF sy-subrc IS INITIAL.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = lc_field     "'BSTNK'
        dynpprog        = sy-cprog
        dynpnr          = sy-dynnr
        dynprofield     = fp_lc_selopt "'S_BSTNK'
        window_title    = text-042     "'Purchase Document Number'
        value_org       = lc_s         "'S'
      TABLES
        value_tab       = i_bstnk
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF. " IF sy-subrc <> 0
  ELSE. " ELSE -> IF sy-subrc IS INITIAL
*    MESSAGE text-043 TYPE 'W'.
  ENDIF. " IF sy-subrc IS INITIAL

ENDFORM.
*&-----------------------------------*
*&      Form  GET_CREATOR
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_get_creator USING fp_dynfnam    TYPE dynfnam. " Field name

  CONSTANTS: lc_field TYPE dfies-fieldname VALUE 'ERNAM', " Field Name
             lc_s     TYPE ddbool_d  VALUE 'S'.           " DD: truth value

  SELECT DISTINCT ernam
                  INTO TABLE i_ernam
                  FROM vbak " Sales Document: Header Data
                  WHERE  erdat IN s_date.
  IF sy-subrc IS INITIAL.

  ENDIF. " IF sy-subrc IS INITIAL

  IF NOT i_ernam IS INITIAL.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = lc_field "'ERNAM'
        dynpprog        = sy-cprog
        dynpnr          = sy-dynnr
        dynprofield     = fp_dynfnam
        window_title    = text-044 "'Person responsible for subscription order creation'
        value_org       = lc_s     "'S'
      TABLES
        value_tab       = i_ernam
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF. " IF sy-subrc <> 0

    IF sy-subrc <> 0.
*      MESSAGE text-045 TYPE 'W'.
    ENDIF. " IF sy-subrc <> 0
  ELSE. " ELSE -> IF NOT i_ernam IS INITIAL
*    MESSAGE text-045 TYPE 'W'.
  ENDIF. " IF NOT i_ernam IS INITIAL
ENDFORM.
*&-----------------------------------*
*&      Form  DISPLAY_SUBS_ORD_CHANGE_ALV
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_display_subs_ord_change_alv .

  TYPES : BEGIN OF lty_change_subs_ord_temp1,
            vbeln      TYPE vbeln_va,   " Sales Document
            auart      TYPE auart,      " Sales Document Type
            lifsk      TYPE lifsk,      " Delivery block (document header)
            faksk      TYPE faksk,      " Billing block in SD document
            vkorg      TYPE vkorg,      " Sales Organization
            vtweg      TYPE vtweg,      " Distribution Channel
            spart      TYPE spart,      " Division
            vkbur      TYPE vkbur,      " Sales Office
            knumv      TYPE knumv,      " Number of the document condition
            bstnk      TYPE bstnk,      " Customer purchase order number
            ihrez      TYPE ihrez,      " Your Reference
            xblnr      TYPE xblnr_v1,   " Reference Document Number
            zzpromo    TYPE zpromo,     " Promo code
            posnr      TYPE posnr_va,   " Sales Document Item
            matnr      TYPE matnr,      " Material Number
            pstyv      TYPE pstyv,      " Sales document item category
            abgru      TYPE abgru_va,   " Reason for rejection of quotations and sales orders
            zmeng      TYPE dzmeng,     " Target quantity in sales units
            werks      TYPE werks_ext,  " Plant (Own or External)
            parvw      TYPE parvw,      " Partner Function
            kunnr      TYPE kunnr,      " Customer Number
            zlsch      TYPE schzw_bseg, " Payment Method
            kdkg3      TYPE kdkg3,      " Customer condition group 3
            kdkg4      TYPE kdkg4,      " Customer condition group 4
            kdkg5      TYPE kdkg5,      " Customer condition group 5
            waerk      TYPE waerk,
            fkdat      TYPE fkdat,
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            bsark      TYPE bsark,      " NPALLA
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            zuonr      TYPE ordnr_v,
            kdkg2      TYPE kdkg2,  "NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
            zzconstart TYPE zconstart,
            zzconend   TYPE zconend,
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
          END OF lty_change_subs_ord_temp1.

  DATA:
    li_change_subs_ord_temp TYPE STANDARD TABLE OF ty_exist_subs_ord
                            INITIAL SIZE 0.

***BOC BY SAYANDAS on 31st AUG 2017 for ERP-4065
  DATA : lst_change_subs_ord_temp TYPE ty_exist_subs_ord.
  DATA : li_change_subs_ord_temp1 TYPE STANDARD TABLE OF lty_change_subs_ord_temp1
                                                                    INITIAL SIZE 0.
  DATA : lst_change_subs_ord_temp1  TYPE lty_change_subs_ord_temp1.

  CONSTANTS: lc_ag    TYPE parvw VALUE 'AG',      " Partner Function
             lc_we    TYPE parvw VALUE 'WE',      " Partner Function
             lc_posnr TYPE char6  VALUE '000000'. " Posnr of type CHAR6
***EOC BY SAYANDAS on 31st AUG 2017 for ERP-4065

*  SELECT    a~vbeln, "Invoice number
*            a~auart, "Doc. type SAP mandatory
*            a~vkorg, "Sales org. SAP mandatory
*            a~vtweg, "Dist. channel SAP mandatory
*            a~spart, "Division SAP mandatory
**   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*            a~vkbur,
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
**            a~guebg, "Contract start date Wiley mandatory
**            a~gueen, "Contract end date Wiley mandatory
*            a~bstnk, "Purchase order number Wiley mandatory
*            a~ihrez, "Your Reference
*            a~knumv, "Number of document condo.
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*            a~xblnr,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*            a~zzpromo, "Promo code
*            a~lifsk,   "Delivery block Wiley mandatory
*            a~faksk,   "Billing block Wiley mandatory
*            b~posnr,   "Item number
*            b~matnr,   "Material
*            b~werks,   "Plant
*            b~pstyv,   "Item category SAP mandatory
*            b~abgru,   "Reason for rejection
*            b~zmeng,   "Target quantity
*            c~parvw,   "Partner Function
*            c~kunnr,   "Customer Number
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*            e~zlsch,
*            e~kdkg3,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*            e~kdkg4, " Customer condition group 4
*            e~kdkg5  " Customer condition group 5
****BOC BY SAYANDAS on 31st AUG 2017 for ERP-4065
**            f~vbegdat AS guebg,
**            f~venddat AS gueen
****EOC BY SAYANDAS on 31st AUG 2017 for ERP-4065
*            INTO TABLE @DATA(li_change_subs_ord_temp1)
**            FROM vbak AS a LEFT OUTER JOIN vbap AS b
*            FROM vbak AS a INNER JOIN vbap AS b
*            ON ( a~vbeln = b~vbeln )
**            LEFT OUTER JOIN vbpa AS c
*            INNER JOIN vbpa AS c
*            ON ( b~vbeln = c~vbeln
*            AND ( b~posnr = c~posnr
*             OR c~posnr = @lc_posnr ) )
*            INNER JOIN vbkd AS e
*            ON ( b~vbeln = e~vbeln
*            AND  ( b~posnr = e~posnr
*             OR e~posnr = @lc_posnr ) )
****BOC BY SAYANDAS on 31st AUG 2017 for ERP-4065
**            LEFT OUTER JOIN veda AS f
**            ON ( c~vbeln = f~vbeln
**            AND  c~posnr = f~vposn )
****EOC BY SAYANDAS on 31st AUG 2017 for ERP-4065
*            WHERE a~vbeln IN @s_vbeln
*            AND ( a~auart   EQ @c_sub
*            OR    a~auart   EQ @c_rew )
*            AND a~erdat   IN @s_date
*            AND a~bstnk   IN @s_bstnk
*            AND a~ernam   IN @s_userid
*            AND c~parvw   IN @i_vbpa.

  SELECT a~vbeln,
         a~auart,
         a~lifsk,
         a~faksk,
         a~vkorg,
         a~vtweg,
         a~spart,
         a~vkbur,
*           a~guebg,
*           a~gueen,
         a~knumv,
         a~bstnk,
         a~ihrez,
         a~zuonr,
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
         a~waerk,
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
         a~xblnr,
         a~zzpromo,
         b~posnr,
         b~matnr,
         b~pstyv,
         b~abgru,
         b~zmeng,
         b~werks,
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
         b~zzconstart,
         b~zzconend,
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
         c~posnr AS line_num,
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
         c~parvw,
         c~kunnr
    INTO TABLE @DATA(li_vbak_vbap_vbpa)
    FROM vbak AS a INNER JOIN vbap AS b
    ON ( a~vbeln = b~vbeln )
    INNER JOIN vbpa AS c
    ON      ( b~vbeln = c~vbeln
            AND ( b~posnr = c~posnr
             OR c~posnr = @lc_posnr ) )
    WHERE a~vbeln IN @s_vbeln
    AND ( a~auart EQ @c_sub
    OR a~auart EQ @c_rew
* Begin of Change INC0211601:20/09/2018:RBTIRUMALA:ED2K913481
    OR a~auart EQ @c_zofl
* End of Change INC0211601:20/09/2018:RBTIRUMALA:ED2K913481
* Begin of Change INC0363877:06/03/2021:ARGADEELA:ED1K913075
    OR a~auart EQ @c_zcop )
* End of Change INC0363877:06/03/2021:ARGADEELA:ED1K913075
    AND a~erdat IN @s_date
    AND a~bstnk IN @s_bstnk
    AND a~ernam IN @s_userid
    AND c~parvw IN @i_vbpa.

  IF sy-subrc IS INITIAL AND li_vbak_vbap_vbpa IS NOT INITIAL.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
    SORT li_vbak_vbap_vbpa BY vbeln posnr parvw line_num.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
*    SELECT vbeln,
*           posnr,
*           parvw,
*           kunnr " Customer Number
*      INTO TABLE @DATA(li_vbpa)
*      FROM vbpa  " Sales Document: Partner
*      FOR ALL ENTRIES IN @li_vbak_vbap
*      WHERE  vbeln = @li_vbak_vbap-vbeln
*      AND   ( posnr = @li_vbak_vbap-posnr
*            OR posnr = @lc_posnr )
*      AND    parvw IN @i_vbpa.
*
*    IF sy-subrc IS INITIAL.
*      SORT li_vbpa BY vbeln posnr.
*    ENDIF. " IF sy-subrc IS INITIAL

*        IF sy-subrc IS INITIAL AND li_vbpa IS NOT INITIAL.
*          SELECT vbeln,
*                 vposn,
*                 vbegdat,
*                 venddat
*            INTO TABLE @DATA(li_veda)
*            FROM veda
*            FOR ALL ENTRIES IN @li_vbpa
*            WHERE vbeln = @li_vbpa-vbeln
*            AND    vposn = @li_vbpa-posnr.
*
*
*        ENDIF.

    SELECT vbeln,
           posnr,
           zlsch,
           fkdat,
           bsark,       " NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
           kdkg2,       " NPOLINA ERPM4543 23/Oct/2019 ED2K916556
           kdkg3,
           kdkg4,
           kdkg5 " Customer condition group 5
      INTO TABLE @DATA(li_vbkd)
      FROM vbkd  " Sales Document: Business Data
      FOR ALL ENTRIES IN @li_vbak_vbap_vbpa
      WHERE vbeln = @li_vbak_vbap_vbpa-vbeln
      AND  ( posnr = @li_vbak_vbap_vbpa-posnr
          OR posnr = @lc_posnr ).

    IF sy-subrc IS INITIAL.
      SORT li_vbkd BY vbeln posnr.
    ENDIF. " IF sy-subrc IS INITIAL
  ENDIF. " IF sy-subrc IS INITIAL AND li_vbak_vbap_vbpa IS NOT INITIAL

  DATA: lst_vbak_vbap_vbpa LIKE LINE OF li_vbak_vbap_vbpa,
*        lst_vbpa      LIKE LINE OF li_vbpa,
        lst_vbkd           LIKE LINE OF li_vbkd.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
  DATA(li_vbak_vbap_vbpa_copy) =  li_vbak_vbap_vbpa.
  DATA: lst_vbak_vbap_vbpa_copy LIKE LINE OF li_vbak_vbap_vbpa.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157

  LOOP AT li_vbak_vbap_vbpa INTO lst_vbak_vbap_vbpa.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
    IF lst_vbak_vbap_vbpa-parvw = c_we.
      DATA(lv_tabix) = sy-tabix.
      lv_tabix = lv_tabix + 1.
      READ TABLE li_vbak_vbap_vbpa_copy INTO lst_vbak_vbap_vbpa_copy INDEX lv_tabix.
      IF sy-subrc = 0.
        IF ( lst_vbak_vbap_vbpa-vbeln = lst_vbak_vbap_vbpa_copy-vbeln )
          AND ( lst_vbak_vbap_vbpa-posnr = lst_vbak_vbap_vbpa_copy-posnr )
          AND ( lst_vbak_vbap_vbpa-parvw = lst_vbak_vbap_vbpa_copy-parvw )
          AND ( lst_vbak_vbap_vbpa-line_num NE lst_vbak_vbap_vbpa_copy-line_num )
          AND lst_vbak_vbap_vbpa_copy-line_num NE lc_posnr.
          CONTINUE.
        ENDIF. " IF ( lst_vbak_vbap_vbpa-vbeln = lst_vbak_vbap_vbpa_copy-vbeln )
      ENDIF. " IF sy-subrc = 0
    ENDIF. " IF lst_vbak_vbap_vbpa-parvw = c_we
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
    lst_change_subs_ord_temp1-vbeln = lst_vbak_vbap_vbpa-vbeln.
    lst_change_subs_ord_temp1-auart = lst_vbak_vbap_vbpa-auart.
    lst_change_subs_ord_temp1-lifsk = lst_vbak_vbap_vbpa-lifsk.
    lst_change_subs_ord_temp1-faksk = lst_vbak_vbap_vbpa-faksk.
    lst_change_subs_ord_temp1-vkorg = lst_vbak_vbap_vbpa-vkorg.
    lst_change_subs_ord_temp1-vtweg = lst_vbak_vbap_vbpa-vtweg.
    lst_change_subs_ord_temp1-spart = lst_vbak_vbap_vbpa-spart.
    lst_change_subs_ord_temp1-vkbur = lst_vbak_vbap_vbpa-vkbur.

* SOC by NPOLINA DM1913(E209) ED2K915483
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lst_change_subs_ord_temp1-vkbur
      IMPORTING
        output = lst_change_subs_ord_temp1-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
    lst_change_subs_ord_temp1-knumv = lst_vbak_vbap_vbpa-knumv.
    lst_change_subs_ord_temp1-bstnk = lst_vbak_vbap_vbpa-bstnk.
    lst_change_subs_ord_temp1-ihrez = lst_vbak_vbap_vbpa-ihrez.
    lst_change_subs_ord_temp1-xblnr = lst_vbak_vbap_vbpa-xblnr.
    lst_change_subs_ord_temp1-zzpromo = lst_vbak_vbap_vbpa-zzpromo.
    lst_change_subs_ord_temp1-posnr = lst_vbak_vbap_vbpa-posnr.
    lst_change_subs_ord_temp1-matnr = lst_vbak_vbap_vbpa-matnr.
    lst_change_subs_ord_temp1-pstyv = lst_vbak_vbap_vbpa-pstyv.
    lst_change_subs_ord_temp1-abgru = lst_vbak_vbap_vbpa-abgru.
    lst_change_subs_ord_temp1-zmeng = lst_vbak_vbap_vbpa-zmeng.
    lst_change_subs_ord_temp1-werks = lst_vbak_vbap_vbpa-werks.
    lst_change_subs_ord_temp1-waerk  = lst_vbak_vbap_vbpa-waerk.
    lst_change_subs_ord_temp1-zuonr  = lst_vbak_vbap_vbpa-zuonr.
*    READ TABLE li_vbpa INTO lst_vbpa WITH KEY vbeln = lst_vbak_vbap-vbeln
*                                              posnr = lst_vbak_vbap-posnr
*                                              BINARY SEARCH.
*    IF sy-subrc = 0.
    lst_change_subs_ord_temp1-parvw = lst_vbak_vbap_vbpa-parvw.
    lst_change_subs_ord_temp1-kunnr = lst_vbak_vbap_vbpa-kunnr.
*    ENDIF. " IF sy-subrc = 0

    READ TABLE li_vbkd INTO lst_vbkd WITH KEY vbeln = lst_vbak_vbap_vbpa-vbeln
                                              posnr = lst_vbak_vbap_vbpa-posnr
                                              BINARY SEARCH.
    IF sy-subrc = 0.
      lst_change_subs_ord_temp1-zlsch = lst_vbkd-zlsch.
      lst_change_subs_ord_temp1-kdkg3 = lst_vbkd-kdkg3.
      lst_change_subs_ord_temp1-kdkg4 = lst_vbkd-kdkg4.
      lst_change_subs_ord_temp1-kdkg5 = lst_vbkd-kdkg5.
      IF lst_vbak_vbap_vbpa-parvw = c_we.
        lst_change_subs_ord_temp1-kdkg2 = lst_vbkd-kdkg2."NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      ENDIF.
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
      lst_change_subs_ord_temp1-fkdat = lst_vbkd-fkdat.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_change_subs_ord_temp1-bsark = lst_vbkd-bsark.       " PO Type
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
      lst_change_subs_ord_temp1-zzconstart = lst_vbak_vbap_vbpa-zzconstart.
      lst_change_subs_ord_temp1-zzconend = lst_vbak_vbap_vbpa-zzconend.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *

    ENDIF. " IF sy-subrc = 0

    APPEND lst_change_subs_ord_temp1  TO li_change_subs_ord_temp1.
*    CLEAR : lst_change_subs_ord_temp1, lst_vbak_vbap_vbpa, lst_vbpa, lst_vbkd.
    CLEAR : lst_change_subs_ord_temp1, lst_vbak_vbap_vbpa, lst_vbkd.
  ENDLOOP. " LOOP AT li_vbak_vbap_vbpa INTO lst_vbak_vbap_vbpa

*  IF sy-subrc IS INITIAL.
  IF li_change_subs_ord_temp1 IS NOT INITIAL.

***BOC BY SAYANDAS on 31st AUG 2017 for ERP-4065
    SELECT vbeln,
           vposn,
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
           vlaufz,
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*           vlaufk,
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
           vbegdat,
           venddat " Contract end date
      INTO TABLE @DATA(li_veda)
      FROM veda    " Contract Data
      FOR ALL ENTRIES IN @li_change_subs_ord_temp1
      WHERE vbeln = @li_change_subs_ord_temp1-vbeln.

*    DATA : lst_change_subs_ord_temp1 LIKE LINE OF li_change_subs_ord_temp1.
*           lst_veda                  LIKE LINE OF li_veda.
    DATA : lst_veda                  LIKE LINE OF li_veda.

    LOOP AT li_change_subs_ord_temp1 INTO lst_change_subs_ord_temp1.
      MOVE-CORRESPONDING lst_change_subs_ord_temp1 TO lst_change_subs_ord_temp.

      IF lst_change_subs_ord_temp1-parvw EQ lc_ag.

        READ TABLE li_veda INTO lst_veda WITH KEY
        vbeln = lst_change_subs_ord_temp1-vbeln
        vposn = lc_posnr.

        IF sy-subrc = 0.

          lst_change_subs_ord_temp-guebg = lst_veda-vbegdat.
          lst_change_subs_ord_temp-gueen = lst_veda-venddat.
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
          lst_change_subs_ord_temp-vlaufz = lst_veda-vlaufz.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*          lst_change_subs_ord_temp-vlaufk = lst_veda-vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        ENDIF. " IF sy-subrc = 0

      ELSEIF lst_change_subs_ord_temp1-parvw EQ lc_we.

        READ TABLE li_veda INTO lst_veda WITH KEY
        vbeln = lst_change_subs_ord_temp1-vbeln
        vposn = lst_change_subs_ord_temp1-posnr.

        IF sy-subrc = 0.

          lst_change_subs_ord_temp-guebg = lst_veda-vbegdat.
          lst_change_subs_ord_temp-gueen = lst_veda-venddat.
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
          lst_change_subs_ord_temp-vlaufz = lst_veda-vlaufz.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*          lst_change_subs_ord_temp-vlaufk = lst_veda-vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
        ELSE. " ELSE -> IF sy-subrc = 0

          READ TABLE li_veda INTO lst_veda WITH KEY
          vbeln =  lst_change_subs_ord_temp1-vbeln
          vposn =  lc_posnr.
          IF sy-subrc = 0.
            lst_change_subs_ord_temp-guebg = lst_veda-vbegdat.
            lst_change_subs_ord_temp-gueen = lst_veda-venddat.
          ENDIF. " IF sy-subrc = 0
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
          lst_change_subs_ord_temp-vlaufz = lst_veda-vlaufz.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*          lst_change_subs_ord_temp-vlaufk = lst_veda-vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
        ENDIF. " IF sy-subrc = 0

      ENDIF. " IF lst_change_subs_ord_temp1-parvw EQ lc_ag
      APPEND lst_change_subs_ord_temp TO li_change_subs_ord_temp.
      CLEAR: lst_change_subs_ord_temp, lst_veda.
    ENDLOOP. " LOOP AT li_change_subs_ord_temp1 INTO lst_change_subs_ord_temp1

***EOC BY SAYANDAS on 31st AUG 2017 for ERP-4065

* BOC by PBANDLAPAL on 16-Feb-2018 for ERP-6665: ED2K910967
*    SORT li_change_subs_ord_temp BY   vbeln posnr kunnr parvw.
    SORT li_change_subs_ord_temp BY   vbeln posnr parvw kunnr.
* EOC by PBANDLAPAL on 16-Feb-2018 for ERP-6665: ED2K910967

    PERFORM f_move_to_alv USING    li_change_subs_ord_temp
                          CHANGING i_final.


  ENDIF. " IF li_change_subs_ord_temp1 IS NOT INITIAL

ENDFORM.
*&-----------------------------------*
*&      Form  GET_INVOICES
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_get_invoices .
  DATA     :lir_rfbsk TYPE tt_rfbsk.

  CONSTANTS:lc_field  TYPE dfies-fieldname     VALUE 'VBELN', " Field Name
            lc_selopt TYPE help_info-dynprofld VALUE 'S_DOC', " Field name
            lc_s      TYPE ddbool_d            VALUE 'S'.     " DD: truth value

* Populate the Range for rfbsk
  PERFORM f_pop_rfbsk CHANGING lir_rfbsk.

  CLEAR i_vbeln.
  IF s_date IS INITIAL.
    SELECT DISTINCT vbeln
                    FROM vbrk " Billing Document: Header Data
                    INTO TABLE i_vbeln
                    WHERE   rfbsk IN lir_rfbsk
                    AND     vbtyp = 'M' .
    IF sy-subrc IS INITIAL.
*       No actions
    ENDIF. " IF sy-subrc IS INITIAL
  ELSE. " ELSE -> IF s_date IS INITIAL
    SELECT DISTINCT vbeln
                    INTO TABLE i_vbeln
                    FROM vbrk " Sales Document: Header Data
                    WHERE ( rfbsk IN lir_rfbsk
                    AND     vbtyp = 'M'
                    AND     erdat IN s_date ).
    IF sy-subrc IS INITIAL.
*       No actions
    ENDIF. " IF sy-subrc IS INITIAL

  ENDIF. " IF s_date IS INITIAL
  IF i_vbeln IS NOT INITIAL.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = lc_field  "'VBELN'
        dynpprog        = sy-cprog
        dynpnr          = sy-dynnr
        dynprofield     = lc_selopt "'S_DOC'
        window_title    = text-046  "'Existing Invoices'
        value_org       = lc_s      "'S'
      TABLES
        value_tab       = i_vbeln
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF. " IF sy-subrc <> 0

    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF. " IF sy-subrc <> 0
    IF sy-subrc <> 0.
*      MESSAGE text-047 TYPE 'W'.
    ENDIF. " IF sy-subrc <> 0
  ELSE. " ELSE -> IF i_vbeln IS NOT INITIAL
*    MESSAGE text-047 TYPE 'W'.
  ENDIF. " IF i_vbeln IS NOT INITIAL
ENDFORM.
*&-----------------------------------*
*&      Form  GET_CREDIT_MEMO
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_get_credit_memo .
  CONSTANTS: lc_field  TYPE dfies-fieldname     VALUE 'VBELN', " Field Name
             lc_selopt TYPE help_info-dynprofld VALUE 'S_DOC', " Field name
             lc_s      TYPE ddbool_d            VALUE 'S'.     " DD: truth value
  CLEAR i_vbeln.
  IF s_inv IS INITIAL.
    SELECT DISTINCT vbeln
                    INTO TABLE i_vbeln
                    FROM vbak " Sales Document: Header Data
                    WHERE auart = c_cre
                    AND   vbeln <> ' '.
  ELSE. " ELSE -> IF s_inv IS INITIAL
    SELECT DISTINCT vbeln
                    INTO TABLE i_vbeln
                    FROM vbak " Sales Document: Header Data
                    WHERE auart = c_cre
                    AND erdat IN s_inv AND vbeln <> ' '.
  ENDIF. " IF s_inv IS INITIAL
  IF sy-subrc IS INITIAL.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = lc_field  "'VBELN'
        dynpprog        = sy-cprog
        dynpnr          = sy-dynnr
        dynprofield     = lc_selopt "'S_CMR'
        window_title    = text-048  "'Existing Credit Memo'
        value_org       = lc_s      "'S'
      TABLES
        value_tab       = i_vbeln
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF. " IF sy-subrc <> 0

    IF sy-subrc <> 0.
*      MESSAGE text-049 TYPE 'W'.
    ENDIF. " IF sy-subrc <> 0
  ELSE. " ELSE -> IF sy-subrc IS INITIAL
*    MESSAGE text-049 TYPE 'W'. "separate message throwing
  ENDIF. " IF sy-subrc IS INITIAL

ENDFORM.
*&-----------------------------------*
*&      Form  DISPLAY_CHANGE_SUBS_ORD
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_display_change_subs_ord .
  REFRESH i_fcat_out.

  DATA: lv_counter TYPE sycucol VALUE 1, " Counter of type Integers
        lv_auart   TYPE auart.           "NPOLINA 01/25/2019 ERP7822 : ED2K914311
  DATA: lv_grid_title TYPE lvc_title.    "NPALLA  09/01/2021 E101 OTCM-47267 : ED2K924398


  PERFORM f_buildcat USING:
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'IDENTIFIER' text-113    ,
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'CUSTOMER'  text-h01    , "item number
            lv_counter 'PARVW'     text-011    ,
            lv_counter 'KUNNR'     text-h02    ,
            lv_counter 'VKORG'     text-025    ,
            lv_counter 'VTWEG'     text-026    , "Dist. channel
            lv_counter 'SPART'     text-027    , "division
            lv_counter 'GUEBG'     text-015    , "Contract start date
            lv_counter 'GUEEN'     text-016    , "Contract end date
            lv_counter 'POSNR'     text-h03    , "Item NPOLINA ERP7763 ED2K914078
            lv_counter 'MATNR'     text-h04    ,
            lv_counter 'PLANT'     text-h10    , "Plant NPOLINA ERP7763 ED2K914078
            lv_counter 'VBELN'     text-h05    ,
            lv_counter 'PSTYV'     text-017    , "Item category
            lv_counter 'ZMENG'     text-014    , "target quantity
            lv_counter 'LIFSK'     text-020    , "delivery block
            lv_counter 'FAKSK'     text-021    , "billing block
            lv_counter 'ABGRU'     text-022    , "reason for rejection
            lv_counter 'AUART'     text-023    , "document type
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            lv_counter 'XBLNR'     text-060    ,
            lv_counter 'ZLSCH'     text-061    ,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            lv_counter 'BSARK'     text-058    , "PO Type
            lv_counter 'BSTNK'     text-024    , "purchase document number
            lv_counter 'STXH'      text-032    , "object name
            lv_counter 'KSCHL'     text-030    , "pricing condition
            lv_counter 'KBETR'     text-031    , "pricing
            lv_counter 'IHREZ'     text-h06    ,
            lv_counter 'ZZPROMO'   text-028    , "promo code
* BOC by PBANDLAPAL on 16-Feb-2018 for ERP-6665: ED2K910967
*            lv_counter 'KVGR4'     text-012    , "Customer group
*            lv_counter 'KVGR5'     text-012    , "Customer group
            lv_counter 'KDKG4'     text-012    , "Customer group
            lv_counter 'KDKG5'     text-012    , "Customer group
* EOC by PBANDLAPAL on 16-Feb-2018 for ERP-6665: ED2K910967
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            lv_counter 'KDKG3'     text-012    ,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
            lv_counter  'SRID'     text-062,
            lv_counter 'VKBUR'      text-063,
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
            lv_counter 'FKDAT'    text-064,
            lv_counter 'WAERK'    text-065,
            lv_counter 'ZUONR'    text-066,
            lv_counter 'INV_TEXT' text-039.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
* SOC by NPOLINA 04/23/2019 ERP7822 :  ED2K914956
*  IF rb_modi IS NOT INITIAL .
*    CLEAR:st_final_x.
*    READ TABLE i_final INTO st_final_x INDEX 1.
*    IF sy-subrc EQ 0 AND st_final_x-auart = c_zsbp.
*      lv_auart = c_zsbp.          " This is used to check in below loop for ERP7822
* EOC by NPOLINA 04/23/2019 ERP7822 :  ED2K914956
  PERFORM f_buildcat USING:
      lv_counter 'VAKTSCH' text-041,
      lv_counter 'VASDA'   text-043,
      lv_counter 'PERIO'   text-045,
      lv_counter 'AUTTE'   text-047,
      lv_counter 'PERAF'   text-052.

  PERFORM f_buildcat USING:  lv_counter 'AUGRU' text-t01.  "NPOLINA DM1913 01/July/2019 ED2K915483
  PERFORM f_buildcat USING:  lv_counter 'KDKG2' text-056.  "NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
  PERFORM f_buildcat USING:  lv_counter 'ZZCONSTART' text-095.
  PERFORM f_buildcat USING:  lv_counter 'ZZCONEND' text-096.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*  PERFORM f_buildcat USING:  lv_counter 'VLAUFK' text-107.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
*  PERFORM f_buildcat USING:  lv_counter 'VLAUFZ' text-108.
  PERFORM f_buildcat USING:  lv_counter 'VLAUFZ' text-111.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_buildcat USING:  lv_counter 'ZLOGNO' text-115.
  PERFORM f_buildcat USING:  lv_counter 'LOG_HANDLE' text-116.
*  PERFORM f_buildcat USING:  lv_counter 'ZOID' text-117.
  PERFORM f_buildcat USING:  lv_counter 'ICON' text-120.
  PERFORM f_buildcat USING:  lv_counter 'MSGTY' text-118.
  PERFORM f_buildcat USING:  lv_counter 'MSGV1' text-119.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  CLEAR:st_final_x.
*    ENDIF.                          "NPOLINA 04/23/2019 ERP7822 :  ED2K914956
*  ENDIF.                             NPOLINA 04/23/2019 ERP7822 :  ED2K914956
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

* fill up the ALV table
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* Fill ALV the first time,
* Do Not update the Second Time as ALV Output table has Log Details.
IF i_output_x IS INITIAL.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  LOOP AT i_final INTO st_final_x.
    CLEAR: st_output_x.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    st_output_x-identifier = st_final_x-identifier. " Identifier
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    st_output_x-customer = st_final_x-customer. " Customer Number
    st_output_x-parvw    = st_final_x-parvw. " Partner Function
    st_output_x-kunnr    = st_final_x-kunnr. " Customer Number
    st_output_x-vkorg    = st_final_x-vkorg. "sales org. SAP mandatory
    st_output_x-vtweg    = st_final_x-vtweg. "dist. channel SAP mandatory
    st_output_x-spart    = st_final_x-spart. "division SAP mandatory
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
    st_output_x-vkbur    = st_final_x-vkbur.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* SOC by NPOLINA DM1913(E209)
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = st_output_x-vkbur
      IMPORTING
        output = st_output_x-vkbur.
* EOC by NPOLINA DM1913(E209)
* Begin of comment by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
*    WRITE st_final_x-guebg  TO st_output_x-guebg.
*    WRITE st_final_x-gueen  TO st_output_x-gueen.
* End of comment by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
* Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
    st_output_x-guebg    = st_final_x-guebg.
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
*    st_output_x-gueen    = st_output_x-gueen.
    st_output_x-gueen    = st_final_x-gueen.
* END of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
* End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
    st_output_x-posnr    = st_final_x-posnr. "Item number
    st_output_x-matnr    = st_final_x-matnr. "Material
    st_output_x-plant    = st_final_x-plant. "Plant
    st_output_x-vbeln    = st_final_x-vbeln. "Sales and Distribution Document Number
    st_output_x-pstyv    = st_final_x-pstyv. "item category SAP mandatory
    st_output_x-zmeng    = st_final_x-zmeng. "target quantity
    st_output_x-lifsk    = st_final_x-lifsk. "delivery block Wiley mandatory
    st_output_x-faksk    = st_final_x-faksk. "billing block Wiley mandatory
    st_output_x-abgru    = st_final_x-abgru. "reason for rejection
    st_output_x-auart    = st_final_x-auart. "Sales Document Type
    st_output_x-bsark    = st_final_x-bsark. "PO Type

* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
    IF lv_auart IS INITIAL.
      lv_auart = st_output_x-auart.
    ENDIF.
    IF lv_auart EQ c_zofl.
      st_output_x-kdkg2 = st_final_x-kdkg2.
    ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* SOC by NPOLINA DM1913(E209)
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = st_output_x-bsark
      IMPORTING
        output = st_output_x-bsark.
* EOC by NPOLINA DM1913(E209)

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
    st_output_x-xblnr    = st_final_x-xblnr.
    st_output_x-zlsch    = st_final_x-zlsch.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
    st_output_x-bstnk    = st_final_x-bstnk. "purchase order number Wiley mandatory
    st_output_x-stxh     = st_final_x-stxh. "Stxh of type CHAR200
    st_output_x-kschl    = st_final_x-kschl. "pricing condition value Wiley mandatory
    st_output_x-kbetr    = st_final_x-kbetr. "pricing Wiley mandatory
    st_output_x-ihrez    = st_final_x-ihrez. "Your Reference
    st_output_x-zzpromo  = st_final_x-zzpromo. "Promo code
    st_output_x-kdkg4    = st_final_x-kdkg4. " Customer condition group 4
    st_output_x-kdkg5    = st_final_x-kdkg5. " Customer condition group 5
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
    st_output_x-kdkg3    = st_final_x-kdkg3. " Customer condition group 5
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
    st_output_x-srid =  st_final_x-srid.
    st_output_x-vkbur = st_final_x-vkbur.

* SOC by NPOLINA DM1913(E209) ED2K915483
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = st_output_x-vkbur
      IMPORTING
        output = st_output_x-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
    st_output_x-fkdat = st_final_x-fkdat.
    st_output_x-waerk = st_final_x-waerk.
    st_output_x-zuonr = st_final_x-zuonr.
    st_output_x-inv_text = st_final_x-inv_text.
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
    IF rb_modi IS NOT INITIAL AND lv_auart = c_zsbp.
      st_output_x-vaktsch = st_final_x-vaktsch.

      IF st_output_x-vaktsch IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = st_output_x-vaktsch
          IMPORTING
            output = st_output_x-vaktsch.
      ENDIF.

      WRITE st_final_x-vasda TO st_output_x-vasda .
      st_output_x-perio = st_final_x-perio.
      st_output_x-autte = st_final_x-autte.
      st_output_x-peraf = st_final_x-peraf.
    ENDIF.
    IF rb_modi IS NOT INITIAL.
      st_output_x-augru = st_final_x-augru.
    ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

* Begin of comment by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*    WRITE st_final_x-zzconstart  TO st_output_x-zzconstart.
*    WRITE st_final_x-zzconend  TO st_output_x-zzconend.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
* End of comment by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
* Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
    st_output_x-zzconstart = st_final_x-zzconstart.
    st_output_x-zzconend   = st_final_x-zzconend.
* End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133

*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*    st_output_x-vlaufk  = st_final_x-vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
    st_output_x-vlaufz = st_final_x-vlaufz.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    st_output_x-zlogno     = st_final_x-zlogno.     "Application log: log number
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = st_output_x-zlogno
      IMPORTING
        output = st_output_x-zlogno.
    st_output_x-log_handle = st_final_x-log_handle. "Application Log: Log Handle
    st_output_x-zoid       = st_final_x-zoid.       "Order Identifier in Upload File
    st_output_x-msgty      = st_final_x-msgty.      "Message Type
    st_output_x-msgv1      = st_final_x-msgv1.      "Message Detials
    PERFORM f_get_icon USING st_output_x-msgty
                       CHANGING st_output_x-icon.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

    APPEND st_output_x TO i_output_x.
    CLEAR st_output_x.
  ENDLOOP. " LOOP AT i_final INTO st_final_x
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
ELSE. "IF i_output_x IS INITIAL.
  LOOP AT i_output_x ASSIGNING FIELD-SYMBOL(<lfs_output_x>).
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <lfs_output_x>-zlogno
      IMPORTING
        output = <lfs_output_x>-zlogno.
     "Populat Icon
     PERFORM f_get_icon USING <lfs_output_x>-msgty
                        CHANGING <lfs_output_x>-icon.
  ENDLOOP.
ENDIF. "IF i_output_x IS INITIAL.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  IF    i_output_x[] IS NOT INITIAL
    AND i_fcat_out IS NOT INITIAL.
    st_layout-box_fieldname = 'SEL'.
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
    IF lv_auart NE c_zofl.
      READ TABLE i_fcat_out ASSIGNING FIELD-SYMBOL(<lfs_fcat>) WITH KEY fieldname = c_kdkg2.
      IF sy-subrc EQ 0.
        CLEAR  :<lfs_fcat>-edit.
      ENDIF.
    ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    IF v_oid IS NOT INITIAL.
      CONCATENATE 'Orders Only Upload ID'(T00) c_hyphen v_oid INTO lv_grid_title SEPARATED BY space.
    ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program       = sy-repid
        i_callback_pf_status_set = 'F_SET_PF_STATUS'
        i_callback_user_command  = 'F_USER_COMMAND'
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        i_grid_title             = lv_grid_title
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        is_layout                = st_layout
        it_fieldcat              = i_fcat_out
      TABLES
        t_outtab                 = i_output_x
      EXCEPTIONS
        program_error            = 1
        OTHERS                   = 2.
    IF sy-subrc <> 0.

      MESSAGE e000 WITH text-034.

    ENDIF. " IF sy-subrc <> 0

  ENDIF. " IF i_output_x[] IS NOT INITIAL
* SOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
  IF i_output_x[] IS INITIAL .
    MESSAGE s000 WITH text-055 DISPLAY LIKE  'E'.
  ENDIF.
* EOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
ENDFORM.
*&-----------------------------------*
*&      Form  f_pop_credit_memo_final
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_pop_credit_memo_final USING    fp_ind TYPE auart " Sales Document Type
                             CHANGING fp_final_crdt TYPE tt_crdt_memo_enh.
  DATA : lc_posnr      TYPE posnr  VALUE '000000'. " Item number of the SD document

  DATA : lst_cred_memo TYPE ty_cred_memo.

  IF fp_ind EQ c_inv.

    SELECT a~vbeln, " Billing Document
           a~erdat,
           a~vkorg, " Sales Organization
           a~vtweg, " Distribution Channel
           a~spart, " Division
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
           a~zlsch,
           a~xblnr,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
           b~posnr, " Sales Document Item
           b~matnr, " Material Number
           b~fkimg,
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
           b~pstyv,
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
           b~pospa,
*** EOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
           c~parvw, " Partner Function
           c~kunnr  " Customer Number
           INTO TABLE @i_vbrk
           FROM vbrk AS a
*           LEFT OUTER JOIN vbrp AS b
           INNER JOIN vbrp AS b
           ON   (  a~vbeln EQ b~vbeln )
*           LEFT OUTER JOIN vbpa AS c
           INNER JOIN vbpa AS c
           ON   ( a~vbeln  EQ c~vbeln
           AND  ( b~posnr EQ c~posnr OR c~posnr EQ @lc_posnr ) )
           WHERE  a~vbeln IN @s_doc
           AND    a~erdat IN @s_invo
           AND    c~parvw IN @i_vbpa.
    IF sy-subrc IS INITIAL.
*       No Actions
    ENDIF. " IF sy-subrc IS INITIAL

  ELSE. " ELSE -> IF fp_ind EQ c_inv

*    SELECT a~vbeln,
*           a~auart,
*           a~augru,
*           a~vkorg,
*           a~vtweg,
*           a~spart,
**   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*           a~vkbur,
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*           a~bstnk,
*           a~vgbel,
*           a~ihrez,
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           a~xblnr,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           a~zzpromo,
*           b~posnr,
*           b~matnr,
*           b~zmeng, " Target quantity in sales units
*           c~parvw, " Partner Function
*           c~kunnr, " Customer Number
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*          d~zlsch,
*          d~kdkg3,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
** BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*          d~bstkd,
*          d~bsark,
** EOC by SAYANDAS on 07-Aug-2017 for ERP-3687
**** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
*           b~pstyv
**** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
*          INTO TABLE @i_cred_memo
*          FROM vbak AS a
**          LEFT OUTER JOIN vbap AS b
*          INNER JOIN vbap AS b
*          ON ( a~vbeln EQ b~vbeln )
**          LEFT OUTER JOIN vbpa AS c
*          INNER JOIN vbpa AS c
*          ON ( a~vbeln EQ c~vbeln
*          AND ( b~posnr = c~posnr
*             OR c~posnr = @lc_posnr ) )
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
**          LEFT OUTER JOIN vbkd AS d
*          INNER JOIN vbkd AS d
*          ON ( a~vbeln EQ d~vbeln
*          AND ( b~posnr = d~posnr
*             OR d~posnr = @lc_posnr ) )
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*          WHERE   a~erdat   IN @s_inv
**** BOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
**          AND     a~auart   EQ @fp_ind
*           AND     a~auart   IN @i_cmauart
**** EOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
*          AND     a~vbeln   IN @s_cmr
*          AND     a~bstnk   IN @s_bstnk
*          AND     a~zzpromo IN @s_promo
*          AND     b~matnr   IN @s_matnr
*          AND     a~ernam   IN @s_crd_by.

*-----------------------------------------------------------
    SELECT a~vbeln,
           a~auart,
           a~augru,
           a~vkorg,
           a~vtweg,
           a~spart,
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
           a~vkbur,
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
           a~bstnk,
           a~vgbel,
           a~ihrez,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
           a~xblnr,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
           a~zzpromo,
           b~posnr,
           b~matnr,
           b~pstyv,
           b~zmeng, " Target quantity in sales units
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
           c~posnr AS line_num,
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
           c~parvw, " Partner Function
           c~kunnr  " Customer Number
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*          d~zlsch,
*          d~kdkg3,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*          d~bstkd,
*          d~bsark,
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
*           b~pstyv
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
          INTO TABLE @DATA(li_cred_memo_temp)
          FROM vbak AS a
*          LEFT OUTER JOIN vbap AS b
          INNER JOIN vbap AS b
          ON ( a~vbeln EQ b~vbeln )
*          LEFT OUTER JOIN vbpa AS c
          INNER JOIN vbpa AS c
          ON ( b~vbeln EQ c~vbeln
          AND ( b~posnr = c~posnr
             OR c~posnr = @lc_posnr ) )
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
**          LEFT OUTER JOIN vbkd AS d
*          INNER JOIN vbkd AS d
*          ON ( a~vbeln EQ d~vbeln
*          AND ( b~posnr = d~posnr
*             OR d~posnr = @lc_posnr ) )
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
          WHERE   a~erdat   IN @s_inv
*** BOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
*          AND     a~auart   EQ @fp_ind
           AND     a~auart   IN @i_cmauart
*** EOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
          AND     a~vbeln   IN @s_cmr
          AND     a~bstnk   IN @s_bstnk
          AND     a~zzpromo IN @s_promo
          AND     b~matnr   IN @s_matnr
          AND     a~ernam   IN @s_crd_by.
*------------------------------------------------------------------
    IF sy-subrc IS INITIAL AND li_cred_memo_temp IS NOT INITIAL.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
      SORT li_cred_memo_temp BY vbeln posnr parvw line_num.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
*       No Actions
      SELECT vbeln,
             posnr,
             zlsch,
             bstkd,
             bsark,
             kdkg3 " Customer condition group 3
        INTO TABLE @DATA(li_vbkd)
        FROM vbkd  " Sales Document: Business Data
        FOR ALL ENTRIES IN @li_cred_memo_temp
        WHERE vbeln = @li_cred_memo_temp-vbeln
        AND  ( posnr = @li_cred_memo_temp-posnr
           OR  posnr = @lc_posnr ).
      IF sy-subrc = 0.
        SORT li_vbkd BY vbeln posnr.
      ENDIF. " IF sy-subrc = 0

      DATA : lst_cred_memo_temp LIKE LINE OF li_cred_memo_temp,
             lst_vbkd           LIKE LINE OF li_vbkd.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
      DATA(li_cred_memo_temp_copy) = li_cred_memo_temp.
      DATA: lst_cred_memo_temp_copy LIKE LINE OF li_cred_memo_temp.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157

      LOOP AT li_cred_memo_temp INTO lst_cred_memo_temp.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
        IF lst_cred_memo_temp-parvw = c_we.
          DATA(lv_tabix) = sy-tabix.
          lv_tabix = lv_tabix + 1.
          READ TABLE li_cred_memo_temp_copy INTO lst_cred_memo_temp_copy INDEX lv_tabix.
          IF sy-subrc = 0.
            IF ( lst_cred_memo_temp-vbeln = lst_cred_memo_temp_copy-vbeln )
            AND ( lst_cred_memo_temp-posnr = lst_cred_memo_temp_copy-posnr )
            AND ( lst_cred_memo_temp-parvw = lst_cred_memo_temp_copy-parvw )
            AND ( lst_cred_memo_temp-line_num NE lst_cred_memo_temp_copy-line_num )
            AND  lst_cred_memo_temp_copy-line_num NE lc_posnr.
              CONTINUE.
            ENDIF. " IF ( lst_cred_memo_temp-vbeln = lst_cred_memo_temp_copy-vbeln )
          ENDIF. " IF sy-subrc = 0
        ENDIF. " IF lst_cred_memo_temp-parvw = c_we
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
        lst_cred_memo-vbeln = lst_cred_memo_temp-vbeln.
        lst_cred_memo-auart = lst_cred_memo_temp-auart.
        lst_cred_memo-augru = lst_cred_memo_temp-augru.
        lst_cred_memo-vkorg = lst_cred_memo_temp-vkorg.
        lst_cred_memo-vtweg = lst_cred_memo_temp-vtweg.
        lst_cred_memo-spart = lst_cred_memo_temp-spart.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        lst_cred_memo-vkbur = lst_cred_memo_temp-vkbur.

* SOC by NPOLINA DM1913(E209) ED2K915483
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_cred_memo-vkbur
          IMPORTING
            output = lst_cred_memo-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        lst_cred_memo-bstnk = lst_cred_memo_temp-bstnk.
        lst_cred_memo-vgbel = lst_cred_memo_temp-vgbel.
        lst_cred_memo-ihrez = lst_cred_memo_temp-ihrez.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_cred_memo-xblnr = lst_cred_memo_temp-xblnr.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_cred_memo-zzpromo = lst_cred_memo_temp-zzpromo.
        lst_cred_memo-posnr = lst_cred_memo_temp-posnr.
        lst_cred_memo-matnr = lst_cred_memo_temp-matnr.
        lst_cred_memo-pstyv = lst_cred_memo_temp-pstyv.
        lst_cred_memo-zmeng = lst_cred_memo_temp-zmeng. " Target quantity in sales units
        lst_cred_memo-parvw = lst_cred_memo_temp-parvw. " Partner Function
        lst_cred_memo-kunnr = lst_cred_memo_temp-kunnr. " Customer Number

        READ TABLE  li_vbkd INTO lst_vbkd WITH KEY vbeln = lst_cred_memo_temp-vbeln
                                                   posnr = lst_cred_memo_temp-posnr
                                                   BINARY SEARCH.
        IF sy-subrc = 0.

          lst_cred_memo-zlsch = lst_vbkd-zlsch.
          lst_cred_memo-bstkd = lst_vbkd-bstkd.
          lst_cred_memo-bsark = lst_vbkd-bsark.
          lst_cred_memo-kdkg3 = lst_vbkd-kdkg3.

        ENDIF. " IF sy-subrc = 0

        APPEND lst_cred_memo TO i_cred_memo.
        CLEAR : lst_cred_memo, lst_cred_memo_temp, lst_vbkd.
      ENDLOOP. " LOOP AT li_cred_memo_temp INTO lst_cred_memo_temp
    ENDIF. " IF sy-subrc IS INITIAL AND li_cred_memo_temp IS NOT INITIAL

  ENDIF. " IF fp_ind EQ c_inv

  IF fp_ind EQ c_inv.
*    SORT i_vbrk BY vbeln parvw.
    SORT i_vbrk BY vbeln posnr kunnr parvw.
    PERFORM f_move_inv_to_final_alv USING i_vbrk
                                    CHANGING
                                          fp_final_crdt.
  ELSE. " ELSE -> IF fp_ind EQ c_inv

*** BOC BY SAYANDAS on 16-NOV-2017 for CMCG
*    SORT i_cred_memo    BY vbeln
*                           parvw. " Commented BY SAYANADS

*    SORT i_cred_memo    BY vbeln posnr kunnr parvw.
    SORT i_cred_memo    BY vbeln posnr parvw kunnr.

*** EOC BY SAYANDAS on 16-NOV-2017 for CMCG

    PERFORM f_merge_into_final_alv USING i_cred_memo
                               CHANGING  fp_final_crdt.
  ENDIF. " IF fp_ind EQ c_inv

ENDFORM.
*&-----------------------------------*
*&      Form  F_DISPLAY_CREATE_CRED_MEMO
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_display_create_cred_memo USING fp_ind TYPE auart. " Sales Document Type
  REFRESH i_fcat_out.
  DATA: lv_counter TYPE sycucol VALUE 1. " Counter of type Integers

  IF fp_ind EQ c_inv.
    PERFORM f_buildcat USING:lv_counter 'CUSTOMER'  text-009,
                             lv_counter 'PARVW'     text-011,
                             lv_counter 'PARTNER'   text-050,
                             lv_counter 'VKORG'     text-025,
                             lv_counter 'VTWEG'     text-026,
                             lv_counter 'SPART'     text-027,
                             lv_counter 'AUART'     text-023,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                             lv_counter 'XBLNR'     text-060,
                             lv_counter 'ZLSCH'     text-061,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                             lv_counter 'AUGRU'     text-051,
                             lv_counter 'VBELN'     text-053,
                             lv_counter 'POSNR'     text-006,
                             lv_counter 'MATNR'     text-007,
                             lv_counter 'PLANT'     text-h10,            "  NPOLINA ERP7763 ED2K913722
                             lv_counter 'FKIMG'     text-014,
*** BOC BY SAYANDAS on 29-Nov-2017 for text issue
                             lv_counter 'STXH'      text-032,
*** EOC BY SAYANDAS on 29-Nov-2017 for text issue
                             lv_counter 'KSCHL'     text-030,
                             lv_counter 'KBETR'     text-031,
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* Adding new columns in ALV output
                             lv_counter 'KSCHL2'     text-030,
                             lv_counter 'KBETR2'     text-031,
                             lv_counter 'KSCHL3'     text-030,
                             lv_counter 'KBETR3'     text-031,
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
                             lv_counter 'IHREZ'     text-054,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                             lv_counter 'KDKG3'     text-012,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*                             lv_counter 'SRID'     text-062,
                             lv_counter 'VKBUR'     text-063,
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
                             lv_counter 'BSTNK'     text-024    , "purchase document number
                             lv_counter 'BSARK'     text-058    , "PO Type
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
                             lv_counter 'PSTYV'     text-017.
*** EOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
  ELSEIF fp_ind EQ c_cre.
    PERFORM f_buildcat USING:lv_counter 'CUSTOMER'  text-009,
                          lv_counter 'PARVW'     text-011,
                          lv_counter 'PARTNER'   text-050,
                          lv_counter 'VKORG'     text-025,
                          lv_counter 'VTWEG'     text-026,
                          lv_counter 'SPART'     text-027,
                          lv_counter 'AUART'     text-023,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                          lv_counter 'XBLNR'     text-060,
                          lv_counter 'ZLSCH'     text-061,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                          lv_counter 'AUGRU'     text-051,
                          lv_counter 'VBELN'     text-057,
                          lv_counter 'POSNR'     text-006,
                          lv_counter 'MATNR'     text-007,
                          lv_counter 'PLANT'     text-h10,            "  NPOLINA ERP7763 ED2K913722
                          lv_counter 'FKIMG'     text-014,
*** BOC BY SAYANDAS on 29-Nov-2017 for text issue
                          lv_counter 'STXH'      text-032,
*** EOC BY SAYANDAS on 29-Nov-2017 for text issue
                          lv_counter 'KSCHL'     text-030,
                          lv_counter 'KBETR'     text-031,
                          lv_counter 'IHREZ'     text-054,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                          lv_counter 'KDKG3'     text-012,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*                             lv_counter 'SRID'     text-062,
                             lv_counter 'VKBUR'     text-063,
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
                             lv_counter 'BSTNK'     text-024    , "purchase document number
                             lv_counter 'BSARK'     text-058    , "PO Type
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
                             lv_counter 'PSTYV'     text-017.
*** EOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition

*SOC by NPOLINA ERP7763  ED2K914078
  ELSEIF fp_ind EQ c_zscr .
    PERFORM f_buildcat USING:lv_counter 'CUSTOMER'  text-009,
                                 lv_counter 'PARVW'     text-011,
                                 lv_counter 'PARTNER'   text-050,
                                 lv_counter 'VKORG'     text-025,
                                 lv_counter 'VTWEG'     text-026,
                                 lv_counter 'SPART'     text-027,
                                 lv_counter 'AUART'     text-023,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                                 lv_counter 'XBLNR'     text-060,
                                 lv_counter 'ZLSCH'     text-061,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                                 lv_counter 'AUGRU'     text-051,
                                 lv_counter 'VBELN'     text-038,
                                 lv_counter 'POSNR'     text-006,
                                 lv_counter 'MATNR'     text-007,
                                 lv_counter 'PLANT'     text-h10,            "  NPOLINA ERP7763 ED2K913722
                                 lv_counter 'FKIMG'     text-014,
*** BOC BY SAYANDAS on 29-Nov-2017 for text issue
                                 lv_counter 'STXH'      text-032,
*** EOC BY SAYANDAS on 29-Nov-2017 for text issue
                                 lv_counter 'KSCHL'     text-030,
                                 lv_counter 'KBETR'     text-031,
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* Adding new columns in ALV output
                                 lv_counter 'KSCHL2'     text-030,
                                 lv_counter 'KBETR2'     text-031,
                                 lv_counter 'KSCHL3'     text-030,
                                 lv_counter 'KBETR3'     text-031,
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
                                 lv_counter 'IHREZ'     text-054,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
                                 lv_counter 'KDKG3'     text-012,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*                             lv_counter 'SRID'     text-062,
                                 lv_counter 'VKBUR'     text-063,
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
                                 lv_counter 'BSTNK'     text-024    , "purchase document number
                                 lv_counter 'BSARK'     text-058    , "PO Type
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
                                 lv_counter 'PSTYV'     text-017,
                                 lv_counter 'TAX'       text-040.
*** EOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition

* EOC by NPOLINA ERP7763  ED2K914078

  ENDIF. " IF fp_ind EQ c_inv

  st_layout-box_fieldname = 'SEL'.
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* Display ALV output with new columns during creation
  IF i_final_crme_crt IS NOT INITIAL.
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program       = sy-repid
        i_callback_pf_status_set = 'F_SET_PF_STATUS'
        i_callback_user_command  = 'F_USER_COMMAND'
        is_layout                = st_layout
        it_fieldcat              = i_fcat_out
      TABLES
        t_outtab                 = i_final_crme_crt
      EXCEPTIONS
        program_error            = 1
        OTHERS                   = 2.
    IF sy-subrc <> 0.
      MESSAGE e000 WITH text-036.
    ENDIF. " IF sy-subrc <> 0

  ELSE. " ELSE -> IF i_final_crme_crt IS NOT INITIAL
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
    IF i_final_crdt IS NOT INITIAL.
      CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
        EXPORTING
          i_callback_program       = sy-repid
          i_callback_pf_status_set = 'F_SET_PF_STATUS'
          i_callback_user_command  = 'F_USER_COMMAND'
          is_layout                = st_layout
          it_fieldcat              = i_fcat_out
        TABLES
          t_outtab                 = i_final_crdt
        EXCEPTIONS
          program_error            = 1
          OTHERS                   = 2.
      IF sy-subrc <> 0.
        MESSAGE e000 WITH text-036.
      ENDIF. " IF sy-subrc <> 0
    ENDIF. " IF i_final_crdt IS NOT INITIAL
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
  ENDIF. " IF i_final_crme_crt IS NOT INITIAL
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* SOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
  IF i_final_crdt IS INITIAL AND i_final_crme_crt IS  INITIAL.
    MESSAGE s000 WITH text-055 DISPLAY LIKE  'E'.
  ENDIF.
* EOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
ENDFORM.
*&-----------------------------------*
*&      Form  F_CHANGE_SUBSCRIPTION
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_CHANGE_SUBS_ORD  text
*-----------------------------------*
FORM f_change_subscription.

  TYPES:
    BEGIN OF lty_cond_class,
      kappl TYPE kappl,  " Application
      kschl TYPE kscha,  " Condition Type
      krech TYPE krech,  " Condition Class
    END OF lty_cond_class,

    BEGIN OF lty_konv,
      knumv	TYPE knumv,	                                                                                                                                                                                                     " Number of the document condition
      kposn	TYPE kposn,  " Condition item number
      stunr	TYPE stunr,  " Step number
      zaehk	TYPE dzaehk, " Condition counter
      kschl	TYPE kscha,	                                                                                                                                                                                                                       " Condition type
*** BOC BY SAYANDAS on 22-Dec-2017
      kbetr TYPE kbetr, " Rate (condition amount or percentage)
*** EOC BY SAYANDAS on 22-Dec-2017
      vbeln TYPE vbeln, " Sales Doc Number
    END OF lty_konv.

**=======================================================
**   Table Type
**=======================================================
*TYPES: tt_output_chg TYPE STANDARD TABLE OF ty_output_x_chg.

*====================================================================*
*       Local Internal Table
*====================================================================*
  DATA: li_return             TYPE STANDARD TABLE OF bapiret2,   " Return messages
        li_contract_itm       TYPE STANDARD TABLE OF bapisditm,  " Item data
        li_contract_items_inx TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
        li_partner            TYPE STANDARD TABLE OF bapiparnrc, " Partner
        li_contract_cond      TYPE STANDARD TABLE OF bapicond,   " Contract conditions
        li_contract_condx     TYPE STANDARD TABLE OF bapicondx,  " Communication Fields for Maintaining Conditions in the Order
        li_contract_data      TYPE STANDARD TABLE OF bapictr     " Communciation Fields: SD Contract Data
        INITIAL SIZE 0,
        li_cond_class         TYPE STANDARD TABLE OF lty_cond_class
        INITIAL SIZE 0,                                          " Contract Data
        li_extensionin        TYPE STANDARD TABLE OF bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_konv               TYPE STANDARD TABLE OF lty_konv
        INITIAL SIZE 0,
        li_contract_data_inx  TYPE STANDARD TABLE OF bapictrx    " Communication fields: SD Contract Data Checkbox
        INITIAL SIZE 0,
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
        li_text               TYPE STANDARD TABLE OF bapisdtext, " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_final_change_subs  TYPE tt_output_x_chg,
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
*====================================================================*
*       Local Work-area
*====================================================================*
        lst_bape_vbak         TYPE bape_vbak,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbap         TYPE bape_vbap,  " BAPI Interface for Customer Enhancements to Table VBAP
        lst_bape_vbapx        TYPE bape_vbapx, " BAPI Interface for Customer Enhancements to Table VBAPX
        lst_bape_vbakx        TYPE bape_vbakx, " BAPI Interface for Customer Enhancements to Table VBAKX
        lst_extensionin       TYPE bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        lst_contract_hdrin    TYPE bapisdh1,   " Header data
        lst_contract_hrdinx   TYPE bapisdh1x,  " Header data extended for promo code
        lst_contract_itm      TYPE bapisditm,  " Item data
        lst_contract_itmx     TYPE bapisditmx, " Item data
        lst_contract_cond     TYPE bapicond,   " Contract conditions
        lst_partner           TYPE bapiparnrc, " Partner
        lst_output_dummy      TYPE ty_output_x_chg,
        lst_return            TYPE bapiret2,   " For status of contract creation
        lst_contract_data     TYPE bapictr,    " Contract Data
        lst_contract_data_inx TYPE bapictrx,   " Communication fields: SD Contract Data Checkbox
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
        lst_text              TYPE bapisdtext, " Communication fields: SD texts
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
*====================================================================*
*       Local Variable
*====================================================================*
        lv_salesdocin         TYPE bapivbeln-vbeln, "for export fieldop
        lv_auart_chg          TYPE auart. "NPOLINA ERPM4543 23/Oct/2019 ED2K916556

*====================================================================*
*       Local Constants
*====================================================================*
  CONSTANTS:lc_posnr      TYPE posnr  VALUE '000000',     " Item number of the SD document
            lc_bape_vbap  TYPE char9  VALUE 'BAPE_VBAP',  " Bape_vbak of type CHAR9
            lc_bape_vbapx TYPE char10 VALUE 'BAPE_VBAPX', " Bape_vbak of type CHAR9
            lc_bape_vbak  TYPE char9  VALUE 'BAPE_VBAK',  " Bape_vbak of type CHAR9
            lc_bape_vbakx TYPE char10 VALUE 'BAPE_VBAKX', " Bape_vbak of type CHAR9
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
            lc_date_special TYPE string VALUE '/.-'.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826

* First arrange the data in bapi compatible form
  SORT i_output_x BY vbeln
                     posnr.

* This FM will get the reference of the changed data in ref_grid
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA(li_output_x) = i_output_x.
  DATA : lv_waerk TYPE waerk,
         lv_kbetr TYPE kbetr.
  SORT li_output_x BY posnr ASCENDING.
  LOOP AT li_output_x ASSIGNING FIELD-SYMBOL(<lst_output>).
    IF sy-tabix EQ 1.
      lv_waerk = <lst_output>-waerk.
    ENDIF.
    CLEAR : lv_kbetr.
    lv_kbetr = <lst_output>-kbetr.
    PERFORM f_curr_conv_to_intrnl USING <lst_output>-customer " ED2K921132
                                        <lst_output>-parvw
                                        <lst_output>-vkorg
                                        <lst_output>-vtweg
                                        <lst_output>-spart
                                        <lst_output>-vbeln
                                  CHANGING lv_waerk
                                           lv_kbetr.
    <lst_output>-kbetr = lv_kbetr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*   Convert Log Number to Internal Format
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <lst_output>-zlogno
      IMPORTING
        output = <lst_output>-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDLOOP.
  FREE : lv_waerk, lv_kbetr.

* First arrange the data in bapi compatible form
  SORT li_output_x BY vbeln
                     posnr.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341

* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected

  PERFORM f_deselect_lines CHANGING li_output_x.

  DATA(li_change_subs) = li_output_x.
  li_change_subs  = li_output_x.
  DELETE li_change_subs WHERE sel NE abap_true.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_update_log_2c CHANGING li_change_subs
                                   i_output_x.
* Update Logs to Staging Table
  IF i_e101_stage[] IS NOT INITIAL.
    MODIFY ze225_staging FROM TABLE i_e101_stage.
  ELSE.
    IF li_change_subs[] IS NOT INITIAL.
      SELECT * FROM ze225_staging INTO TABLE i_e101_stage
        FOR ALL ENTRIES IN li_change_subs
        WHERE zuid_upld EQ li_change_subs-zoid
          AND zoid      EQ li_change_subs-identifier
          AND zlogno    EQ li_change_subs-zlogno.
      IF sy-subrc EQ 0.
        SORT i_e101_stage.
      ENDIF.
    ENDIF.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  IF li_change_subs IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_change_subs IS INITIAL

  SELECT kappl,	 " Application
         kschl,	 " Condition type
         krech   " Condition class
   FROM t685a    " Conditions: Types: Additional Price Element Data
   INTO TABLE @li_cond_class
   FOR ALL ENTRIES IN @li_change_subs
   WHERE kappl EQ 'V'
   AND   kschl EQ @li_change_subs-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_cond_class BY kschl. "  class
  ENDIF. " IF sy-subrc IS INITIAL

  SELECT a~knumv,
         a~kposn,
         a~stunr,
         a~zaehk,
         a~kschl,
*** BOC BY SAYANDAS on 22-Dec-2017
         a~kbetr,
*** EOC BY SAYANDAS on 22-Dec-2017
         b~vbeln " Sales Document
    INTO TABLE @li_konv
    FROM konv AS a INNER JOIN vbak AS b
    ON a~knumv EQ b~knumv
    FOR ALL ENTRIES IN @li_change_subs
    WHERE b~vbeln = @li_change_subs-vbeln
    AND   a~kschl = @li_change_subs-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_konv BY vbeln kposn kschl.
  ENDIF. " IF sy-subrc IS INITIAL

*** BOC BY SAYANDAS on 22-Dec-2017
  DELETE li_konv WHERE kbetr IS INITIAL.
*** EOC BY SAYANDAS on 22-Dec-2017

*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
  PERFORM f_change_pos USING li_change_subs
                       CHANGING li_final_change_subs.

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
  IF li_final_change_subs IS NOT INITIAL.
    SELECT vbeln, fplnr FROM vbkd
      INTO TABLE @DATA(li_vbkd2)
        FOR ALL ENTRIES IN @li_final_change_subs
        WHERE vbeln = @li_final_change_subs-vbeln
          AND posnr = @v_posnr.
    IF sy-subrc EQ 0.
      SORT li_vbkd2[] BY vbeln.
    ENDIF.
  ENDIF.          "IF li_final_change_subs IS NOT INITIAL
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

  LOOP AT li_final_change_subs INTO DATA(lst_output_x).
*  LOOP AT li_change_subs INTO DATA(lst_output_x).
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
    CLEAR lst_output_dummy.
    lst_output_dummy = lst_output_x.

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
    IF wa_output_chg IS INITIAL.
      wa_output_chg = lst_output_x.
    ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
*    AT NEW customer.
    AT NEW vbeln.
*     IF lst_output_dummy-parvw  EQ c_ag.

      CLEAR: li_return,
             li_contract_itm,
             li_contract_items_inx,
             li_partner,
             li_contract_cond,
             li_text,
             li_return,
             lv_salesdocin,
             li_contract_data,
             li_contract_data_inx,
             lst_contract_hdrin,
             lst_contract_hrdinx,
             lst_contract_data,
             lst_contract_data_inx,
             li_extensionin.

    ENDAT.

*** EOC by SAYANDAS for ERP-3104 on 19th July 2017

*  There will always be one Sold to party(Parve = 'AG') in an order
*  Populate the Header records
    IF ( lst_output_dummy-parvw  EQ c_ag
    AND  lst_output_dummy-posnr  EQ space ).

      lv_salesdocin  = lst_output_dummy-vbeln.
*====================================================================*
* Populate Header structure
*====================================================================*
      lst_contract_hdrin-sales_org  = lst_output_dummy-vkorg.
      lst_contract_hdrin-distr_chan = lst_output_dummy-vtweg.
      lst_contract_hdrin-division   = lst_output_dummy-spart.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_contract_hdrin-sales_off  = lst_output_dummy-vkbur.
* SOC by NPOLINA DM1913(E209) ED2K915483
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_contract_hdrin-sales_off
        IMPORTING
          output = lst_contract_hdrin-sales_off.
* EOC by NPOLINA DM1913(E209) ED2K915483
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_contract_hdrin-purch_no_c = lst_output_dummy-bstnk.
      lst_contract_hdrin-dlv_block  = lst_output_dummy-lifsk.
      lst_contract_hdrin-bill_block = lst_output_dummy-faksk.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_contract_hdrin-cstcndgrp3 = lst_output_dummy-kdkg3.
      lst_contract_hdrin-ref_doc_l  = lst_output_dummy-xblnr.
      lst_contract_hdrin-pymt_meth  = lst_output_dummy-zlsch.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_contract_hdrin-cstcndgrp4 = lst_output_dummy-kdkg4.
      lst_contract_hdrin-cstcndgrp5 = lst_output_dummy-kdkg5.
      lst_contract_hdrin-ref_1_s     = lst_output_dummy-ihrez.
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
* SOC by  NPOLINA DM1913 28/June/2019 ED2K915483
      IF lst_output_dummy-augru IS NOT INITIAL.
        lst_contract_hdrin-ord_reason = lst_output_dummy-augru.
      ENDIF.
* EOC by  NPOLINA DM1913 28/June/2019 ED2K915483
*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_text-itm_number = lc_posnr.
      lst_text-text_id    = v_tdid.
      lst_text-langu      = sy-langu.
      lst_text-format_col = c_format.
      lst_text-text_line  = lst_output_dummy-stxh.

      APPEND lst_text TO li_text.
      CLEAR  lst_text.


*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     IF lst_output_dummy-guebg CA lc_date_special.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826

      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-guebg
        IMPORTING
          date_internal            = lst_contract_hdrin-ct_valid_f
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_contract_hdrin-ct_valid_f.
      ENDIF. " IF sy-subrc IS NOT INITIAL
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     ELSE.
      lst_contract_hdrin-ct_valid_f = lst_output_dummy-guebg.
     ENDIF.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826

* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     IF lst_output_dummy-gueen CA lc_date_special.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-gueen
        IMPORTING
          date_internal            = lst_contract_hdrin-ct_valid_t
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_contract_hdrin-ct_valid_t.
      ENDIF. " IF sy-subrc IS NOT INITIAL
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     ELSE.
      lst_contract_hdrin-ct_valid_t = lst_output_dummy-gueen.
     ENDIF.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
      IF rb_modi IS NOT INITIAL AND wa_output_chg-auart = c_zsbp.

        IF lst_output_dummy-vaktsch IS NOT INITIAL.
          CLEAR:lst_contract_data-con_en_act.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_output_dummy-vaktsch
            IMPORTING
              output = lst_contract_data-con_en_act.
        ENDIF.

        IF lst_output_dummy-vasda IS NOT INITIAL.
          CLEAR lst_contract_data-action_dat.
          CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
            EXPORTING
              date_external            = lst_output_dummy-vasda
            IMPORTING
              date_internal            = lst_contract_data-action_dat
            EXCEPTIONS
              date_external_is_invalid = 1.
          IF sy-subrc IS NOT INITIAL.
            CLEAR lst_contract_data-action_dat.
          ENDIF. " IF sy-subrc IS NOT INITIAL
        ENDIF.
      ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

      lst_contract_data-con_st_dat = lst_contract_hdrin-ct_valid_f.
      lst_contract_data-con_en_dat = lst_contract_hdrin-ct_valid_t.
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
      "Validity period category of contract
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*      IF lst_output_dummy-vlaufk IS NOT INITIAL.
*        lst_contract_data-val_per_ca  = lst_output_dummy-vlaufk.
*        lst_contract_data_inx-val_per_ca = abap_true.
*      ENDIF.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
      "Validity period of contract
      IF lst_output_dummy-vlaufz IS NOT INITIAL.
        lst_contract_data-val_per  = lst_output_dummy-vlaufz.
        lst_contract_data_inx-val_per = abap_true.
      ENDIF.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
      APPEND lst_contract_data TO li_contract_data.

      CLEAR lst_contract_hrdinx.
      lst_contract_hrdinx-updateflag = c_u.
* SOC by  NPOLINA DM1913 28/June/2019 ED2K915483
      IF lst_contract_hdrin-ord_reason IS NOT INITIAL.
        lst_contract_hrdinx-ord_reason = abap_true.
      ENDIF.
* EOC by  NPOLINA DM1913 28/June/2019 ED2K915483

* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      IF lst_contract_hdrin-cstcndgrp2 IS NOT INITIAL .
        lst_contract_hrdinx-cstcndgrp2 = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-CSTCNDGRP2 IS NOT INITIAL
        lst_contract_hrdinx-cstcndgrp2 = abap_false.
      ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556

      IF lst_contract_hdrin-sales_org IS NOT INITIAL.
        lst_contract_hrdinx-sales_org = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-sales_org IS NOT INITIAL
        lst_contract_hrdinx-sales_org = abap_false.
      ENDIF. " IF lst_contract_hdrin-sales_org IS NOT INITIAL

      IF lst_contract_hdrin-distr_chan IS NOT INITIAL.
        lst_contract_hrdinx-distr_chan = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-distr_chan IS NOT INITIAL
        lst_contract_hrdinx-distr_chan = abap_false.
      ENDIF. " IF lst_contract_hdrin-distr_chan IS NOT INITIAL

      IF lst_contract_hdrin-division  IS NOT INITIAL.
        lst_contract_hrdinx-division = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-division IS NOT INITIAL
        lst_contract_hrdinx-division = abap_false.
      ENDIF. " IF lst_contract_hdrin-division IS NOT INITIAL

*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      IF lst_contract_hdrin-sales_off IS NOT INITIAL.
        lst_contract_hrdinx-sales_off = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-sales_off IS NOT INITIAL
        lst_contract_hrdinx-sales_off = abap_false.
      ENDIF. " IF lst_contract_hdrin-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

      IF lst_contract_hdrin-purch_no_c IS NOT INITIAL.
        lst_contract_hrdinx-purch_no_c = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-purch_no_c IS NOT INITIAL
        lst_contract_hrdinx-purch_no_c = abap_true.
      ENDIF. " IF lst_contract_hdrin-purch_no_c IS NOT INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL.
        lst_contract_hrdinx-cstcndgrp3 = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL
        lst_contract_hrdinx-cstcndgrp3 = abap_false.
      ENDIF. " IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081

      lst_contract_hrdinx-dlv_block = abap_true.

      lst_contract_hrdinx-bill_block = abap_true.

      IF lst_contract_hdrin-ct_valid_t  IS NOT INITIAL.
        lst_contract_hrdinx-ct_valid_t = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL
        lst_contract_hrdinx-ct_valid_t = abap_false.
      ENDIF. " IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL

      IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL.
        lst_contract_hrdinx-ct_valid_f = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL
        lst_contract_hrdinx-ct_valid_f = abap_false.
      ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL

*      lst_contract_data_inx-itm_number = abap_true.
*** BOC by SAYANDAS for ERP-3780 on 28th Aug 2017
      lst_contract_data_inx-itm_number = lc_posnr.
      lst_contract_data_inx-updateflag = c_u.
*** EOC by SAYANDAS for ERP-3780 on 28th Aug 2017
      lst_contract_data_inx-con_st_dat = abap_true.
      lst_contract_data_inx-con_st_rul = abap_true.
      lst_contract_data_inx-con_en_dat = abap_true.

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
      IF lst_contract_data-con_en_act IS NOT INITIAL.
        lst_contract_data_inx-con_en_act = abap_true.
      ENDIF.

      IF lst_contract_data-action_dat IS NOT INITIAL.
        lst_contract_data_inx-action_dat = abap_true.
      ENDIF.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

      APPEND lst_contract_data_inx TO li_contract_data_inx.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      CLEAR: lst_bape_vbak, lst_bape_vbakx.                "OTCM-56004
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

      lst_bape_vbak-vbeln       = lst_output_dummy-vbeln.
      lst_bape_vbak-zzpromo     = lst_output_dummy-zzpromo.
      lst_extensionin-structure = lc_bape_vbak .
      lst_extensionin+30(960)   = lst_bape_vbak.
      APPEND lst_extensionin TO li_extensionin.
      CLEAR  lst_extensionin.

      lst_bape_vbakx-vbeln      = lst_output_dummy-vbeln.
      lst_bape_vbakx-zzpromo    = abap_true.
      lst_extensionin-structure = lc_bape_vbakx.
      lst_extensionin+30(960)   = lst_bape_vbakx.
      APPEND lst_extensionin TO li_extensionin.
      CLEAR  lst_extensionin.

    ELSEIF lst_output_dummy-parvw EQ c_we.

*   If not the Sold to lines, they are the ship to Lines ( PARVW = 'WE')  in an order
*   Which can be multiple and is considered as the ITEM lines of the Order
*====================================================================*
* First populate item table
*====================================================================*
      CLEAR lst_contract_itm.
      lst_contract_itm-itm_number  = lst_output_dummy-posnr.
      lst_contract_itm-material    = lst_output_dummy-matnr.
      lst_contract_itm-plant       = lst_output_dummy-plant.
      lst_contract_itm-target_qty  = lst_output_dummy-zmeng.
      lst_contract_itm-item_categ  = lst_output_dummy-pstyv.
      lst_contract_itm-hg_lv_item  = lc_posnr.
      lst_contract_itm-reason_rej  = lst_output_dummy-abgru.
      lst_contract_itm-ref_1_s     = lst_output_dummy-ihrez.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_contract_itm-cstcndgrp3  = lst_output_dummy-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      IF rb_modi IS NOT INITIAL AND wa_output_chg-auart = c_zofl.
        lst_contract_itm-cstcndgrp2  = lst_output_dummy-kdkg2.
      ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      APPEND lst_contract_itm TO li_contract_itm.

*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_text-itm_number = lst_output_dummy-posnr.
      lst_text-text_id    = v_tdid.
      lst_text-langu      = sy-langu.
      lst_text-format_col = c_format.
      lst_text-text_line  = lst_output_dummy-stxh.

      APPEND lst_text TO li_text.
      CLEAR lst_text.
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017

      CLEAR lst_contract_itmx.
*      lst_contract_itmx-updateflag = abap_true.
*** BOC by SAYANDAS for ERP-3780 on 28th Aug 2017
      lst_contract_itmx-updateflag = c_u.
*** EOC by SAYANDAS for ERP-3780 on 28th Aug 2017
      IF lst_contract_itm-itm_number IS NOT INITIAL.
*        lst_contract_itmx-itm_number = abap_true.
*** BOC by SAYANDAS for ERP-3780 on 28th Aug 2017
        lst_contract_itmx-itm_number = lst_output_dummy-posnr.
*** EOC by SAYANDAS for ERP-3780 on 28th Aug 2017
      ELSE. " ELSE -> IF lst_contract_itm-itm_number IS NOT INITIAL
        lst_contract_itmx-itm_number = abap_false.
      ENDIF. " IF lst_contract_itm-itm_number IS NOT INITIAL

      IF lst_contract_itm-material IS NOT INITIAL.
        lst_contract_itmx-material = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-material IS NOT INITIAL
        lst_contract_itmx-material = abap_false.
      ENDIF. " IF lst_contract_itm-material IS NOT INITIAL

      IF lst_contract_itm-target_qty IS NOT INITIAL.
        lst_contract_itmx-target_qty = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-target_qty IS NOT INITIAL
        lst_contract_itmx-target_qty = abap_false.
      ENDIF. " IF lst_contract_itm-target_qty IS NOT INITIAL

      IF lst_contract_itm-item_categ IS NOT INITIAL.
        lst_contract_itmx-item_categ = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-item_categ IS NOT INITIAL
        lst_contract_itmx-item_categ = abap_false.
      ENDIF. " IF lst_contract_itm-item_categ IS NOT INITIAL

      IF lst_contract_itm-hg_lv_item IS NOT INITIAL.
        lst_contract_itmx-hg_lv_item = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-hg_lv_item IS NOT INITIAL
        lst_contract_itmx-hg_lv_item = abap_false.
      ENDIF. " IF lst_contract_itm-hg_lv_item IS NOT INITIAL

      lst_contract_itmx-reason_rej = abap_true.

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL.
        lst_contract_itmx-cstcndgrp3 = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL
        lst_contract_itmx-cstcndgrp3 = abap_false.
      ENDIF. " IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_contract_itm-ref_1_s IS NOT INITIAL.
        lst_contract_itmx-ref_1_s = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-ref_1_s IS NOT INITIAL
        lst_contract_itmx-ref_1_s = abap_false.
      ENDIF. " IF lst_contract_itm-ref_1_s IS NOT INITIAL

* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      IF lst_contract_itm-cstcndgrp2 IS NOT INITIAL.
        lst_contract_itmx-cstcndgrp2 = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-cstcndgrp2 IS NOT INITIAL
        lst_contract_itmx-cstcndgrp2 = abap_false.
      ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      APPEND lst_contract_itmx TO li_contract_items_inx.
      CLEAR  lst_contract_itmx. "UPDATEFLAG.
*====================================================================*
* Populate the conditions table
*====================================================================*
      lst_contract_cond-itm_number = lst_output_dummy-posnr.
      lst_contract_cond-cond_type  = lst_output_dummy-kschl.

      READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
      WITH KEY kschl = lst_output_dummy-kschl
      BINARY SEARCH.
      IF sy-subrc IS INITIAL.
        IF <lfs_cond>-krech NE 'A'.
          lst_contract_cond-cond_value = lst_output_dummy-kbetr / 10.
        ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
          lst_contract_cond-cond_value = lst_output_dummy-kbetr.
        ENDIF. " IF <lfs_cond>-krech NE 'A'
      ENDIF. " IF sy-subrc IS INITIAL

      READ TABLE li_konv ASSIGNING FIELD-SYMBOL(<lfs_konv>)
      WITH KEY vbeln = lst_output_dummy-vbeln
               kposn = lst_output_dummy-posnr
               kschl = lst_output_dummy-kschl
               BINARY SEARCH.
      IF sy-subrc IS INITIAL.

        lst_contract_cond-cond_st_no = <lfs_konv>-stunr.
        lst_contract_cond-cond_count = <lfs_konv>-zaehk.

*       Change existing condition in line item level
        APPEND INITIAL LINE TO li_contract_condx ASSIGNING
        FIELD-SYMBOL(<lfs_contract_condx>).
        IF <lfs_contract_condx> IS ASSIGNED.
          <lfs_contract_condx>-itm_number = lst_output_dummy-posnr.
          <lfs_contract_condx>-cond_st_no = <lfs_konv>-stunr.
          <lfs_contract_condx>-cond_count = <lfs_konv>-zaehk.
          <lfs_contract_condx>-cond_type  = lst_output_dummy-kschl.
          <lfs_contract_condx>-cond_value = abap_true.
          <lfs_contract_condx>-updateflag = 'U'.
        ENDIF. " IF <lfs_contract_condx> IS ASSIGNED

      ENDIF. " IF sy-subrc IS INITIAL

      APPEND lst_contract_cond TO li_contract_cond.
      CLEAR lst_contract_cond.
*====================================================================*
*     Add ZZPROMO to Extension structure of BAPI
*====================================================================*
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_output_dummy-zzpromo
        IMPORTING
          output = lst_output_dummy-zzpromo.

*====================================================================*
* Populate the Partner Changes
*====================================================================*
      lst_partner-document    = lv_salesdocin. " Document Number
      lst_partner-itm_number  = lst_output_dummy-posnr. " Item
      lst_partner-updateflag  = 'U'. " Update
      CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
        EXPORTING
          input  = lst_output_dummy-parvw
        IMPORTING
          output = lst_partner-partn_role. " Partner Role
      lst_partner-p_numb_new  = lst_output_dummy-kunnr. " Partner
      APPEND lst_partner TO li_partner.

      CLEAR lst_bape_vbapx.

      lst_bape_vbap-vbeln       = lst_output_dummy-vbeln.
      lst_bape_vbap-posnr       = lst_output_dummy-posnr.
      lst_bape_vbap-zzpromo     = lst_output_dummy-zzpromo.
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     IF lst_output_dummy-zzconstart CA lc_date_special.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-zzconstart
        IMPORTING
          date_internal            = lst_bape_vbap-zzconstart
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_bape_vbap-zzconstart.
      ENDIF.
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     ELSE.
       lst_bape_vbap-zzconstart = lst_output_dummy-zzconstart.
     ENDIF.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826

* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     IF lst_output_dummy-zzconend CA lc_date_special.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-zzconend
        IMPORTING
          date_internal            = lst_bape_vbap-zzconend
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_bape_vbap-zzconstart.
      ENDIF.
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     ELSE.
       lst_bape_vbap-zzconend = lst_output_dummy-zzconend.
     ENDIF.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826

* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
      lst_extensionin-structure = lc_bape_vbap .
      lst_extensionin+30(960)   = lst_bape_vbap.
      APPEND lst_extensionin TO li_extensionin.

      lst_bape_vbapx-vbeln      = lst_output_dummy-vbeln.
      lst_bape_vbapx-posnr      = lst_output_dummy-posnr.
      lst_bape_vbapx-zzpromo    = abap_true.
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
      lst_bape_vbapx-zzconstart = abap_true.
      lst_bape_vbapx-zzconend   = abap_true.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
      lst_extensionin-structure = lc_bape_vbapx.
      lst_extensionin+30(960)   = lst_bape_vbapx.

      APPEND lst_extensionin TO li_extensionin.
      CLEAR  lst_extensionin.

*====================================================================*
*     Populate Item Date
*====================================================================*
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
     IF lst_output_dummy-guebg CA lc_date_special.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-guebg
        IMPORTING
          date_internal            = lst_contract_data-con_st_dat
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_contract_data-con_st_dat.
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
*      ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL
      ENDIF.
     ELSE.
      lst_contract_data-con_st_dat = lst_output_dummy-guebg.
     ENDIF.
    IF lst_contract_data-con_st_dat IS NOT INITIAL.
      IF lst_output_dummy-gueen CA lc_date_special.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-gueen
          IMPORTING
            date_internal            = lst_contract_data-con_en_dat
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_data-con_en_dat.
        ENDIF. " IF sy-subrc IS NOT INITIAL
* Begin of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826
      ELSE.
        lst_contract_data-con_en_dat = lst_output_dummy-gueen.
      ENDIF.
* End of change by ARGADEELA on 24.11.2021/INC0410015/ED1K913826

        lst_contract_data-itm_number = lst_output_dummy-posnr.
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        "Validity period category of contract
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*        IF lst_output_dummy-vlaufk IS NOT INITIAL.
*          lst_contract_data-val_per_ca  = lst_output_dummy-vlaufk.
*          lst_contract_data_inx-val_per_ca = abap_true.
*        ENDIF.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
        "Validity period of contract
        IF lst_output_dummy-vlaufz IS NOT INITIAL.
          lst_contract_data-val_per  = lst_output_dummy-vlaufz.
          lst_contract_data_inx-val_per = abap_true.
        ENDIF.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        APPEND lst_contract_data TO li_contract_data.

*        lst_contract_data_inx-itm_number = abap_true.
*** BOC by SAYANDAS for ERP-3780 on 28th Aug 2017
        lst_contract_data_inx-itm_number = lst_output_dummy-posnr.
        lst_contract_data_inx-updateflag = c_u.
*** EOC by SAYANDAS for ERP-3780 on 28th Aug 2017
        lst_contract_data_inx-con_st_dat = abap_true.
        lst_contract_data_inx-con_st_rul = abap_true.
        lst_contract_data_inx-con_en_dat = abap_true.
        APPEND lst_contract_data_inx TO li_contract_data_inx.
      ENDIF. " IF sy-subrc IS NOT INITIAL


    ENDIF. " IF ( lst_output_dummy-parvw EQ c_ag

*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
*    AT END OF customer.
    AT END OF vbeln.
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017

      CALL FUNCTION 'BAPI_CUSTOMERCONTRACT_CHANGE'
        EXPORTING
          salesdocument       = lv_salesdocin
          contract_header_in  = lst_contract_hdrin
          contract_header_inx = lst_contract_hrdinx
          behave_when_error   = 'P'
        TABLES
          return              = li_return
          contract_item_in    = li_contract_itm
          contract_item_inx   = li_contract_items_inx
          partnerchanges      = li_partner
          conditions_in       = li_contract_cond
          conditions_inx      = li_contract_condx
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
          contract_text       = li_text
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
          contract_data_in    = li_contract_data
          contract_data_inx   = li_contract_data_inx
          extensionin         = li_extensionin.

      IF NOT li_return IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        IF p_devid <> c_e225.
          CLEAR:v_err.
          i_return[] = li_return[].
          PERFORM f_update_log_staging_e101 USING lst_output_dummy-log_handle
                                                  lv_salesdocin lst_output_dummy-zlogno.
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc = 0.
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
          st_err_msg-wbeln = lv_salesdocin.
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.
          CLEAR: lst_return, st_err_msg.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

        ELSE. " ELSE -> IF sy-subrc = 0
          READ TABLE li_return INTO lst_return WITH KEY type = 'A'. " Return into lst_ of type
          IF sy-subrc IS INITIAL.
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
            st_err_msg-wbeln = lv_salesdocin.
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return, st_err_msg.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          ELSE. " ELSE -> IF sy-subrc IS INITIAL
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*              EXPORTING
*                wait = 'X'.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
            IF sy-subrc IS INITIAL.
*  Begin of change by CHDAS:01-Mar-2017:ED2K903417
              st_err_msg-wbeln = lv_salesdocin.
*  End   of change by CHDAS:01-Mar-2017:ED2K903417
              st_err_msg-msgid = lst_return-id.
              st_err_msg-msgty = lst_return-type.
              st_err_msg-msgno = lst_return-number.
              st_err_msg-msgv1 = lst_return-message_v1.
              st_err_msg-msgv2 = lst_return-message_v2.
              st_err_msg-msgv3 = lst_return-message_v3.
              st_err_msg-msgv4 = lst_return-message_v4.
              APPEND st_err_msg TO i_err_msg.
              CLEAR: lst_return, st_err_msg.

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
              IF rb_modi IS NOT INITIAL AND wa_output_chg-auart EQ c_zsbp.
                CLEAR:v_fplnr.
                READ TABLE li_vbkd2 ASSIGNING FIELD-SYMBOL(<lfs_vbkd2>) WITH KEY vbeln = lv_salesdocin.
                IF sy-subrc EQ 0.
                  v_fplnr = <lfs_vbkd2>-fplnr.
                  IF sy-subrc EQ 0.

                    IF wa_output_chg-autte IS NOT INITIAL.
                      IF wa_output_chg-autte EQ 1 OR wa_output_chg-autte EQ '1'.
                        wa_output_chg-autte = abap_true.
                      ENDIF.
                    ENDIF.

* SOC by NPOLINA ERP7816 ED2K915066
* This logic to redetermine/calculate Billing plan dates as per In Advance and Billing Rule
                    PERFORM f_update_billplan_zsbp USING lv_salesdocin v_fplnr wa_output-perio
                                                    wa_output-autte wa_output-peraf.
                    CLEAR:wa_output.
* EOC by NPOLINA ERP7816 ED2K915066
                  ENDIF.                           "IF sy-subrc on VBKD
                ENDIF.                            " READ TABLE li_VBKD
              ENDIF.                            "IF rb_crea is NOT INITIAL.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311

            ENDIF. " IF sy-subrc IS INITIAL
          ENDIF. " IF sy-subrc IS INITIAL
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF NOT li_return IS INITIAL

    ENDAT.
  ENDLOOP. " LOOP AT li_final_change_subs INTO DATA(lst_output_x)
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  PERFORM f_send_email_move_file.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&-----------------------------------*
*&      Form  F_CREATE_CRED_MEMO
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_CRE_CRED_MEMO  text
*-----------------------------------*
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* Change in structure
*FORM f_create_cred_memo  CHANGING  fp_i_cre_cred_memo TYPE tt_crdt_memo_enh.
FORM f_create_cred_memo  CHANGING  fp_i_cre_cred_memo TYPE tt_crdt_memo_crt.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
  TYPES: BEGIN OF lty_cond_class,
           kappl TYPE kappl,  " Application
           kschl TYPE kscha,  " Condition Type
           krech TYPE krech,  " Condition Class
         END OF lty_cond_class,

         BEGIN OF lty_konv,
           knumv TYPE knumv,  " Number of the document condition
           kposn TYPE kposn,  " Condition item number
           stunr TYPE stunr,  " Step number
           zaehk TYPE dzaehk, " Condition counter
           kschl TYPE kscha,  " Condition type
           vbeln TYPE vbeln,  " Sales Doc Number
         END OF lty_konv,

*** BOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
         BEGIN OF lty_vbeln,
           sign TYPE tvarv_sign, " ABAP: ID: I/E (include/exclude values)
           opti TYPE tvarv_opti, " ABAP: Selection option (EQ/BT/CP/...)
           low  TYPE vbeln_vf,   " Billing Document
           high TYPE vbeln_vf,   " Billing Document
         END   OF lty_vbeln,
*** EOC for ERP-5560 BY SAYANDAS on 14-Dec-2017

         BEGIN OF lty_mvke,
           matnr TYPE  matnr,    " Material Number
           vkorg TYPE  vkorg,    " Sales Organization
           vtweg TYPE vtweg,     " Distribution Channel
           dwerk TYPE dwerk_ext, " Delivering Plant (Own or External)
         END OF lty_mvke.
*====================================================================*
*     L O C A L  I N T E R N A L  T A B L E
*====================================================================*
  DATA: li_sales_itm   TYPE STANDARD TABLE OF bapisditm,  " Communication Fields: Sales and Distribution Document Item
        li_sales_partn TYPE STANDARD TABLE OF bapiparnr,  " Communications Fields: SD Document Partner: WWW
        li_sales_cond  TYPE STANDARD TABLE OF bapicond,   " Communication Fields for Maintaining Conditions in the Order
        li_mvke        TYPE STANDARD TABLE OF lty_mvke
                       INITIAL SIZE 0,
        li_sales_condx TYPE STANDARD TABLE OF bapicondx,  " Communication Fields for Maintaining Conditions in the Order
        li_sales_itmx  TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
        li_sales_text  TYPE STANDARD TABLE OF bapisdtext, " Communication fields: SD texts
        li_cond_class  TYPE STANDARD TABLE OF lty_cond_class
                       INITIAL SIZE 0,
        li_konv        TYPE STANDARD TABLE OF lty_konv
        INITIAL SIZE 0,
*** BOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
        li_invoice     TYPE STANDARD TABLE OF lty_vbeln INITIAL SIZE 0,
*** EOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
        li_return      TYPE STANDARD TABLE OF bapiret2. " Return Parameter
*====================================================================*
*     L O C A L  W O R K A R E A
*====================================================================*
  DATA: lst_sales_hdr_in    TYPE bapisdhd1,  " Communication Fields: Sales and Distribution Document Header
        lst_sales_hdr_inx   TYPE bapisdhd1x, " Checkbox Fields for Sales and Distribution Document Header
        lst_sales_itm       TYPE bapisditm,  " Communication Fields: Sales and Distribution Document Item
        lst_sales_partn     TYPE bapiparnr,  " Communications Fields: SD Document Partner: WWW
        lst_sales_cond      TYPE bapicond,   " Communication Fields for Maintaining Conditions in the Order
        lst_return          TYPE bapiret2,   " Return Parameter
        lst_sales_condx     TYPE bapicondx,  " Communication Fields for Maintaining Conditions in the Order
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
*        lst_cred_memo_dummy TYPE ty_crdt_memo_enh,
        lst_cred_memo_dummy TYPE ty_crdt_memo_crt,
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059*** BOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
        lst_invoice         TYPE lty_vbeln,
        lst_cond_type       TYPE ty_cond_type,
*** EOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
        lst_sales_itmx      TYPE bapisditmx, " Communication Fields: Sales and Distribution Document Item
        lst_sales_text      TYPE bapisdtext. " Communication fields: SD texts
*====================================================================*
*     L O C A L  V A R I A B L E
*====================================================================*
  DATA: lv_credit_memo      TYPE bapivbeln-vbeln. " Sales Document
*====================================================================*
*     L O C A L  C O N S T A N T S
*====================================================================*
  CONSTANTS: lc_posnr       TYPE posnr VALUE '000000'. " Item number of the SD document
*** BOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
  CONSTANTS:
    lc_e101        TYPE zdevid     VALUE 'E101',     " Development ID
    lc_param1_cmiv TYPE rvari_vnam VALUE 'CRDT_INV', " ABAP: Name of Variant Variable
    lc_msgid       TYPE msgid VALUE 'ZQTC_R2',       " Message identification
    lc_e           TYPE msgty VALUE 'E',             " Message Type
    lc_msgno       TYPE msgno VALUE '242'.           " System Message Number
*** EOC for ERP-5932 BY SAYANDAS on 30-JAN-2017

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA : lv_waerk TYPE waerk.
  CLEAR lv_waerk.
  LOOP AT fp_i_cre_cred_memo ASSIGNING FIELD-SYMBOL(<lst_i_cre_cred_memo>).
    PERFORM f_curr_conv_to_intrnl USING <lst_i_cre_cred_memo>-customer " ED2K921132
                                        <lst_i_cre_cred_memo>-parvw
                                        <lst_i_cre_cred_memo>-vkorg
                                        <lst_i_cre_cred_memo>-vtweg
                                        <lst_i_cre_cred_memo>-spart
                                        <lst_i_cre_cred_memo>-vbeln
                                  CHANGING lv_waerk
                                           <lst_i_cre_cred_memo>-kbetr.
    PERFORM f_curr_conv_to_intrnl USING <lst_i_cre_cred_memo>-customer " ED2K921132
                                        <lst_i_cre_cred_memo>-parvw
                                        <lst_i_cre_cred_memo>-vkorg
                                        <lst_i_cre_cred_memo>-vtweg
                                        <lst_i_cre_cred_memo>-spart
                                        <lst_i_cre_cred_memo>-vbeln
                                  CHANGING lv_waerk
                                           <lst_i_cre_cred_memo>-kbetr2.
    PERFORM f_curr_conv_to_intrnl USING <lst_i_cre_cred_memo>-customer " ED2K921132
                                        <lst_i_cre_cred_memo>-parvw
                                        <lst_i_cre_cred_memo>-vkorg
                                        <lst_i_cre_cred_memo>-vtweg
                                        <lst_i_cre_cred_memo>-spart
                                        <lst_i_cre_cred_memo>-vbeln
                                  CHANGING lv_waerk
                                           <lst_i_cre_cred_memo>-kbetr3.
  ENDLOOP.
  FREE lv_waerk.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341


  DATA(li_output) = fp_i_cre_cred_memo.

* Sort by Order Type
  SORT li_output BY auart.

  DELETE li_output WHERE auart IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING auart.

  SELECT auart,	 " Sales Document Type
         incpo   " Increment of item number in the SD document
    FROM tvak    " Sales Document Types
    INTO TABLE @DATA(li_tvak)
    FOR ALL ENTRIES IN @li_output
    WHERE auart EQ @li_output-auart.
  IF sy-subrc IS INITIAL.
    SORT li_tvak BY auart.
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = fp_i_cre_cred_memo.
* BOC 07-MAR-2018 : DTIRUKOOVA : CR#6292: ED2K911212
*  SORT li_output BY kschl.
*  DELETE ADJACENT DUPLICATES FROM li_output COMPARING kschl.
* EOC 07-MAR-2018 : DTIRUKOOVA : CR#6292: ED2K911212

* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* Append all the condition types from file to range table
  LOOP AT li_output INTO DATA(lst_output).
    lst_cond_type-sign   = c_i.
    lst_cond_type-option = c_eq.
    lst_cond_type-low    = lst_output-kschl.
    APPEND lst_cond_type TO i_cond_type.
    CLEAR : lst_cond_type-low.
    lst_cond_type-low    = lst_output-kschl2.
    APPEND lst_cond_type TO i_cond_type.

    CLEAR : lst_cond_type-low.
    lst_cond_type-low    = lst_output-kschl3.
    APPEND lst_cond_type TO i_cond_type.

    CLEAR lst_cond_type.
  ENDLOOP. " LOOP AT li_output INTO DATA(lst_output)

  SORT i_cond_type BY low.
  DELETE ADJACENT DUPLICATES FROM i_cond_type COMPARING low.

*  SELECT kappl,   " Application
*         kschl,   " Condition type
*         krech   " Condition class
*   FROM t685a    " Conditions: Types: Additional Price Element Data
*   INTO TABLE @li_cond_class
*   FOR ALL ENTRIES IN @li_output
*   WHERE kappl EQ 'V'
*   AND   kschl EQ @li_output-kschl.
  SELECT kappl,	 " Application
         kschl,	 " Condition type
         krech   " Condition class
   FROM t685a    " Conditions: Types: Additional Price Element Data
   INTO TABLE @li_cond_class
   WHERE kappl EQ 'V'
   AND   kschl IN @i_cond_type.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059

  IF sy-subrc IS INITIAL.
    SORT li_cond_class BY kschl. "  class
  ENDIF. " IF sy-subrc IS INITIAL

*** BOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
  SELECT devid,    " Development ID
         param1,   " ABAP: Name of Variant Variable
         param2,   " ABAP: Name of Variant Variable
         srno,     " ABAP: Current selection number
         sign,     " ABAP: ID: I/E (include/exclude values)
         opti,     " ABAP: Selection option (EQ/BT/CP/...)
         low,      " Lower Value of Selection Condition
         high      " Upper Value of Selection Condition
  FROM zcaconstant " Wiley Application Constant Table
  INTO TABLE @DATA(li_constant)
  WHERE devid    = @lc_e101
  AND   param1   = @lc_param1_cmiv
  AND   activate = @abap_true.
  IF sy-subrc = 0.
    DATA: lst_constant LIKE LINE OF li_constant.
    READ TABLE li_constant INTO lst_constant INDEX 1.
    IF sy-subrc = 0.
      v_cre = lst_constant-low.
    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF sy-subrc = 0
*** EOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
  CLEAR li_output.
  li_output = fp_i_cre_cred_memo.

  SORT li_output BY matnr vkorg vtweg.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING matnr
                                                      vkorg
                                                      vtweg.
  IF li_output IS NOT INITIAL.
    SELECT matnr, " Material Number
           vkorg, " Sales Organization
           vtweg, " Distribution Channel
           dwerk  " Plant
      FROM mvke   " Sales Data for Material
      INTO TABLE @li_mvke
      FOR ALL ENTRIES IN @li_output
      WHERE matnr = @li_output-matnr
      AND   vkorg = @li_output-vkorg
      AND   vtweg = @li_output-vtweg.

    IF sy-subrc IS INITIAL.
      SORT li_mvke BY matnr vkorg vtweg.
    ENDIF. " IF sy-subrc IS INITIAL
  ENDIF. " IF li_output IS NOT INITIAL

* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* Change in table structure form routine
*  PERFORM f_deselect_credit_lines CHANGING fp_i_cre_cred_memo.
  PERFORM f_deselect_crdt_lines CHANGING fp_i_cre_cred_memo.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
  DATA(li_create_credit) = fp_i_cre_cred_memo.
  DELETE li_create_credit WHERE sel NE abap_true.

  IF li_create_credit IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_create_credit IS INITIAL


  SELECT a~knumv,
         a~kposn,
         a~stunr,
         a~zaehk,
         a~kschl,
         b~vbeln " Sales Document
    INTO TABLE @li_konv
    FROM konv AS a INNER JOIN vbak AS b
    ON a~knumv EQ b~knumv
    FOR ALL ENTRIES IN @li_create_credit
    WHERE b~vbeln = @li_create_credit-vbeln
    AND   a~kschl = @li_create_credit-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_konv BY vbeln kposn kschl.
  ENDIF. " IF sy-subrc IS INITIAL



*** BOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
  READ TABLE li_create_credit INTO DATA(lst_create_credit_temp) INDEX 1.
*** BOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
*  IF lst_create_credit_temp-auart = c_cre. " logic is only applicable for INV Ref
  IF lst_create_credit_temp-auart = v_cre. " logic is only applicable for INV Ref
*** BOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
    CLEAR :lst_create_credit_temp.

    LOOP AT li_create_credit INTO lst_create_credit_temp.
      lst_invoice-sign = c_i.
      lst_invoice-opti = c_eq.
      lst_invoice-low  = lst_create_credit_temp-vbeln.
*     lst_invoice-vbeln = lst_create_credit_temp-vbeln.
      APPEND lst_invoice TO li_invoice.
      CLEAR lst_invoice.
    ENDLOOP. " LOOP AT li_create_credit INTO lst_create_credit_temp

    SORT li_invoice BY low.
    DELETE ADJACENT DUPLICATES FROM li_invoice COMPARING low.

    SELECT vbeln,
           posnr,
           prsdt " Date for pricing and exchange rate
      INTO TABLE @DATA(li_vbrp)
      FROM vbrp  " Billing Document: Item Data
      WHERE vbeln IN @li_invoice.

    IF sy-subrc = 0.
*     Do nothing
    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF lst_create_credit_temp-auart = v_cre
*** EOC for ERP-5560 BY SAYANDAS on 14-Dec-2017

  LOOP AT li_create_credit INTO DATA(lst_cred_memo).

    DATA(lv_index) = sy-tabix.

    lst_cred_memo_dummy = lst_cred_memo.

*   Whenever we see new header entry, we refresh the tables
    IF lst_cred_memo_dummy-parvw  EQ c_ag.
      CLEAR: lst_sales_hdr_in,
             lst_sales_hdr_inx,
             lv_credit_memo,
             li_return,
             li_sales_itm,
             li_sales_itmx,
             li_sales_partn,
             li_sales_cond,
             li_sales_condx,
             li_sales_text.
    ENDIF. " IF lst_cred_memo_dummy-parvw EQ c_ag

*  Populate the Header records
    IF lst_cred_memo_dummy-posnr IS INITIAL.

      IF lst_sales_hdr_in IS INITIAL.

        lst_sales_hdr_in-doc_type    = lst_cred_memo_dummy-auart. "ZCR
        IF lst_sales_hdr_in-doc_type NE c_zscr.            "NPOLINA ERP7763 * SOC by NPOLINA ERP7763 ED2K914078
          lst_sales_hdr_inx-updateflag = c_i.
        ENDIF.
*** BOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
        IF lst_cred_memo_dummy-auart = c_cre.
          READ TABLE li_vbrp INTO DATA(lst_vbrp) WITH KEY
          vbeln = lst_cred_memo_dummy-vbeln.
          IF sy-subrc = 0.
            lst_sales_hdr_in-price_date = lst_vbrp-prsdt.
            IF lst_sales_hdr_in-price_date IS NOT INITIAL.
              lst_sales_hdr_inx-price_date = abap_true.
            ENDIF. " IF lst_sales_hdr_in-price_date IS NOT INITIAL
          ENDIF. " IF sy-subrc = 0
        ENDIF. " IF lst_cred_memo_dummy-auart = c_cre
*** EOC for ERP-5560 BY SAYANDAS on 14-Dec-2017

        IF lst_sales_hdr_in-doc_type IS NOT INITIAL.
          lst_sales_hdr_inx-doc_type = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-doc_type IS NOT INITIAL
          lst_sales_hdr_inx-doc_type = abap_false.
        ENDIF. " IF lst_sales_hdr_in-doc_type IS NOT INITIAL

        lst_sales_hdr_in-sales_org  = lst_cred_memo_dummy-vkorg.
        IF lst_sales_hdr_in-sales_org IS NOT INITIAL.
          lst_sales_hdr_inx-sales_org = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-sales_org IS NOT INITIAL
          lst_sales_hdr_inx-sales_org = abap_false.
        ENDIF. " IF lst_sales_hdr_in-sales_org IS NOT INITIAL

        lst_sales_hdr_in-distr_chan = lst_cred_memo_dummy-vtweg.
        lst_sales_hdr_inx-distr_chan = abap_true.  " NPOLINA ERP7763 ED2K914078
        IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL.
          lst_sales_hdr_inx-distr_chan = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL
          lst_sales_hdr_inx-distr_chan = abap_false.
        ENDIF. " IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL

        lst_sales_hdr_in-division   = lst_cred_memo_dummy-spart.
        IF lst_sales_hdr_in-division IS NOT INITIAL.
          lst_sales_hdr_inx-division = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-division IS NOT INITIAL
          lst_sales_hdr_inx-division = abap_false.
        ENDIF. " IF lst_sales_hdr_in-division IS NOT INITIAL

*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

        lst_sales_hdr_in-sales_off = lst_cred_memo_dummy-vkbur.

* SOC by NPOLINA DM1913(E209) ED2K915483
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_sales_hdr_in-sales_off
          IMPORTING
            output = lst_sales_hdr_in-sales_off.
* EOC by NPOLINA DM1913(E209) ED2K915483

        IF lst_sales_hdr_in-sales_off IS NOT INITIAL.
          lst_sales_hdr_inx-sales_off = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-sales_off IS NOT INITIAL
          lst_sales_hdr_inx-sales_off = abap_false.
        ENDIF. " IF lst_sales_hdr_in-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
* No Billing block for sales area 0050
        IF lst_sales_hdr_in-sales_off = v_vkbur.
          lst_sales_hdr_in-bill_block  = abap_false.
          lst_sales_hdr_inx-bill_block = abap_true.
        ENDIF. " IF lst_sales_hdr_in-sales_off = v_vkbur
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_sales_hdr_in-ref_doc_l   = lst_cred_memo_dummy-xblnr.
        IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL.
          lst_sales_hdr_inx-ref_doc_l = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL
          lst_sales_hdr_inx-ref_doc_l = abap_false.
        ENDIF. " IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL

        lst_sales_hdr_in-pymt_meth   = lst_cred_memo_dummy-zlsch.
        IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL.
          lst_sales_hdr_inx-pymt_meth = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL
          lst_sales_hdr_inx-pymt_meth = abap_false.
        ENDIF. " IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL

        lst_sales_hdr_in-cstcndgrp3 = lst_cred_memo_dummy-kdkg3.
        IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL.
          lst_sales_hdr_inx-cstcndgrp3 = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL
          lst_sales_hdr_inx-cstcndgrp3 = abap_false.
        ENDIF. " IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081

        lst_sales_hdr_in-ref_1_s = lst_cred_memo_dummy-vbeln.
        IF lst_cred_memo-vbeln IS NOT INITIAL.
          lst_sales_hdr_inx-ref_1_s = abap_true.
        ENDIF. " IF lst_cred_memo-vbeln IS NOT INITIAL

        lst_sales_hdr_in-ord_reason  = lst_cred_memo_dummy-augru. "'C82'"Sales Rep Change
        IF lst_sales_hdr_in IS NOT INITIAL.
          lst_sales_hdr_inx-ord_reason = abap_true.
        ENDIF. " IF lst_sales_hdr_in IS NOT INITIAL
        IF lst_sales_hdr_in-doc_type NE c_zscr.           " NPOLINA ERP7763 ED2K914078
          lst_sales_hdr_in-ref_doc    = lst_cred_memo_dummy-vbeln.
          IF lst_sales_hdr_inx-ref_doc  IS NOT INITIAL.
            lst_sales_hdr_inx-ref_doc = abap_true.
          ELSE. " ELSE -> IF lst_sales_hdr_inx-ref_doc IS NOT INITIAL
            lst_sales_hdr_inx-ref_doc = abap_false.
          ENDIF. " IF lst_sales_hdr_inx-ref_doc IS NOT INITIAL

          lst_sales_hdr_in-refdoc_cat = 'M'.
          IF lst_sales_hdr_in-refdoc_cat IS NOT INITIAL.
            lst_sales_hdr_inx-refdoc_cat = abap_true.
          ELSE. " ELSE -> IF lst_sales_hdr_in-refdoc_cat IS NOT INITIAL
            lst_sales_hdr_inx-refdoc_cat = abap_false.
          ENDIF. " IF lst_sales_hdr_in-refdoc_cat IS NOT INITIAL
        ENDIF.                     " NPOLINA ERP7763   ED2K914078
* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
        lst_sales_hdr_in-purch_no_c = lst_cred_memo_dummy-bstnk.
        IF lst_sales_hdr_in-purch_no_c IS NOT INITIAL.
          lst_sales_hdr_inx-purch_no_c = abap_true.
        ENDIF. " IF lst_sales_hdr_in-purch_no_c IS NOT INITIAL

        lst_sales_hdr_in-po_method = lst_cred_memo_dummy-bsark.
        IF lst_sales_hdr_in-po_method IS NOT INITIAL.
          lst_sales_hdr_inx-po_method = abap_true.
        ENDIF. " IF lst_sales_hdr_in-po_method IS NOT INITIAL
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*====================================================================*
*  Header Partner Details
*====================================================================*
        lst_sales_partn-partn_role = lst_cred_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_cred_memo_dummy-customer.
        lst_sales_partn-itm_number = lc_posnr.
        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
*====================================================================*
*      Header Condition Records
*====================================================================*
        lst_sales_cond-itm_number   = lc_posnr.
        lst_sales_condx-itm_number  = lc_posnr.
        lst_sales_cond-cond_type    = lst_cred_memo_dummy-kschl.
        IF lst_sales_cond-cond_type IS NOT INITIAL.
          lst_sales_condx-cond_type = abap_true.
        ELSE. " ELSE -> IF lst_sales_cond-cond_type IS NOT INITIAL
          lst_sales_condx-cond_type = abap_false.
        ENDIF. " IF lst_sales_cond-cond_type IS NOT INITIAL

        lst_sales_cond-cond_value = lst_cred_memo_dummy-kbetr.
        IF lst_sales_condx-cond_value IS NOT INITIAL.
          lst_sales_condx-cond_value = abap_true.
        ELSE. " ELSE -> IF lst_sales_condx-cond_value IS NOT INITIAL
          lst_sales_condx-cond_value = abap_false.
        ENDIF. " IF lst_sales_condx-cond_value IS NOT INITIAL

        APPEND lst_sales_cond TO li_sales_cond.
        CLEAR lst_sales_cond.

        APPEND lst_sales_condx TO li_sales_condx.
        CLEAR lst_sales_condx.

*====================================================================*
*      BAPI TEXT
*====================================================================*
        lst_sales_text-itm_number = lc_posnr.
        lst_sales_text-text_id    = v_tdid.
        lst_sales_text-langu      = sy-langu.
        lst_sales_text-format_col = c_format.
        lst_sales_text-text_line  = lst_cred_memo_dummy-stxh.

        APPEND lst_sales_text TO li_sales_text.
        CLEAR  lst_sales_text.

*     Get Increment of item number in the SD document
        IF lst_cred_memo_dummy-auart IS NOT INITIAL.
          DATA(lst_tvak) = li_tvak[ auart = lst_cred_memo_dummy-auart ].
        ENDIF. " IF lst_cred_memo_dummy-auart IS NOT INITIAL

      ELSE. " ELSE -> IF lst_sales_hdr_in IS INITIAL
*====================================================================*
*  Header Partner Details
*====================================================================*
        lst_sales_partn-partn_role = lst_cred_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_cred_memo_dummy-customer.
        lst_sales_partn-itm_number = lc_posnr.
        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
      ENDIF. " IF lst_sales_hdr_in IS INITIAL

    ELSE. " ELSE -> IF lst_cred_memo_dummy-posnr IS INITIAL

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_cred_memo_dummy-posnr
        IMPORTING
          output = lst_sales_itm-itm_number.

      READ TABLE li_sales_itm WITH KEY itm_number =
      lst_sales_itm-itm_number TRANSPORTING NO FIELDS.

      IF sy-subrc IS NOT INITIAL.

*====================================================================*
*    Check BOM to determine line item numbers
*====================================================================*

        READ TABLE li_mvke ASSIGNING FIELD-SYMBOL(<lfs_mvke>)
        WITH KEY matnr = lst_cred_memo_dummy-matnr   " Material Number
                 vkorg = lst_sales_hdr_in-sales_org  " Sales Organization
                 vtweg = lst_sales_hdr_in-distr_chan " Distribution Channel
                 BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          IF <lfs_mvke>-dwerk IS NOT INITIAL.
            PERFORM f_get_bom_credit USING
                                       lst_cred_memo_dummy-matnr
                                       <lfs_mvke>-dwerk
                                       lst_cred_memo_dummy-fkimg
                                       lv_index
                                       lst_tvak-incpo
                              CHANGING li_create_credit.
          ENDIF. " IF <lfs_mvke>-dwerk IS NOT INITIAL
        ENDIF. " IF sy-subrc IS INITIAL

*====================================================================*
* Sales item level
*====================================================================*

        IF lst_sales_hdr_inx-updateflag EQ c_i.
          lst_sales_itmx-updateflag = abap_true.
        ENDIF. " IF lst_sales_hdr_inx-updateflag EQ c_i


        lst_sales_itm-material   = lst_cred_memo_dummy-matnr.
        IF lst_sales_itm-material IS NOT INITIAL.
          lst_sales_itmx-material = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-material IS NOT INITIAL
          lst_sales_itmx-material = abap_false.
        ENDIF. " IF lst_sales_itm-material IS NOT INITIAL

*** BOC for ERP-5560 BY SAYANDAS on 14-Dec-2017
        IF li_vbrp IS NOT INITIAL.
          READ TABLE li_vbrp INTO lst_vbrp WITH KEY
*** BOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
*          vbeln = lst_cred_memo_dummy-vbeln
          vbeln = lst_sales_hdr_in-ref_doc
*** EOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
          posnr = lst_cred_memo_dummy-posnr.
          IF sy-subrc = 0.

            lst_sales_itm-price_date = lst_vbrp-prsdt.

            IF lst_sales_itm-price_date IS NOT INITIAL.
              lst_sales_itmx-price_date = abap_true.
            ELSE. " ELSE -> IF lst_sales_itm-price_date IS NOT INITIAL
              lst_sales_itmx-price_date = abap_false.
            ENDIF. " IF lst_sales_itm-price_date IS NOT INITIAL

          ENDIF. " IF sy-subrc = 0
        ENDIF. " IF li_vbrp IS NOT INITIAL
*** BOC for ERP-5560 BY SAYANDAS on 14-Dec-2017

        lst_sales_itm-hg_lv_item = lc_posnr.
        IF  lst_sales_itm-hg_lv_item IS NOT INITIAL.
          lst_sales_itmx-hg_lv_item = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-hg_lv_item IS NOT INITIAL
          lst_sales_itmx-hg_lv_item = abap_false.
        ENDIF. " IF lst_sales_itm-hg_lv_item IS NOT INITIAL

        lst_sales_itm-target_qty = lst_cred_memo_dummy-fkimg.
        IF lst_sales_itm-target_qty IS NOT INITIAL.
          lst_sales_itmx-target_qty = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-target_qty IS NOT INITIAL
          lst_sales_itmx-target_qty = abap_false.
        ENDIF. " IF lst_sales_itm-target_qty IS NOT INITIAL
*** BOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
*        lst_sales_itm-ref_doc    = lst_cred_memo_dummy-vbeln.
        IF lst_vbrp-vbeln IS NOT INITIAL.
          lst_sales_itm-ref_doc    = lst_vbrp-vbeln.
        ENDIF. " IF lst_vbrp-vbeln IS NOT INITIAL
*** EOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
        IF lst_sales_itm-ref_doc  IS NOT INITIAL.
          lst_sales_itmx-ref_doc = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-ref_doc IS NOT INITIAL
          lst_sales_itmx-ref_doc = abap_false.
        ENDIF. " IF lst_sales_itm-ref_doc IS NOT INITIAL
* SOC by NPOLINA ERP7763 ED2K914078
        IF lst_sales_hdr_in-doc_type EQ c_zscr.
          lst_sales_itm-ref_doc    = lst_sales_hdr_in-ref_1_s.
          lst_sales_itm-ref_doc_it = lst_sales_itm-itm_number.
        ENDIF.
* EOC by NPOLINA ERP7763 ED2K914078
        IF lst_sales_itm-ref_doc  IS NOT INITIAL.
          lst_sales_itmx-ref_doc = abap_true.
          lst_sales_itmx-ref_doc_it = abap_true.
        ENDIF.
*** BOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
*        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*          EXPORTING
*            input  = lst_cred_memo_dummy-posnr
*          IMPORTING
*            output = lst_sales_itm-ref_doc_it.
        IF lst_vbrp-posnr IS NOT INITIAL.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_vbrp-posnr
            IMPORTING
              output = lst_sales_itm-ref_doc_it.
        ENDIF. " IF lst_vbrp-posnr IS NOT INITIAL
*** EOC for ERP-5932 BY SAYANDAS on 30-JAN-2017
        IF lst_sales_itm-ref_doc_it IS NOT INITIAL.
          lst_sales_itmx-ref_doc_it = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-ref_doc_it IS NOT INITIAL
          lst_sales_itmx-ref_doc_it = abap_false.
        ENDIF. " IF lst_sales_itm-ref_doc_it IS NOT INITIAL

        IF lst_sales_itm-ref_doc IS NOT INITIAL.
          lst_sales_itm-ref_doc_ca = 'M'.
        ENDIF. " IF lst_sales_itm-ref_doc IS NOT INITIAL

        IF lst_sales_itm-ref_doc_ca  IS NOT INITIAL.
          lst_sales_itmx-ref_doc_ca = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-ref_doc_ca IS NOT INITIAL
          lst_sales_itmx-ref_doc_ca = abap_false.
        ENDIF. " IF lst_sales_itm-ref_doc_ca IS NOT INITIAL


        IF  lst_cred_memo_dummy-ihrez IS NOT INITIAL.
          lst_sales_itm-ref_1_s = lst_cred_memo_dummy-ihrez.
          lst_sales_itmx-ref_1_s = abap_true.
        ELSE. " ELSE -> IF lst_cred_memo_dummy-ihrez IS NOT INITIAL
          lst_sales_itmx-ref_1_s = abap_false.
        ENDIF. " IF lst_cred_memo_dummy-ihrez IS NOT INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        IF lst_cred_memo_dummy-kdkg3 IS NOT INITIAL.
          lst_sales_itm-cstcndgrp3 = lst_cred_memo_dummy-kdkg3.
          lst_sales_itmx-cstcndgrp3 = abap_true.
        ENDIF. " IF lst_cred_memo_dummy-kdkg3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
        IF lst_cred_memo_dummy-pstyv IS NOT INITIAL.
          lst_sales_itm-item_categ = lst_cred_memo_dummy-pstyv.
          lst_sales_itmx-item_categ = abap_true.
        ENDIF. " IF lst_cred_memo_dummy-pstyv IS NOT INITIAL
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
* SOC by NPOLINA ERP7763  ED2K914078
        IF lst_sales_hdr_in-doc_type EQ c_zscr.
          CLEAR:lst_sales_itmx-ref_doc_ca,lst_sales_itm-ref_doc_ca,lst_sales_itm-item_categ,lst_sales_itmx-item_categ.
          lst_sales_itm-itm_number = lst_cred_memo_dummy-posnr.
          lst_sales_itmx-itm_number = lst_cred_memo_dummy-posnr.
        ENDIF.
* EOC by NPOLINA ERP7763 ED2K914078
        APPEND lst_sales_itm TO li_sales_itm.
        CLEAR lst_sales_itm.

        APPEND lst_sales_itmx TO li_sales_itmx.
        CLEAR lst_sales_itmx.

*====================================================================*
*  BAPI TEXT
*====================================================================*

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_cred_memo_dummy-posnr
          IMPORTING
            output = lst_sales_text-itm_number.

        lst_sales_text-text_id    = v_tdid.
        lst_sales_text-langu      = sy-langu.
        lst_sales_text-format_col = c_format.
        lst_sales_text-text_line  = lst_cred_memo_dummy-stxh.

        APPEND lst_sales_text TO li_sales_text.
        CLEAR  lst_sales_text.
*====================================================================*
* Sales partner
*====================================================================*
        lst_sales_partn-partn_role = lst_cred_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_cred_memo_dummy-partner.

*** BOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
        SELECT kunnr,
               vkorg,
               vtweg,
               spart " Division
          FROM knvv  " Customer Master Sales Data
          INTO TABLE @DATA(li_knvv)
          WHERE kunnr = @lst_sales_partn-partn_numb
          AND vkorg = @lst_sales_hdr_in-sales_org
          AND vtweg = @lst_sales_hdr_in-distr_chan
          AND spart = @lst_sales_hdr_in-division.
        IF sy-subrc NE 0.

          st_err_msg-msgid = lc_msgid.
          st_err_msg-msgty = lc_e.
          st_err_msg-msgno = lc_msgno.
          st_err_msg-msgv1 = lst_sales_partn-partn_numb.
          st_err_msg-msgv2 = lst_sales_hdr_in-sales_org.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: st_err_msg.
          CONTINUE.
        ENDIF. " IF sy-subrc NE 0

*** EOC BY SAYANDAS on 31-JAN-2018 for ERP-6266

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_cred_memo_dummy-posnr
          IMPORTING
            output = lst_sales_partn-itm_number.


        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
*====================================================================*
* Sales condition
*====================================================================*
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_cred_memo_dummy-posnr
          IMPORTING
            output = lst_sales_cond-itm_number.

        lst_sales_condx-itm_number = lst_sales_cond-itm_number.
        lst_sales_cond-cond_type    = lst_cred_memo_dummy-kschl.

        IF lst_sales_cond-cond_type IS NOT INITIAL.
          lst_sales_condx-cond_type = abap_true.
        ELSE. " ELSE -> IF lst_sales_cond-cond_type IS NOT INITIAL
          lst_sales_condx-cond_type = abap_false.
        ENDIF. " IF lst_sales_cond-cond_type IS NOT INITIAL

        READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
        WITH KEY kschl = lst_cred_memo_dummy-kschl
        BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          IF <lfs_cond>-krech NE 'A'.
            lst_sales_cond-cond_value = lst_cred_memo_dummy-kbetr / 10.
          ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
            lst_sales_cond-cond_value = lst_cred_memo_dummy-kbetr.
          ENDIF. " IF <lfs_cond>-krech NE 'A'
        ENDIF. " IF sy-subrc IS INITIAL

        IF lst_sales_condx-cond_value IS NOT INITIAL.
          lst_sales_condx-cond_value = abap_true.
        ELSE. " ELSE -> IF lst_sales_condx-cond_value IS NOT INITIAL
          lst_sales_condx-cond_value = abap_false.
        ENDIF. " IF lst_sales_condx-cond_value IS NOT INITIAL

        READ TABLE li_konv ASSIGNING FIELD-SYMBOL(<lfs_konv>)
        WITH KEY vbeln = lst_cred_memo_dummy-vbeln
                 kposn = lst_cred_memo_dummy-posnr
                 kschl = lst_cred_memo_dummy-kschl
                 BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          lst_sales_condx-cond_st_no   = <lfs_konv>-stunr.
          lst_sales_condx-cond_count   = <lfs_konv>-zaehk.
          lst_sales_condx-cond_st_no = <lfs_konv>-stunr.
          lst_sales_condx-cond_count = <lfs_konv>-zaehk.
          lst_sales_condx-updateflag = 'U'.
        ENDIF. " IF sy-subrc IS INITIAL

        APPEND lst_sales_cond TO li_sales_cond.
        CLEAR lst_sales_cond.

        APPEND lst_sales_condx TO li_sales_condx.
        CLEAR lst_sales_condx.

* SOC by NPOLINA  for ERP7763 for ZSCR ZTAX is mandatory ED2K914144
        IF lst_sales_hdr_in-doc_type = c_zscr.
          lst_sales_cond-itm_number   = lst_cred_memo_dummy-posnr.
          lst_sales_condx-itm_number  = lst_cred_memo_dummy-posnr.
          lst_sales_cond-cond_type  =  c_ztax.
          lst_sales_cond-cond_value = lst_cred_memo_dummy-tax.
          lst_sales_condx-cond_type = abap_true.

          APPEND lst_sales_cond TO li_sales_cond.
          CLEAR lst_sales_cond.

          APPEND lst_sales_condx TO li_sales_condx.
          CLEAR lst_sales_condx.
        ENDIF.
* EOC by NPOLINA  for ERP7763 ED2K914144

* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
*====================================================================*
*      Item Condition Records
*====================================================================*
* For condition type KSCHL2
        PERFORM f_append_cond_typ USING lst_cred_memo_dummy-posnr
                                        lst_cred_memo_dummy-kschl2
                                        lst_cred_memo_dummy-kbetr2
                                  CHANGING  li_cond_class
                                            li_sales_cond
                                            li_sales_condx.


* For condition type KSCHL3
        PERFORM f_append_cond_typ USING lst_cred_memo_dummy-posnr
                                        lst_cred_memo_dummy-kschl3
                                        lst_cred_memo_dummy-kbetr3
                                  CHANGING  li_cond_class
                                            li_sales_cond
                                            li_sales_condx.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059

      ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL
*====================================================================*
* Sales partner
*====================================================================*
        lst_sales_partn-partn_role = lst_cred_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_cred_memo_dummy-partner.


*** BOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
        SELECT kunnr,
               vkorg,
               vtweg,
               spart " Division
          FROM knvv  " Customer Master Sales Data
          INTO TABLE @li_knvv
          WHERE kunnr = @lst_sales_partn-partn_numb
          AND vkorg = @lst_sales_hdr_in-sales_org
          AND vtweg = @lst_sales_hdr_in-distr_chan
          AND spart = @lst_sales_hdr_in-division.
        IF sy-subrc NE 0.

          st_err_msg-msgid = lc_msgid.
          st_err_msg-msgty = lc_e.
          st_err_msg-msgno = lc_msgno.
          st_err_msg-msgv1 = lst_sales_partn-partn_numb.
          st_err_msg-msgv2 = lst_sales_hdr_in-sales_org.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: st_err_msg.
          CONTINUE.
        ENDIF. " IF sy-subrc NE 0

*** EOC BY SAYANDAS on 31-JAN-2018 for ERP-6266

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_cred_memo_dummy-posnr
          IMPORTING
            output = lst_sales_partn-itm_number.


        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
      ENDIF. " IF sy-subrc IS NOT INITIAL

    ENDIF. " IF lst_cred_memo_dummy-posnr IS INITIAL

*   Before a new header record/ last entry - Create contract
    IF lv_index EQ lines( li_create_credit ).
      DATA(lv_create_credit) = abap_true.
    ELSE. " ELSE -> IF lv_index EQ lines( li_create_credit )
      IF li_create_credit[ ( lv_index + 1 ) ]-parvw EQ c_ag.
        lv_create_credit = abap_true.
      ENDIF. " IF li_create_credit[ ( lv_index + 1 ) ]-parvw EQ c_ag
    ENDIF. " IF lv_index EQ lines( li_create_credit )

    IF lv_create_credit EQ abap_true.
      CLEAR lv_create_credit.
*     Bapi call
      CALL FUNCTION 'SD_SALESDOCUMENT_CREATE'
        EXPORTING
          sales_header_in      = lst_sales_hdr_in
          sales_header_inx     = lst_sales_hdr_inx
        IMPORTING
          salesdocument_ex     = lv_credit_memo
        TABLES
          return               = li_return
          sales_items_in       = li_sales_itm
          sales_items_inx      = li_sales_itmx
          sales_partners       = li_sales_partn
          sales_conditions_in  = li_sales_cond
          sales_conditions_inx = li_sales_condx
          sales_text           = li_sales_text.

      IF NOT li_return IS INITIAL.
        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc = 0.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.
          CLEAR: lst_return, st_err_msg.
          CLEAR lst_return.
        ELSE. " ELSE -> IF sy-subrc = 0
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' .
*  End of change by CHDAS:01-Mar-2017:ED2K903417
          READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
*  Begin of change by CHDAS:01-Mar-2017:ED2K903417
          IF sy-subrc IS INITIAL.
            st_err_msg-wbeln = lv_credit_memo.
*  End  of change by CHDAS:01-Mar-2017:ED2K903417
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return, st_err_msg.
          ENDIF. " IF sy-subrc IS INITIAL
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF NOT li_return IS INITIAL
      CLEAR: lst_sales_hdr_in,
             lv_credit_memo,
             li_return,
             li_sales_itm,
             li_sales_partn,
             li_sales_cond.
    ENDIF. " IF lv_create_credit EQ abap_true
  ENDLOOP. " LOOP AT li_create_credit INTO DATA(lst_cred_memo)
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  PERFORM f_send_email_move_file.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&-----------------------------------*
*&      Form  F_CHANGE_CRED_MEMO
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_CHG_CRED_MEMO  text
*-----------------------------------*
FORM f_change_cred_memo  USING fp_i_chg_cred_memo TYPE tt_crdt_memo_enh.

  TYPES: BEGIN OF lty_cond_class,
           kappl TYPE kappl, " Application
           kschl TYPE kscha, " Condition Type
           krech TYPE krech, " Condition Class
         END OF lty_cond_class.
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL

  TYPES: BEGIN OF lty_konv,
           knumv TYPE knumv,  " Number of the document condition
           kposn TYPE kposn,  " Condition item number
           stunr TYPE stunr,  " Step number
           zaehk TYPE dzaehk, " Condition counter
           kschl TYPE kscha,  " Condition type
           vbeln TYPE vbeln,  " Sales Doc Number
         END OF lty_konv.
*** EOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
*====================================================================*
* Local Internal Table
*====================================================================*
  DATA: li_sales_itm              TYPE STANDARD TABLE OF bapisditm,  " Communication Fields: Sales and Distribution Document Item
        li_cond_class             TYPE STANDARD TABLE OF lty_cond_class
        INITIAL SIZE 0,
        li_sales_cond             TYPE STANDARD TABLE OF bapicond,   " Communication Fields for Maintaining Conditions in the Order
        li_sales_condx            TYPE STANDARD TABLE OF bapicondx,  " Communication Fields for Maintaining Conditions in the Order
        li_sales_itmx             TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
        li_partner                TYPE STANDARD TABLE OF bapiparnrc, " Partner
        li_sales_text             TYPE STANDARD TABLE OF bapisdtext, " Communication fields: SD texts
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
        li_change_credit_memo_chg TYPE tt_crdt_memo_enh_chg,
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
        li_konv                   TYPE STANDARD TABLE OF lty_konv INITIAL SIZE 0,
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
        li_return                 TYPE STANDARD TABLE OF bapiret2. " Return Parameter
*====================================================================*
* Local Work-area
*====================================================================*
  DATA: lst_sales_hdr_in    TYPE bapisdhd1,  " Communication Fields: Sales and Distribution Document Header
        lst_sales_hdr_inx   TYPE bapisdhd1x, " Checkbox Fields for Sales and Distribution Document Header
        lst_sales_itm       TYPE bapisditm,  " Communication Fields: Sales and Distribution Document Item
        lst_partner         TYPE bapiparnrc, " Partner
        lst_sales_cond      TYPE bapicond,   " Communication Fields for Maintaining Conditions in the Order
        lst_return          TYPE bapiret2,   " Return Parameter
        lst_sales_condx     TYPE bapicondx,  " Communication Fields for Maintaining Conditions in the Order
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*        lst_cred_memo_dummy TYPE ty_crdt_memo_enh,
        lst_cred_memo_dummy TYPE ty_crdt_memo_enh_chg,
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
        lst_sales_itmx      TYPE bapisditmx, " Communication Fields: Sales and Distribution Document Item
        lst_sales_text      TYPE bapisdtext. " Communication fields: SD texts

*====================================================================*
* Local Variable
*====================================================================*
  DATA: lv_salesdoc       TYPE bapivbeln-vbeln. " Sales Document

*====================================================================*
* Local Constant
*====================================================================*
  CONSTANTS: lc_posnr     TYPE posnr VALUE '000000'. " Item number of the SD document

  SORT fp_i_chg_cred_memo BY vbeln
                             parvw.
* This FM will get the reference of the changed data in ref_grid
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA : lv_waerk TYPE waerk.
  CLEAR lv_waerk.
  LOOP AT fp_i_chg_cred_memo ASSIGNING FIELD-SYMBOL(<lst_i_chg_cred_memo>).
    PERFORM f_curr_conv_to_intrnl USING <lst_i_chg_cred_memo>-customer " ED2K921132
                                        <lst_i_chg_cred_memo>-parvw
                                        <lst_i_chg_cred_memo>-vkorg
                                        <lst_i_chg_cred_memo>-vtweg
                                        <lst_i_chg_cred_memo>-spart
                                        <lst_i_chg_cred_memo>-vbeln
                                  CHANGING lv_waerk
                                           <lst_i_chg_cred_memo>-kbetr.
  ENDLOOP.
  FREE lv_waerk.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341

* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected

  PERFORM f_deselect_credit_lines CHANGING fp_i_chg_cred_memo.

  DATA(li_change_credit_memo) = fp_i_chg_cred_memo.
  DELETE li_change_credit_memo WHERE sel NE abap_true.

  IF li_change_credit_memo IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_change_credit_memo IS INITIAL

  SELECT kappl,	 " Application
         kschl,	 " Condition type
         krech   " Condition class
   FROM t685a    " Conditions: Types: Additional Price Element Data
   INTO TABLE @li_cond_class
   FOR ALL ENTRIES IN @li_change_credit_memo
   WHERE kappl EQ 'V'
   AND   kschl EQ @li_change_credit_memo-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_cond_class BY kschl. "  class
  ENDIF. " IF sy-subrc IS INITIAL

*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
  PERFORM f_change_pos_cmr USING li_change_credit_memo
                           CHANGING li_change_credit_memo_chg.

*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
  DATA(li_change_credit_memo_chg1) = li_change_credit_memo_chg[].

  SORT li_change_credit_memo_chg1 BY vbeln.
  DELETE ADJACENT DUPLICATES FROM li_change_credit_memo_chg1.
  READ TABLE li_change_credit_memo_chg1 INTO DATA(lst_change_credit_memo_chg1) INDEX 1.
  IF lst_change_credit_memo_chg1-auart = c_cre.
*** Select data from KONV
    SELECT a~knumv,
           a~kposn,
           a~stunr,
           a~zaehk,
           a~kschl,
           b~vbeln " Billing Document
      INTO TABLE @li_konv
      FROM konv AS a INNER JOIN vbrk AS b
      ON a~knumv = b~knumv
      FOR ALL ENTRIES IN @li_change_credit_memo_chg1
      WHERE b~vbeln = @li_change_credit_memo_chg1-vbeln
      AND   a~kschl = @li_change_credit_memo_chg1-kschl.
    IF sy-subrc = 0.
      SORT li_konv BY vbeln kposn kschl.
    ENDIF. " IF sy-subrc = 0

  ELSE. " ELSE -> IF lst_change_credit_memo_chg1-auart = c_cre

*** Select data from KONV
    SELECT a~knumv,
           a~kposn,
           a~stunr,
           a~zaehk,
           a~kschl,
           b~vbeln " Sales Document
      INTO TABLE @li_konv
      FROM konv AS a INNER JOIN vbak AS b
      ON a~knumv = b~knumv
      FOR ALL ENTRIES IN @li_change_credit_memo_chg1
      WHERE b~vbeln = @li_change_credit_memo_chg1-vbeln
      AND   a~kschl = @li_change_credit_memo_chg1-kschl.
    IF sy-subrc = 0.
      SORT li_konv BY vbeln kposn kschl.
    ENDIF. " IF sy-subrc = 0


  ENDIF. " IF lst_change_credit_memo_chg1-auart = c_cre

*** EOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
  LOOP AT li_change_credit_memo_chg INTO DATA(lst_cred_memo).
*  LOOP AT li_change_credit_memo INTO DATA(lst_cred_memo).
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG

    lst_cred_memo_dummy = lst_cred_memo.
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*    AT NEW customer.
    AT NEW vbeln.
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
      CLEAR: lst_sales_hdr_in,
             li_return,
             li_sales_itm,
             li_partner,
             li_sales_text,
             li_sales_cond.
    ENDAT.

    IF ( lst_cred_memo_dummy-parvw EQ c_ag "'AG'.
    AND  lst_cred_memo_dummy-posnr IS INITIAL    ).
*      lst_sales_hdr_in-doc_type   = c_cre. "ZCR

      lst_sales_hdr_inx-updateflag = c_u.

      lv_salesdoc =   lst_cred_memo_dummy-vbeln.

      lst_sales_hdr_in-doc_type   = lst_cred_memo_dummy-auart.
      IF lst_sales_hdr_in-doc_type IS NOT INITIAL.
        lst_sales_hdr_inx-doc_type = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_in-doc_type IS NOT INITIAL
        lst_sales_hdr_inx-doc_type = abap_false.
      ENDIF. " IF lst_sales_hdr_in-doc_type IS NOT INITIAL

      lst_sales_hdr_in-sales_org  = lst_cred_memo_dummy-vkorg.
      IF lst_sales_hdr_in-sales_org IS NOT INITIAL.
        lst_sales_hdr_inx-sales_org = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_in-sales_org IS NOT INITIAL
        lst_sales_hdr_inx-sales_org = abap_false.
      ENDIF. " IF lst_sales_hdr_in-sales_org IS NOT INITIAL

      lst_sales_hdr_in-distr_chan = lst_cred_memo_dummy-vtweg.
      IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL.
        lst_sales_hdr_inx-distr_chan = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL
        lst_sales_hdr_inx-distr_chan = abap_false.
      ENDIF. " IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL
      lst_sales_hdr_in-division   = lst_cred_memo_dummy-spart.

      IF lst_sales_hdr_in-division IS NOT INITIAL.
        lst_sales_hdr_inx-division = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_in-division IS NOT INITIAL
        lst_sales_hdr_inx-division = abap_false.
      ENDIF. " IF lst_sales_hdr_in-division IS NOT INITIAL

*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_sales_hdr_in-sales_off = lst_cred_memo_dummy-vkbur.
* SOC by NPOLINA DM1913(E209) ED2K915483
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_sales_hdr_in-sales_off
        IMPORTING
          output = lst_sales_hdr_in-sales_off.
* EOC by NPOLINA DM1913(E209) ED2K915483
      IF lst_sales_hdr_in-sales_off IS NOT INITIAL.
        lst_sales_hdr_inx-sales_off = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_in-sales_off IS NOT INITIAL
        lst_sales_hdr_inx-sales_off = abap_false.
      ENDIF. " IF lst_sales_hdr_in-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_sales_hdr_in-ref_doc_l   = lst_cred_memo_dummy-xblnr.
      IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL.
        lst_sales_hdr_inx-ref_doc_l = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL
        lst_sales_hdr_inx-ref_doc_l = abap_false.
      ENDIF. " IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL

      lst_sales_hdr_in-pymt_meth   = lst_cred_memo_dummy-zlsch.
      IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL.
        lst_sales_hdr_inx-pymt_meth = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL
        lst_sales_hdr_inx-pymt_meth = abap_false.
      ENDIF. " IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL

      lst_sales_hdr_in-cstcndgrp3 = lst_cred_memo_dummy-kdkg3.
      IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL.
        lst_sales_hdr_inx-cstcndgrp3 = abap_true.
      ELSE. " ELSE -> IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL
        lst_sales_hdr_inx-cstcndgrp3 = abap_false.
      ENDIF. " IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081

      lst_sales_hdr_in-ord_reason  = lst_cred_memo_dummy-augru. "'C82'"Sales Rep Change
      IF lst_sales_hdr_in IS NOT INITIAL.
        lst_sales_hdr_inx-ord_reason = abap_true.
      ENDIF. " IF lst_sales_hdr_in IS NOT INITIAL

* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
      lst_sales_hdr_in-purch_no_c = lst_cred_memo_dummy-bstnk.
      IF lst_sales_hdr_in-purch_no_c IS NOT INITIAL.
        lst_sales_hdr_inx-purch_no_c = abap_true.
      ENDIF. " IF lst_sales_hdr_in-purch_no_c IS NOT INITIAL
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687

*====================================================================*
*      Header Condition Records
*====================================================================*
      lst_sales_cond-itm_number   = lc_posnr.
      lst_sales_condx-itm_number  = lc_posnr.
      lst_sales_cond-cond_type    = lst_cred_memo_dummy-kschl.
      IF lst_sales_cond-cond_type IS NOT INITIAL.
        lst_sales_condx-cond_type = abap_true.
      ELSE. " ELSE -> IF lst_sales_cond-cond_type IS NOT INITIAL
        lst_sales_condx-cond_type = abap_false.
      ENDIF. " IF lst_sales_cond-cond_type IS NOT INITIAL

      lst_sales_cond-cond_value = lst_cred_memo_dummy-kbetr.
      IF lst_sales_condx-cond_value IS NOT INITIAL.
        lst_sales_condx-cond_value = abap_true.
      ELSE. " ELSE -> IF lst_sales_condx-cond_value IS NOT INITIAL
        lst_sales_condx-cond_value = abap_false.
      ENDIF. " IF lst_sales_condx-cond_value IS NOT INITIAL

      APPEND lst_sales_cond TO li_sales_cond.
      CLEAR lst_sales_cond.

      APPEND lst_sales_condx TO li_sales_condx.
      CLEAR lst_sales_condx.
*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_sales_text-itm_number = lc_posnr.
      lst_sales_text-text_id    = v_tdid.
      lst_sales_text-langu      = sy-langu.
      lst_sales_text-format_col = c_format.
      lst_sales_text-text_line  = lst_cred_memo_dummy-stxh.

      APPEND lst_sales_text TO li_sales_text.
      CLEAR  lst_sales_text.

    ELSEIF ( lst_cred_memo_dummy-parvw EQ c_we       "'AG'.
    AND  lst_cred_memo_dummy-posnr IS NOT INITIAL ). " ELSE -> IF <lst_ty_cre_cred_mem_loop>-parvw EQ lc_parvw_ag
*====================================================================*
* Sales item level
*====================================================================*

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_cred_memo_dummy-posnr
        IMPORTING
          output = lst_sales_itm-itm_number.

      IF lst_sales_itm-itm_number IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_cred_memo_dummy-posnr
          IMPORTING
            output = lst_sales_itmx-itm_number.
      ENDIF. " IF lst_sales_itm-itm_number IS NOT INITIAL

      IF lst_sales_hdr_inx-updateflag EQ c_u.
        lst_sales_itmx-updateflag = abap_true.
      ENDIF. " IF lst_sales_hdr_inx-updateflag EQ c_u

      lst_sales_itm-material   = lst_cred_memo_dummy-matnr.
      IF lst_sales_itm-material IS NOT INITIAL.
        lst_sales_itmx-material = abap_true.
      ELSE. " ELSE -> IF lst_sales_itm-material IS NOT INITIAL
        lst_sales_itmx-material = abap_false.
      ENDIF. " IF lst_sales_itm-material IS NOT INITIAL

      lst_sales_itm-hg_lv_item = lc_posnr.
      IF  lst_sales_itm-hg_lv_item IS NOT INITIAL.
        lst_sales_itmx-hg_lv_item = abap_true.
      ELSE. " ELSE -> IF lst_sales_itm-hg_lv_item IS NOT INITIAL
        lst_sales_itmx-hg_lv_item = abap_false.
      ENDIF. " IF lst_sales_itm-hg_lv_item IS NOT INITIAL

      lst_sales_itm-target_qty = lst_cred_memo_dummy-fkimg.
      IF lst_sales_itm-target_qty IS NOT INITIAL.
        lst_sales_itmx-target_qty = abap_true.
      ELSE. " ELSE -> IF lst_sales_itm-target_qty IS NOT INITIAL
        lst_sales_itmx-target_qty = abap_false.
      ENDIF. " IF lst_sales_itm-target_qty IS NOT INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_cred_memo_dummy-kdkg3 IS NOT INITIAL.
        lst_sales_itm-cstcndgrp3 = lst_cred_memo_dummy-kdkg3.
        lst_sales_itmx-cstcndgrp3 = abap_true.
      ENDIF. " IF lst_cred_memo_dummy-kdkg3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
      IF lst_cred_memo_dummy-pstyv IS NOT INITIAL.
        lst_sales_itm-item_categ = lst_cred_memo_dummy-pstyv.
        lst_sales_itmx-item_categ = abap_true.
      ENDIF. " IF lst_cred_memo_dummy-pstyv IS NOT INITIAL
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
      APPEND lst_sales_itm TO li_sales_itm.
      CLEAR lst_sales_itm.

      APPEND lst_sales_itmx TO li_sales_itmx.
      CLEAR lst_sales_itmx.

*====================================================================*
*  BAPI TEXT
*====================================================================*

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_cred_memo_dummy-posnr
        IMPORTING
          output = lst_sales_text-itm_number.

      lst_sales_text-text_id    = v_tdid.
      lst_sales_text-langu      = sy-langu.
      lst_sales_text-format_col = c_format.
      lst_sales_text-text_line  = lst_cred_memo_dummy-stxh.

      APPEND lst_sales_text TO li_sales_text.
      CLEAR  lst_sales_text.
*====================================================================*
* Sales condition
*====================================================================*
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_cred_memo_dummy-posnr
        IMPORTING
          output = lst_sales_cond-itm_number.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_cred_memo_dummy-posnr
        IMPORTING
          output = lst_sales_condx-itm_number.

      lst_sales_cond-cond_type    = lst_cred_memo_dummy-kschl.
      IF lst_sales_cond-cond_type IS NOT INITIAL.
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
*        lst_sales_condx-cond_type = abap_true.
        lst_sales_condx-cond_type  = lst_sales_cond-cond_type.
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
      ELSE. " ELSE -> IF lst_sales_cond-cond_type IS NOT INITIAL
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
*        lst_sales_condx-cond_type = abap_false.
        CLEAR lst_sales_condx-cond_type.
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
      ENDIF. " IF lst_sales_cond-cond_type IS NOT INITIAL

      READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
      WITH KEY kschl = lst_cred_memo_dummy-kschl
      BINARY SEARCH.
      IF sy-subrc IS INITIAL.
        IF <lfs_cond>-krech NE 'A'.
          lst_sales_cond-cond_value = lst_cred_memo_dummy-kbetr / 10.
        ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
          lst_sales_cond-cond_value = lst_cred_memo_dummy-kbetr.
        ENDIF. " IF <lfs_cond>-krech NE 'A'
      ENDIF. " IF sy-subrc IS INITIAL

*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
      READ TABLE li_konv INTO DATA(lst_konv)
      WITH KEY vbeln = lst_cred_memo_dummy-vbeln
               kposn = lst_cred_memo_dummy-posnr
               kschl = lst_cred_memo_dummy-kschl
               BINARY SEARCH.
      IF sy-subrc = 0.
        lst_sales_cond-cond_st_no = lst_konv-stunr.
        lst_sales_cond-cond_count = lst_konv-zaehk.
        lst_sales_condx-updateflag = c_u.
        CLEAR: lst_konv.
      ENDIF. " IF sy-subrc = 0

      IF lst_sales_cond-cond_st_no IS NOT INITIAL.
        lst_sales_condx-cond_st_no = lst_sales_cond-cond_st_no.
      ELSE. " ELSE -> IF lst_sales_cond-cond_st_no IS NOT INITIAL
*        lst_sales_condx-cond_st_no = abap_false.
        CLEAR lst_sales_condx-cond_st_no.
      ENDIF. " IF lst_sales_cond-cond_st_no IS NOT INITIAL

      IF lst_sales_cond-cond_count IS NOT INITIAL.
        lst_sales_condx-cond_count = lst_sales_cond-cond_count.
      ELSE. " ELSE -> IF lst_sales_cond-cond_count IS NOT INITIAL
*        lst_sales_condx-cond_count = abap_false.
        CLEAR lst_sales_condx-cond_count.
      ENDIF. " IF lst_sales_cond-cond_count IS NOT INITIAL
*** EOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL


      IF lst_sales_cond-cond_value IS NOT INITIAL.
        lst_sales_condx-cond_value = abap_true.
      ELSE. " ELSE -> IF lst_sales_cond-cond_value IS NOT INITIAL
        lst_sales_condx-cond_value = abap_false.
      ENDIF. " IF lst_sales_cond-cond_value IS NOT INITIAL

      APPEND lst_sales_cond TO li_sales_cond.
      CLEAR lst_sales_cond.

      APPEND lst_sales_condx TO li_sales_condx.
      CLEAR lst_sales_condx.

*====================================================================*
* Populate the Partner Changes
*====================================================================*
      lst_partner-document    = lv_salesdoc. " Document Number
      lst_partner-itm_number  = lst_cred_memo_dummy-posnr. " Item
      lst_partner-updateflag  = 'U'. " Update
      CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
        EXPORTING
          input  = lst_cred_memo_dummy-parvw
        IMPORTING
          output = lst_partner-partn_role. " Partner Role
      lst_partner-p_numb_new  = lst_cred_memo_dummy-partner. " Partner
      APPEND lst_partner TO li_partner.


    ENDIF. " IF ( lst_cred_memo_dummy-parvw EQ c_ag
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*    AT END OF customer.
    AT END OF vbeln.
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
      CALL FUNCTION 'SD_SALESDOCUMENT_CHANGE'
        EXPORTING
          salesdocument     = lv_salesdoc
          order_header_in   = lst_sales_hdr_in
          order_header_inx  = lst_sales_hdr_inx
        TABLES
          return            = li_return
          item_in           = li_sales_itm
          item_inx          = li_sales_itmx
          partnerchanges    = li_partner
          conditions_in     = li_sales_cond
          conditions_inx    = li_sales_condx
          sales_text        = li_sales_text
        EXCEPTIONS
          incov_not_in_item = 1
          OTHERS            = 2.
      IF NOT li_return IS INITIAL AND sy-subrc IS INITIAL.
        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc = 0.
          st_err_msg-wbeln = lst_cred_memo_dummy-vbeln.
          st_err_msg-posnr = lst_cred_memo_dummy-posnr.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.
          CLEAR: lst_return, st_err_msg.

*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

        ELSE. " ELSE -> IF sy-subrc = 0
          READ TABLE li_return INTO lst_return WITH KEY type = 'A'. " Return into lst_ of type
          IF sy-subrc = 0.
            st_err_msg-wbeln = lst_cred_memo_dummy-vbeln.
            st_err_msg-posnr = lst_cred_memo_dummy-posnr.
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return, st_err_msg.

*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
          ELSE. " ELSE -> IF sy-subrc = 0
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' .
            READ TABLE li_return
            INTO lst_return
            WITH KEY type = 'S'. " Return into lst_ of type
            IF sy-subrc IS INITIAL.
              st_err_msg-wbeln = lst_cred_memo_dummy-vbeln.
              st_err_msg-posnr = lst_cred_memo_dummy-posnr.
              st_err_msg-msgid = lst_return-id.
              st_err_msg-msgty = lst_return-type.
              st_err_msg-msgno = lst_return-number.
              st_err_msg-msgv1 = lst_return-message_v1.
              st_err_msg-msgv2 = lst_return-message_v2.
              st_err_msg-msgv3 = lst_return-message_v3.
              st_err_msg-msgv4 = lst_return-message_v4.
              APPEND st_err_msg TO i_err_msg.
              CLEAR: lst_return, st_err_msg.
            ENDIF. " IF sy-subrc IS INITIAL
          ENDIF. " IF sy-subrc = 0
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF NOT li_return IS INITIAL AND sy-subrc IS INITIAL
    ENDAT.
  ENDLOOP. " LOOP AT li_change_credit_memo_chg INTO DATA(lst_cred_memo)

***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  PERFORM f_send_email_move_file.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189

  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&-----------------------------------*
*&      Form  F_SCREEN_DYNAMICS_01
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_screen_dynamics_01 .
  IF rb_crea EQ c_x OR rb_cros EQ c_x.
    LOOP AT SCREEN.
      IF screen-group1 = c_z1.
        screen-input = '1'.
      ENDIF. " IF screen-group1 = c_z1

      IF screen-group1 = c_s1.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s1


      IF screen-group1 = c_s10.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s10

      IF screen-group1 = c_s11.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s11

      IF screen-group1 = c_s12.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s12

      IF screen-group1 = c_s13.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s13

      IF screen-group1 = c_s9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s9

      IF screen-group1 = c_s2.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s2

      IF screen-group1 = c_s3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s3

      IF screen-group1 = c_m3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m3

      IF screen-group1 = c_m5.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m5

      IF screen-group1 = c_m7.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m7

      IF screen-group1 = c_m9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m9

      MODIFY SCREEN.

    ENDLOOP. " LOOP AT SCREEN
*Begin of change by CHDAS: 08-Mar-2017:ED2K903417
*  ELSEIF rb_modi EQ c_x OR rb_crem EQ c_x OR rb_crcg EQ c_x.
  ELSEIF rb_modi EQ c_x.
*End of change by CHDAS: 08-Mar-2017:ED2K903417
    LOOP AT SCREEN.

      IF screen-group1 = c_s1.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s1

      IF screen-group1 = c_s2.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s2

      IF screen-group1 = c_s3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s3

      IF screen-group1 = c_s11.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s11

      IF screen-group1 = c_s12.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s12

      IF screen-group1 = c_s13.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s13

      IF screen-group1 = c_m3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m3

      IF screen-group1 = c_m5.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m5

      IF screen-group1 = c_m7.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m7

      MODIFY SCREEN.
    ENDLOOP. " LOOP AT SCREEN


    IF rb_sel_m EQ c_x.
      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input = '0'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s9.
          screen-input = screen-output = screen-active =   '1'.
        ENDIF. " IF screen-group1 = c_s9

        IF screen-group1 = c_s10.
          screen-input = screen-output = screen-active =   '1'.
*          screen-required = '2'.
        ENDIF. " IF screen-group1 = c_s10

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN

    ELSEIF rb_upd_m EQ c_x.
      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input = '1'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s9.
          screen-input = screen-output = screen-active = '0'.
        ENDIF. " IF screen-group1 = c_s9

        IF screen-group1 = c_s10.
          screen-input = screen-output = screen-active = '0'.
        ENDIF. " IF screen-group1 = c_s10

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN
    ENDIF. " IF rb_sel_m EQ c_x
*Begin of change by CHDAS: 08-Mar-2017:ED2K903417
  ELSEIF  rb_crem EQ c_x.

    LOOP AT SCREEN.
      IF screen-group1 = c_m3.
        screen-input = screen-active = screen-output = '1'.
      ENDIF. " IF screen-group1 = c_m3
      IF screen-group1 = c_m9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m9

      IF screen-group1 = c_m5.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m5

      IF screen-group1 = c_s2.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s2

      IF screen-group1 = c_s9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s9

      IF screen-group1 = c_s10.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s10

      IF screen-group1 = c_s12.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s12

      IF screen-group1 = c_s13.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s13

      IF screen-group1 = c_s3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s3

      IF screen-group1 = c_m7.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m7

      MODIFY SCREEN.
    ENDLOOP. " LOOP AT SCREEN

    IF rb_sel EQ c_x.
      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input = '0'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s1.
          screen-input = '1'.
        ENDIF. " IF screen-group1 = c_s1

        IF screen-group1 = c_s11.
          screen-input = screen-active = screen-output = '1'.
*          screen-required = '2'.                      "ERP7763 NPOLINA ED2K914078
        ENDIF. " IF screen-group1 = c_s11

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN

    ELSEIF rb_upd EQ c_x.

      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input  = '1'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s1.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s1


        IF screen-group1 = c_s10.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s10

        IF screen-group1 = c_s11.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s11

        IF screen-group1 = c_s12.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s12

        IF screen-group1 = c_s13.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s13

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN

    ENDIF. " IF rb_sel EQ c_x
  ELSEIF rb_crcg EQ c_x.

    LOOP AT SCREEN.
      IF screen-group1 = c_s1.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s1

      IF screen-group1 = c_m3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m3

      IF screen-group1 = c_m9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m9

      IF screen-group1 = c_s3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s3

      IF screen-group1 = c_s9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s9

      IF screen-group1 = c_s10.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s10

      IF screen-group1 = c_s11.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s11


      IF screen-group1 = c_s13.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s13

      IF screen-group1 = c_m7.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m7

      MODIFY SCREEN.
    ENDLOOP. " LOOP AT SCREEN

    IF rb_sel1 EQ c_x.
      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input = '0'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s2.
          screen-input = '1'.
        ENDIF. " IF screen-group1 = c_s2

        IF screen-group1 = c_s12.
          screen-input = screen-active = screen-output = '1'.
*          screen-required = '2'.
        ENDIF. " IF screen-group1 = c_s12

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN

    ELSEIF rb_upd1 EQ c_x.

      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input  = '1'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s2.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s2

        IF screen-group1 = c_s12.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s12

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN

    ENDIF. " IF rb_sel1 EQ c_x
*End of change by CHDAS: 08-Mar-2017:ED2K903417

* Begin by AMOHAMMED on 10/29/2020 TR # ED2K920134
  ELSEIF rb_dm_cr IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-group1 = c_z1.
        screen-input = '1'.
      ENDIF. " IF screen-group1 = c_z1

      IF screen-group1 = c_m9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m9

      IF screen-group1 = c_s9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s9

      IF screen-group1 = c_s10.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s10

      IF screen-group1 = c_s11.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s11

      IF screen-group1 = c_s12.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s12

      IF screen-group1 = c_s13.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s13

      IF screen-group1 = c_s1.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s1

      IF screen-group1 = c_s2.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s2

      IF screen-group1 = c_s3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s3

      IF screen-group1 = c_m3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m3

      IF screen-group1 = c_m5.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m5

      IF screen-group1 = c_m7.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m7

      MODIFY SCREEN.

    ENDLOOP. " LOOP AT SCREEN
* End by AMOHAMMED on 10/29/2020 TR # ED2K920134
  ELSEIF rb_or_ct IS NOT INITIAL.

    LOOP AT SCREEN.
      IF screen-group1 = c_z1.
        screen-input = '1'.
      ENDIF. " IF screen-group1 = c_z1

      IF screen-group1 = c_m9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m9

      IF screen-group1 = c_s9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s9

      IF screen-group1 = c_s10.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s10

      IF screen-group1 = c_s11.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s11

      IF screen-group1 = c_s12.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s12

      IF screen-group1 = c_s13.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s13

      IF screen-group1 = c_s1.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s1

      IF screen-group1 = c_s2.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s2

      IF screen-group1 = c_s3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s3

      IF screen-group1 = c_m3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m3

      IF screen-group1 = c_m5.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m5

      IF screen-group1 = c_m7.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m7

      MODIFY SCREEN.

    ENDLOOP. " LOOP AT SCREEN

  ELSEIF rb_or_cn IS NOT INITIAL.

    LOOP AT SCREEN.

      IF screen-group1 = c_z1.
        screen-input = '1'.
      ENDIF. " IF screen-group1 = c_z1

      IF screen-group1 = c_s1.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s1

      IF screen-group1 = c_m9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m9

      IF screen-group1 = c_s9.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s9

      IF screen-group1 = c_s10.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s10

      IF screen-group1 = c_s11.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s11

      IF screen-group1 = c_s12.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s12

      IF screen-group1 = c_s2.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s2

      IF screen-group1 = c_m3.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m3

      IF screen-group1 = c_m5.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_m5

      MODIFY SCREEN.
    ENDLOOP. " LOOP AT SCREEN

    IF rb_sel2 EQ c_x.
      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input = '0'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s3.
          screen-input = '1'.
        ENDIF. " IF screen-group1 = c_s3

        IF screen-group1 = c_s13.
          screen-input = screen-active = screen-output = '1'.
*          screen-required = '2'.
        ENDIF. " IF screen-group1 = c_s13

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN

    ELSEIF rb_upd2 EQ c_x.

      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input  = '1'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s3.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s3

        IF screen-group1 = c_s10.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s10

        IF screen-group1 = c_s11.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s11

        IF screen-group1 = c_s12.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s12

        IF screen-group1 = c_s13.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s13

        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN

    ENDIF. " IF rb_sel2 EQ c_x




  ENDIF. " IF rb_crea EQ c_x OR rb_cros EQ c_x

* SOC by NPOLINA ERP7763 ED2K914078
  IF rb_crem EQ c_x .
    LOOP AT SCREEN .
      IF rb_ord EQ c_x.
        IF screen-group1 = c_s99.
          screen-input = screen-active = screen-output =  '1'.
          IF screen-name = 'S_CVBELN-LOW' OR screen-name = 'S_CVBELN-HIGH'.
*            screen-required = '1'.
          ENDIF.
        ENDIF. " IF screen-group1 = c_s99

        IF screen-group1 = c_z1.
          screen-input = '0'.
        ENDIF. " IF screen-group1 = c_z1

        IF screen-group1 = c_s1 OR screen-group1 = c_s11.
          screen-input = screen-active = screen-output = '0'.
        ENDIF. " IF screen-group1 = c_s99
      ELSE.
        IF screen-group1 = c_s99.
          screen-input = screen-active = screen-output = screen-required = '0'.
        ENDIF. " IF screen-group1 = c_s99
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN .
      IF screen-group1 = c_s99.
        screen-input = screen-active = screen-output = '0'.
      ENDIF. " IF screen-group1 = c_s99
      MODIFY SCREEN.
    ENDLOOP.
  ENDIF.
* EOC by NPOLINA ERP7763 ED2K914078
ENDFORM.
*&-----------------------------------*
*&      Form  F_POP_RFBSK
*&-----------------------------------*
*       text
*-----------------------------------*
*      <-P_LIR_RFBSK  text
*-----------------------------------*
FORM f_pop_rfbsk  CHANGING fp_lir_rfbsk TYPE tt_rfbsk.
*----------------------------------*
*  Local Work-area
*----------------------------------*
  DATA: lst_rfbsk       TYPE ty_rfbsk.
*----------------------------------*
* Local Constant
*----------------------------------*
  CONSTANTS : lc_devid  TYPE zdevid     VALUE 'E101',   " Development ID
              lc_rfbsk  TYPE rvari_vnam VALUE 'RFBSK',  " ABAP: Name of Variant Variable
              lc_posted TYPE rvari_vnam VALUE 'POSTED', " ABAP: Name of Variant Variable
              lc_i      TYPE tvarv_sign VALUE 'I',      " ABAP: ID: I/E (include/exclude values)
              lc_eq     TYPE tvarv_opti VALUE 'EQ'.     " ABAP: Selection option (EQ/BT/CP/...)

  SELECT  devid ,          " Development ID
          param1,          " ABAP: Name of Variant Variable
          param2,          " ABAP: Name of Variant Variable
          srno,            " ABAP: Current selection number
          sign,            " ABAP: ID: I/E (include/exclude values)
          opti,            " ABAP: Selection option (EQ/BT/CP/...)
          low,             " Lower Value of Selection Condition
          high             " Upper Value of Selection Condition
          FROM zcaconstant " Wiley Application Constant Table
          INTO TABLE @DATA(li_constant)
          WHERE devid    EQ @lc_devid
          AND   param1   EQ @lc_rfbsk
          AND   param2   EQ @lc_posted
          AND   activate EQ @abap_true.
  IF sy-subrc IS INITIAL.

    LOOP AT li_constant INTO DATA(lst_constant).
      lst_rfbsk-sign    = lc_i.
      lst_rfbsk-option  = lc_eq.
      lst_rfbsk-low     = lst_constant-low.

      APPEND lst_rfbsk TO fp_lir_rfbsk.
      CLEAR  lst_rfbsk.
    ENDLOOP. " LOOP AT li_constant INTO DATA(lst_constant)
  ENDIF. " IF sy-subrc IS INITIAL


ENDFORM.
*&-----------------------------------*
*&      Form  F_MERGE_INTO_FINAL_ALV
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_CRED_MEMO  text
*      ->P_FP_IND  text
*-----------------------------------*
FORM f_merge_into_final_alv  USING    fp_i_cred_memo  TYPE tt_cred_memo
                             CHANGING fp_i_final_crdt TYPE tt_crdt_memo_enh.

*====================================================================*
*
*====================================================================*
  DATA: li_lines          TYPE STANDARD TABLE OF tline, " SAPscript: Text Lines
        lst_cre_cred_memo TYPE ty_crdt_memo_enh,
        lv_line           TYPE tdline,                  " Text Line
        lv_name           TYPE tdobname,                " Name
        lv_kunnr          TYPE kunnr.                   " Customer Number

  CONSTANTS:lc_posnr TYPE posnr VALUE '000000', " Item number of the SD document
            lc_auart TYPE auart VALUE 'ZCR'.    " Item number of the SD document
*====================================================================*
*
*====================================================================*

  LOOP AT fp_i_cred_memo INTO DATA(lst_cred_memo).

    IF  lst_cred_memo-parvw = c_ag.
      CLEAR lv_kunnr.
      lst_cre_cred_memo-customer  = lst_cred_memo-kunnr. " Customer Number
      lv_kunnr                    = lst_cred_memo-kunnr.
      lst_cre_cred_memo-parvw     = lst_cred_memo-parvw. " Partner Function
      lst_cre_cred_memo-vkorg     = lst_cred_memo-vkorg. " Sales Organization
      lst_cre_cred_memo-vtweg     = lst_cred_memo-vtweg. " Distribution Channel
      lst_cre_cred_memo-spart     = lst_cred_memo-spart. " Division
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_cre_cred_memo-vkbur     = lst_cred_memo-vkbur.
* SOC by NPOLINA DM1913(E209) ED2K915483
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_cre_cred_memo-vkbur
        IMPORTING
          output = lst_cre_cred_memo-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_cre_cred_memo-augru     = lst_cred_memo-augru. " Division
*** BOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
*      lst_cre_cred_memo-auart     = lc_auart. " Division
      lst_cre_cred_memo-auart    = lst_cred_memo-auart.
*** EOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_cre_cred_memo-xblnr     = lst_cred_memo-xblnr.
      lst_cre_cred_memo-zlsch     = lst_cred_memo-zlsch.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_cre_cred_memo-vbeln     = lst_cred_memo-vbeln. " Sales and Distribution Document Number
      lst_cre_cred_memo-posnr     = lc_posnr. " Item number of the SD document

      CLEAR  lv_name.
      lv_name =  lst_cred_memo-vbeln.

      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          client                  = sy-mandt
          id                      = v_tdid
          language                = sy-langu
          name                    = lv_name
          object                  = c_vbbk
        TABLES
          lines                   = li_lines
        EXCEPTIONS
          id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7.

      IF sy-subrc IS INITIAL.
        CLEAR lv_line.
        LOOP AT li_lines INTO DATA(lst_lines).

          CONCATENATE lv_line
                      lst_lines-tdline
                      INTO
                      lv_line.

        ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines)
        CONDENSE lv_line.
        lst_cre_cred_memo-stxh = lv_line.
      ENDIF. " IF sy-subrc IS INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_cre_cred_memo-kdkg3     = lst_cred_memo-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687
      lst_cre_cred_memo-bstnk = lst_cred_memo-bstkd.
      lst_cre_cred_memo-bsark = lst_cred_memo-bsark.
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687


      APPEND lst_cre_cred_memo TO fp_i_final_crdt.
      CLEAR  lst_cre_cred_memo.

    ELSEIF lst_cred_memo-parvw = c_we.

      IF lst_cred_memo-posnr IS NOT INITIAL.
        lst_cre_cred_memo-customer  = lv_kunnr. " Customer Number
        lst_cre_cred_memo-partner   = lst_cred_memo-kunnr.
        lst_cre_cred_memo-parvw     = lst_cred_memo-parvw. " Partner Function
        lst_cre_cred_memo-vkorg     = lst_cred_memo-vkorg. " Sales Organization
        lst_cre_cred_memo-vtweg     = lst_cred_memo-vtweg. " Distribution Channel
        lst_cre_cred_memo-spart     = lst_cred_memo-spart. " Division
        lst_cre_cred_memo-vbeln     = lst_cred_memo-vbeln. " Sales and Distribution Document Number
        lst_cre_cred_memo-posnr     = lst_cred_memo-posnr. " Item number of the SD document
        lst_cre_cred_memo-matnr     = lst_cred_memo-matnr. " Material Number
        lst_cre_cred_memo-fkimg     = lst_cred_memo-zmeng. " Target qty
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
        lst_cre_cred_memo-pstyv     = lst_cred_memo-pstyv. " Target qty
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition

        CLEAR  lv_name.
        CONCATENATE  lst_cred_memo-vbeln
                     lst_cred_memo-posnr
                     INTO
                     lv_name.

        CONDENSE lv_name NO-GAPS.

        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = v_tdid
            language                = sy-langu
            name                    = lv_name
            object                  = c_vbbp
          TABLES
            lines                   = li_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7.

        IF sy-subrc IS INITIAL.
          CLEAR lv_line.
          LOOP AT li_lines INTO DATA(lst_lines_item).
            CONCATENATE lv_line
                        lst_lines_item-tdline
                        INTO
                        lv_line.
          ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines_item)

          CONDENSE lv_line.

          lst_cre_cred_memo-stxh = lv_line.
        ENDIF. " IF sy-subrc IS INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_cre_cred_memo-kdkg3     = lst_cred_memo-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081

        APPEND lst_cre_cred_memo TO fp_i_final_crdt.
        CLEAR  lst_cre_cred_memo.
      ENDIF. " IF lst_cred_memo-posnr IS NOT INITIAL

    ENDIF. " IF lst_cred_memo-parvw = c_ag
  ENDLOOP. " LOOP AT fp_i_cred_memo INTO DATA(lst_cred_memo)

*** BOC BY SAYANDAS on 16-NOV-2017 for CMCG
*  SORT fp_i_final_crdt BY vbeln
*                          parvw." commented by SAYANDAS


  SORT fp_i_final_crdt BY vbeln posnr.


  DELETE ADJACENT DUPLICATES FROM fp_i_final_crdt
  COMPARING vbeln posnr.
*** EOC BY SAYANDAS on 16-NOV-2017 for CMCG

ENDFORM.
*&-----------------------------------*
*&      Form  F_CONVERT_CRDT_EXCEL
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_P_FILE  text
*      <-P_I_CRE_CRED_MEMO  text
*-----------------------------------*
FORM f_convert_crdt_excel  USING    fp_p_file          TYPE localfile " Local file for upload/download
                           CHANGING fp_i_final_crdt    TYPE tt_crdt_memo_enh.

  DATA : li_excel        TYPE STANDARD TABLE OF alsmex_tabline INITIAL SIZE 0, " Rows for Table with Excel Data
         lst_excel_dummy TYPE                   alsmex_tabline,                " Rows for Table with Excel Data
         lst_excel       TYPE                   alsmex_tabline,                " Rows for Table with Excel Data
         lst_cred_mem    TYPE                   ty_crdt_memo_enh.

  DATA: lv_fkimg TYPE char17. " Fkimg of type CHAR17
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  DATA: lv_begin_row TYPE I,
        lv_begin_col TYPE I,
        lv_end_row   TYPE I,
        lv_end_col   TYPE I.
  DATA: lvf_skip_row TYPE char1.

  PERFORM f_get_row_column CHANGING lv_begin_row
                                    lv_begin_col
                                    lv_end_row
                                    lv_end_col.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = fp_p_file
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      i_begin_col             = 1
*      i_begin_row             = 2
**     i_end_col               = 23
*      i_end_col               = 24   " NPOLINA ERP7763 ED2K913722
**     Begin of CHANGE:ERP-4080:WROY:29-AUG-2017:ED2K908224
**     i_end_row               = 1000
*      i_end_row               = 65000
**     End   of CHANGE:ERP-4080:WROY:29-AUG-2017:ED2K908224
      i_begin_col             = lv_begin_col
      i_begin_row             = lv_begin_row
      i_end_col               = lv_end_col
      i_end_row               = lv_end_row
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    TABLES
      intern                  = li_excel
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc EQ 0.
    IF NOT li_excel[] IS INITIAL.
      LOOP AT li_excel INTO lst_excel.
        lst_excel_dummy = lst_excel.
        IF lst_excel_dummy-value(1) EQ text-sqt.
          lst_excel_dummy-value(1) = space.
          SHIFT lst_excel_dummy-value LEFT DELETING LEADING space.
        ENDIF. " IF lst_excel_dummy-value(1) EQ text-sqt

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        AT NEW row.
          CLEAR lvf_skip_row.
*         If row starts with Order Identifier, Mandatory or Optional Skip the Row
          IF lst_excel_dummy-value IN ir_row_txt.
            lvf_skip_row = abap_true.
          ENDIF.
*         If using OLD template - Validate and display message
          IF lst_excel_dummy-row = 1 AND lvf_skip_row = abap_false.
            MESSAGE i000 WITH 'Please use the New Template'(164).
            LEAVE LIST-PROCESSING.
          ENDIF.
        ENDAT.
        IF lvf_skip_row  IS NOT INITIAL.
          CONTINUE.
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

        AT NEW col.

          CASE lst_excel_dummy-col.

            WHEN 1.
              IF NOT lst_cred_mem IS INITIAL.
                APPEND lst_cred_mem TO fp_i_final_crdt.
                CLEAR  lst_cred_mem.
              ENDIF. " IF NOT lst_cred_mem IS INITIAL

              IF lst_excel_dummy-value(10) IS NOT INITIAL.
                lst_cred_mem-customer = lst_excel_dummy-value(10).
                CLEAR lst_excel_dummy.
                IF lst_cred_mem-customer IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-customer
                    IMPORTING
                      output = lst_cred_mem-customer.
                ENDIF. " IF lst_cred_mem-customer IS NOT INITIAL
              ENDIF. " IF lst_excel_dummy-value(10) IS NOT INITIAL

            WHEN 2.
              lst_cred_mem-parvw  = lst_excel_dummy-value(2).
              IF lst_cred_mem-parvw IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-parvw
                  IMPORTING
                    output = lst_cred_mem-parvw.

                CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-parvw
                  IMPORTING
                    output = lst_cred_mem-parvw.

              ENDIF. " IF lst_cred_mem-parvw IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 3.
              IF lst_excel_dummy-value(10) IS NOT INITIAL.
                lst_cred_mem-partner = lst_excel_dummy-value(10).
                CLEAR lst_excel_dummy.
                IF lst_cred_mem-partner IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-partner
                    IMPORTING
                      output = lst_cred_mem-partner.
                ENDIF. " IF lst_cred_mem-partner IS NOT INITIAL
              ENDIF. " IF lst_excel_dummy-value(10) IS NOT INITIAL

            WHEN   4.

              lst_cred_mem-vkorg = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.

            WHEN  5.
              lst_cred_mem-vtweg = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.

            WHEN 6.
              lst_cred_mem-spart = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.

            WHEN 7.
              lst_cred_mem-auart = lst_excel_dummy-value(4).
              IF lst_cred_mem-auart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_AUART_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-auart
                  IMPORTING
                    output = lst_cred_mem-auart.

              ENDIF. " IF lst_cred_mem-auart IS NOT INITIAL
              CLEAR lst_excel_dummy.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            WHEN 8.
              lst_cred_mem-xblnr = lst_excel_dummy-value(16).
              CLEAR  lst_excel_dummy.

            WHEN 9.
              lst_cred_mem-zlsch =  lst_excel_dummy-value(1).
              CLEAR  lst_excel_dummy.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            WHEN 10  .
              lst_cred_mem-augru = lst_excel_dummy-value(3).

              CLEAR lst_excel_dummy.

            WHEN 11.
              lst_cred_mem-vbeln = lst_excel_dummy-value(10).
              IF lst_cred_mem-vbeln IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-vbeln
                  IMPORTING
                    output = lst_cred_mem-vbeln.

              ENDIF. " IF lst_cred_mem-vbeln IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 12.

              IF lst_excel_dummy-value(6) IS NOT INITIAL.
                WRITE lst_excel_dummy-value(6) TO lst_cred_mem-posnr.
*** BOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
                IF lst_cred_mem-posnr IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-posnr
                    IMPORTING
                      output = lst_cred_mem-posnr.
                ENDIF. " IF lst_cred_mem-posnr IS NOT INITIAL
*** EOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type

              ENDIF. " IF lst_excel_dummy-value(6) IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 13.
              IF lst_excel_dummy-value(18) IS NOT INITIAL.
                lst_cred_mem-matnr = lst_excel_dummy-value(18).

                IF lst_cred_mem-matnr IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-matnr
                    IMPORTING
                      output = lst_cred_mem-matnr.
                ENDIF. " IF lst_cred_mem-matnr IS NOT INITIAL
              ENDIF. " IF lst_excel_dummy-value(18) IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 14.               "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-plant = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.
            WHEN 15. "14.                NPOLINA ERP7763 ED2K913722

              CLEAR lv_fkimg.
              WRITE  lst_excel_dummy-value(13) TO lv_fkimg.
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_cred_mem-fkimg  = lv_fkimg.
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Quantity & is not in the correct format
                  MESSAGE i131(o3) WITH lst_excel_dummy-value. " Quantity & is not in the correct format
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.
            WHEN 16. "15.                NPOLINA ERP7763 ED2K913722
              lst_cred_mem-stxh = lst_excel_dummy-value(50).

            WHEN 17. "16.                NPOLINA ERP7763 ED2K913722
              lst_cred_mem-kschl = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.

            WHEN 18. "17.                NPOLINA ERP7763 ED2K913722
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_cred_mem-kbetr = lst_excel_dummy-value(11).
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Amount & format is incorrect
                  MESSAGE i406(aw) WITH lst_excel_dummy-value. " Amount & format is incorrect
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.

            WHEN 19. "18.                NPOLINA ERP7763 ED2K913722
              lst_cred_mem-ihrez = lst_excel_dummy-value(12).

              CLEAR lst_excel_dummy.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            WHEN 20. "19.                NPOLINA ERP7763 ED2K913722
              lst_cred_mem-kdkg3 = lst_excel_dummy-value(2).

              CLEAR lst_excel_dummy.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*            WHEN 20.
*              lst_cred_mem-srid = lst_excel_dummy-value(12).
*              CLEAR lst_excel_dummy.
            WHEN 21. "20.                NPOLINA ERP7763 ED2K913722
              lst_cred_mem-vkbur = lst_excel_dummy-value(4).
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_cred_mem-vkbur
                IMPORTING
                  output = lst_cred_mem-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* BOC by SAYANDAS on 07-Aug-2017 for ERP-3687

            WHEN 22. "21.                NPOLINA ERP7763 ED2K913722
              lst_cred_mem-bstnk = lst_excel_dummy-value(20).
              IF lst_cred_mem-bstnk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-bstnk
                  IMPORTING
                    output = lst_cred_mem-bstnk.
              ENDIF. " IF lst_cred_mem-bstnk IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 23. "22.                NPOLINA ERP7763 ED2K913722
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*              lst_cred_mem-bsark = lst_excel_dummy-value(20).
              lst_cred_mem-bsark = lst_excel_dummy-value(4).
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_cred_mem-bsark
                IMPORTING
                  output = lst_cred_mem-bsark.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.
* EOC by SAYANDAS on 07-Aug-2017 for ERP-3687
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
            WHEN 24. "23.                NPOLINA ERP7763 ED2K913722
              lst_cred_mem-pstyv = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.
*** EOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition

          ENDCASE.
        ENDAT.
      ENDLOOP. " LOOP AT li_excel INTO lst_excel

* For last row population
      APPEND lst_cred_mem TO fp_i_final_crdt.
      CLEAR  lst_cred_mem.
    ENDIF. " IF NOT li_excel[] IS INITIAL
  ENDIF. " IF sy-subrc EQ 0

ENDFORM.
*&-----------------------------------*
*&      Form  F_MOVE_INV_TO_FINAL_ALV
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_VBRK  text
*      ->P_I_KONV  text
*      ->P_I_VBPA  text
*      ->P_FP_IND  text
*      <-P_FP_FINAL_CRDT  text
*-----------------------------------*
FORM f_move_inv_to_final_alv  USING    fp_i_vbrk       TYPE tt_vbrk
                              CHANGING fp_i_final_crdt TYPE tt_crdt_memo_enh.

*====================================================================*
*
*====================================================================*
  DATA: li_lines          TYPE STANDARD TABLE OF tline, " SAPscript: Text Lines
        lst_cre_cred_memo TYPE ty_crdt_memo_enh,
        lv_line           TYPE tdline,                  " Text Line
        lv_name           TYPE tdobname,                " Name
        lv_kunnr          TYPE kunnr.                   " Customer Number
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
  DATA: lv_index           TYPE syindex. " Loop Index
*** EOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL

  CONSTANTS:lc_posnr TYPE posnr VALUE '000000', " Item number of the SD document
            lc_auart TYPE auart VALUE 'ZCR'.    " Item number of the SD document
*====================================================================*
*
*====================================================================*

  LOOP AT fp_i_vbrk INTO DATA(lst_vbrk).
    IF  lst_vbrk-parvw = c_ag.
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
      IF lst_vbrk-posnr = lst_vbrk-pospa.

*** EOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
        CLEAR lv_kunnr.
        lst_cre_cred_memo-customer  = lst_vbrk-kunnr. " Customer Number
        lv_kunnr                    = lst_vbrk-kunnr.
        lst_cre_cred_memo-parvw     = lst_vbrk-parvw. " Partner Function
        lst_cre_cred_memo-vkorg     = lst_vbrk-vkorg. " Sales Organization
        lst_cre_cred_memo-vtweg     = lst_vbrk-vtweg. " Distribution Channel
        lst_cre_cred_memo-spart     = lst_vbrk-spart. " Division
        lst_cre_cred_memo-auart     = lc_auart. " Division
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_cre_cred_memo-zlsch     = lst_vbrk-zlsch.
        lst_cre_cred_memo-xblnr     = lst_vbrk-xblnr.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_cre_cred_memo-vbeln     = lst_vbrk-vbeln. " Sales and Distribution Document Number
        lst_cre_cred_memo-posnr     = lc_posnr. " Item number of the SD document

        CLEAR  lv_name.
        lv_name =  lst_vbrk-vbeln.

        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = v_tdid
            language                = sy-langu
            name                    = lv_name
            object                  = c_vbbk
          TABLES
            lines                   = li_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7.

        IF sy-subrc IS INITIAL.
          CLEAR lv_line.
          LOOP AT li_lines INTO DATA(lst_lines).

            CONCATENATE lv_line
                        lst_lines-tdline
                        INTO
                        lv_line.

          ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines)
          CONDENSE lv_line.
          lst_cre_cred_memo-stxh = lv_line.
        ENDIF. " IF sy-subrc IS INITIAL
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
      ELSE. " ELSE -> IF lst_vbrk-posnr = lst_vbrk-pospa
*     lv_index = sy-tabix.
        IF lst_vbrk-posnr IS NOT INITIAL.
          lst_cre_cred_memo-customer  = lv_kunnr. " Customer Number
*        lst_cre_cred_memo-partner   = lst_vbrk-kunnr.
*        lst_cre_cred_memo-parvw     = lst_vbrk-parvw. " Partner Function
          READ TABLE fp_i_vbrk INTO DATA(lst_vbrk1)
          WITH KEY vbeln = lst_vbrk-vbeln
                   posnr = lst_vbrk-pospa
                   parvw = c_we.
          IF sy-subrc = 0.
            lst_cre_cred_memo-partner   = lst_vbrk1-kunnr.
            lst_cre_cred_memo-parvw     = lst_vbrk1-parvw. " Partner Function
          ENDIF. " IF sy-subrc = 0
          lst_cre_cred_memo-vkorg     = lst_vbrk-vkorg. " Sales Organization
          lst_cre_cred_memo-vtweg     = lst_vbrk-vtweg. " Distribution Channel
          lst_cre_cred_memo-spart     = lst_vbrk-spart. " Division
          lst_cre_cred_memo-vbeln     = lst_vbrk-vbeln. " Sales and Distribution Document Number
          lst_cre_cred_memo-posnr     = lst_vbrk-posnr. " Item number of the SD document
          lst_cre_cred_memo-matnr     = lst_vbrk-matnr. " Material Number
          lst_cre_cred_memo-fkimg     = lst_vbrk-fkimg. " Target qty
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
          lst_cre_cred_memo-pstyv     = lst_vbrk-pstyv.
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition


          CLEAR  lv_name.
          CONCATENATE  lst_vbrk-vbeln
                       lst_vbrk-posnr
                       INTO
                       lv_name.

          CONDENSE lv_name NO-GAPS.

          CALL FUNCTION 'READ_TEXT'
            EXPORTING
              client                  = sy-mandt
              id                      = v_tdid
              language                = sy-langu
              name                    = lv_name
              object                  = c_vbbp
            TABLES
              lines                   = li_lines
            EXCEPTIONS
              id                      = 1
              language                = 2
              name                    = 3
              not_found               = 4
              object                  = 5
              reference_check         = 6
              wrong_access_to_archive = 7.

          IF sy-subrc IS INITIAL.
            CLEAR lv_line.
            LOOP AT li_lines INTO DATA(lst_lines_item1).
              CONCATENATE lv_line
                          lst_lines_item1-tdline
                          INTO
                          lv_line.
            ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines_item1)

            CONDENSE lv_line.
            lst_cre_cred_memo-stxh = lv_line.
          ENDIF. " IF sy-subrc IS INITIAL
        ENDIF. " IF lst_vbrk-posnr IS NOT INITIAL
      ENDIF. " IF lst_vbrk-posnr = lst_vbrk-pospa
*** EOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
      APPEND lst_cre_cred_memo TO fp_i_final_crdt.
      CLEAR  lst_cre_cred_memo.

    ELSEIF lst_vbrk-parvw = c_we.

      IF lst_vbrk-posnr IS NOT INITIAL.
*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
        IF lv_kunnr IS NOT INITIAL.
          lst_cre_cred_memo-customer  = lv_kunnr. " Customer Number
        ELSE. " ELSE -> IF lv_kunnr IS NOT INITIAL
          READ TABLE fp_i_vbrk INTO DATA(lst_vbrk2)
          WITH KEY vbeln = lst_vbrk-vbeln
                   posnr = lst_vbrk-posnr
                   parvw = c_ag.
          IF sy-subrc = 0.
            lst_cre_cred_memo-customer = lst_vbrk2-kunnr.
          ENDIF. " IF sy-subrc = 0
        ENDIF. " IF lv_kunnr IS NOT INITIAL


*** BOC BY SAYANDAS on 18-Dec-2017 for Multiple KSCHL
        lst_cre_cred_memo-partner   = lst_vbrk-kunnr.
        lst_cre_cred_memo-parvw     = lst_vbrk-parvw. " Partner Function
        lst_cre_cred_memo-vkorg     = lst_vbrk-vkorg. " Sales Organization
        lst_cre_cred_memo-vtweg     = lst_vbrk-vtweg. " Distribution Channel
        lst_cre_cred_memo-spart     = lst_vbrk-spart. " Division
        lst_cre_cred_memo-vbeln     = lst_vbrk-vbeln. " Sales and Distribution Document Number
        lst_cre_cred_memo-posnr     = lst_vbrk-posnr. " Item number of the SD document
        lst_cre_cred_memo-matnr     = lst_vbrk-matnr. " Material Number
        lst_cre_cred_memo-fkimg     = lst_vbrk-fkimg. " Target qty
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition
        lst_cre_cred_memo-pstyv     = lst_vbrk-pstyv.
*** BOC BY SAYANDAS on 30-Nov-2017 for Credit Memo PSTYV Addition


        CLEAR  lv_name.
        CONCATENATE  lst_vbrk-vbeln
                     lst_vbrk-posnr
                     INTO
                     lv_name.

        CONDENSE lv_name NO-GAPS.

        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = v_tdid
            language                = sy-langu
            name                    = lv_name
            object                  = c_vbbp
          TABLES
            lines                   = li_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7.

        IF sy-subrc IS INITIAL.
          CLEAR lv_line.
          LOOP AT li_lines INTO DATA(lst_lines_item).
            CONCATENATE lv_line
                        lst_lines_item-tdline
                        INTO
                        lv_line.
          ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines_item)

          CONDENSE lv_line.
          lst_cre_cred_memo-stxh = lv_line.
        ENDIF. " IF sy-subrc IS INITIAL

        APPEND lst_cre_cred_memo TO fp_i_final_crdt.
        CLEAR  lst_cre_cred_memo.
      ENDIF. " IF lst_vbrk-posnr IS NOT INITIAL

    ENDIF. " IF lst_vbrk-parvw = c_ag
  ENDLOOP. " LOOP AT fp_i_vbrk INTO DATA(lst_vbrk)



*  SORT fp_i_final_crdt BY customer
*                     parvw
*                     vbeln
*                     posnr.

  SORT fp_i_final_crdt BY vbeln
                          posnr.

*  DELETE ADJACENT DUPLICATES FROM fp_i_final_crdt
*  COMPARING customer
*            parvw
*            vbeln
*            posnr.

  DELETE ADJACENT DUPLICATES FROM fp_i_final_crdt
    COMPARING vbeln
              posnr.

ENDFORM.
*&-----------------------------------*
*&      Form  F_GET_NORMAL_ORDER
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_get_normal_order .
  CONSTANTS: lc_field  TYPE dfies-fieldname       VALUE 'VBELN', " Field Name
             lc_selopt TYPE help_info-dynprofld VALUE 'S_ORDER', " Field name
             lc_s      TYPE ddbool_d            VALUE 'S'.       " DD: truth value
  CLEAR i_vbeln.

  SELECT DISTINCT vbeln
                  INTO TABLE i_vbeln
                  FROM vbak " Sales Document: Header Data
                  WHERE auart EQ c_zor
                  AND erdat   IN s_ord_dt
                  AND vbeln   IS NOT NULL.

  IF sy-subrc IS INITIAL.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = lc_field  "'VBELN'
        dynpprog        = sy-cprog
        dynpnr          = sy-dynnr
        dynprofield     = lc_selopt "'S_CMR'
        window_title    = text-049  "'Existing Credit Memo'
        value_org       = lc_s      "'S'
      TABLES
        value_tab       = i_vbeln
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF. " IF sy-subrc <> 0
  ENDIF. " IF sy-subrc IS INITIAL
ENDFORM.
*-----------------------------------*
*      Form  F_GET_SUBS_ORDER
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_get_subs_order .
  CONSTANTS: lc_field  TYPE dfies-fieldname     VALUE 'VBELN',   " Field Name
             lc_selopt TYPE help_info-dynprofld VALUE 'S_VBELN', " Field name
             lc_s      TYPE ddbool_d            VALUE 'S'.       " DD: truth value

  CLEAR i_vbeln.

  SELECT DISTINCT vbeln
                  INTO TABLE i_vbeln
                  FROM vbak " Sales Document: Header Data
                  WHERE ( auart EQ c_sub
                  OR      auart EQ c_rew
* Begin of Change INC0211601:20/09/2018:RBTIRUMALA:ED2K913481
                  OR      auart EQ c_zofl
* End of Change INC0211601:20/09/2018:RBTIRUMALA:ED2K913481
* Begin of Change INC0363877:06/03/2021:ARGADEELA:ED1K913075
                  OR      auart EQ c_zcop )
* End of Change INC0363877:06/03/2021:ARGADEELA:ED1K913075
                  AND     erdat IN s_date
                  AND     vbeln IS NOT NULL.

  IF sy-subrc IS INITIAL.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = lc_field  "'VBELN'
        dynpprog        = sy-cprog
        dynpnr          = sy-dynnr
        dynprofield     = lc_selopt "'S_VBELN'
        window_title    = text-059  "'Existing Subscription Order'
        value_org       = lc_s      "'S'
      TABLES
        value_tab       = i_vbeln
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF. " IF sy-subrc <> 0
  ENDIF. " IF sy-subrc IS INITIAL
ENDFORM.
*&-----------------------------------*
*&      Form  F_POP_ORD_FINAL
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_C_ZOR  text
*      <-P_I_FINAL_ORDER  text
*-----------------------------------*
FORM f_pop_ord_final.

  DATA : lc_posnr      TYPE posnr  VALUE '000000'. " Item number of the SD document

  DATA : lst_orders TYPE ty_ord_select.

*  SELECT   a~vbeln,
*           a~erdat,
*           a~auart,
*           a~augru,
*           a~vkorg,
*           a~vtweg,
*           a~spart,
**   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*           a~vkbur,
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*           a~guebg,
*           a~gueen,
*           a~lifsk,
*           a~faksk,
*           a~knumv,
*           a~bstnk,
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           a~xblnr,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           a~zzpromo,
*           b~posnr,
*           b~matnr,
*           b~kwmeng, " Target quantity in sales units
*           b~pstyv,
*           b~abgru,
*           c~parvw,  " Partner Function
*           c~kunnr,  " Customer Number
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~zlsch,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~ihrez,
*           d~ihrez_e,
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~kdkg3,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~kdkg4,
*           d~kdkg5 " Customer condition group 5
*          INTO TABLE @i_orders
*          FROM vbak AS a
**          LEFT OUTER JOIN vbap AS b
*          INNER JOIN vbap AS b
*          ON     ( a~vbeln EQ b~vbeln )
**          LEFT OUTER JOIN vbpa AS c
*          INNER JOIN vbpa AS c
*          ON     ( a~vbeln EQ c~vbeln
*          AND    ( b~posnr EQ c~posnr OR c~posnr EQ @lc_posnr ) )
**          LEFT OUTER JOIN vbkd AS d
*          INNER JOIN vbkd AS d
*          ON     ( a~vbeln EQ d~vbeln
*          AND    ( b~posnr EQ d~posnr OR d~posnr EQ @lc_posnr ) )
*          WHERE   a~erdat   IN @s_ord_dt
*          AND     a~vbeln   IN @s_order
*          AND     a~bstnk   IN @s_bstnk2
*          AND     a~zzpromo IN @s_promo1
*          AND     b~matnr   IN @s_matnr1
*          AND     a~ernam   IN @s_user1
*          AND     c~parvw   IN @i_vbpa.
*--------------------------------------------
  SELECT   a~vbeln,
           a~erdat,
           a~auart,
           a~augru,
           a~lifsk,
           a~faksk,
           a~vkorg,
           a~vtweg,
           a~spart,
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
           a~vkbur,
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
           a~guebg,
           a~gueen,
           a~knumv,
           a~bstnk,
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
           a~xblnr,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
           a~zzpromo,
           b~posnr,
           b~matnr,
           b~pstyv,
           b~abgru,
           b~kwmeng, " Target quantity in sales units
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
           b~werks,  " Plant (Own or External)
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
           c~posnr AS line_num,
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
           c~parvw, " Partner Function
           c~kunnr  " Customer Number
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~zlsch,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~ihrez,
*           d~ihrez_e,
**   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~kdkg3,
**   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*           d~kdkg4,
*           d~kdkg5 " Customer condition group 5
          INTO TABLE @DATA(li_orders_temp)
          FROM vbak AS a
*          LEFT OUTER JOIN vbap AS b
          INNER JOIN vbap AS b
          ON     ( a~vbeln EQ b~vbeln )
*          LEFT OUTER JOIN vbpa AS c
          INNER JOIN vbpa AS c
          ON     ( b~vbeln EQ c~vbeln
          AND    ( b~posnr EQ c~posnr OR c~posnr EQ @lc_posnr ) )
**          LEFT OUTER JOIN vbkd AS d
*          INNER JOIN vbkd AS d
*          ON     ( a~vbeln EQ d~vbeln
*          AND    ( b~posnr EQ d~posnr OR d~posnr EQ @lc_posnr ) )
          WHERE   a~erdat   IN @s_ord_dt
          AND     a~vbeln   IN @s_order
          AND     a~bstnk   IN @s_bstnk2
          AND     a~zzpromo IN @s_promo1
          AND     b~matnr   IN @s_matnr1
          AND     a~ernam   IN @s_user1
          AND     c~parvw   IN @i_vbpa.

  IF sy-subrc = 0 AND li_orders_temp IS NOT INITIAL.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
    SORT li_orders_temp BY vbeln posnr parvw line_num.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157

    SELECT vbeln,
           posnr,
           zlsch,
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926
           fkdat,
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926
           ihrez,
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
           bsark,
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
           ihrez_e,
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
           kdkg2,
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
           kdkg3,
           kdkg4,
           kdkg5 " Customer condition group 5
      INTO TABLE @DATA(li_vbkd)
      FROM vbkd  " Sales Document: Business Data
      FOR ALL ENTRIES IN @li_orders_temp
      WHERE vbeln = @li_orders_temp-vbeln
      AND  ( posnr = @li_orders_temp-posnr
          OR posnr = @lc_posnr ).

    IF sy-subrc = 0.
      SORT li_vbkd BY vbeln posnr.
    ENDIF. " IF sy-subrc = 0

    DATA : lst_vbkd        LIKE LINE OF li_vbkd,
           lst_orders_temp LIKE LINE OF li_orders_temp.

*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
    DATA(li_orders_temp_copy) = li_orders_temp.
    DATA: lst_orders_temp_copy LIKE LINE OF li_orders_temp.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157

    LOOP AT li_orders_temp INTO lst_orders_temp.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
      IF lst_orders_temp-parvw = c_we.
        DATA(lv_tabix) = sy-tabix.
        lv_tabix = lv_tabix + 1.
        READ TABLE li_orders_temp_copy INTO lst_orders_temp_copy INDEX lv_tabix.
        IF sy-subrc = 0.
          IF ( lst_orders_temp-vbeln = lst_orders_temp_copy-vbeln )
          AND ( lst_orders_temp-posnr = lst_orders_temp_copy-posnr )
          AND ( lst_orders_temp-parvw = lst_orders_temp_copy-parvw )
          AND ( lst_orders_temp-line_num NE lst_orders_temp_copy-line_num )
          AND   lst_orders_temp_copy-line_num NE lc_posnr.
            CONTINUE.
          ENDIF. " IF ( lst_orders_temp-vbeln = lst_orders_temp_copy-vbeln )
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF lst_orders_temp-parvw = c_we
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
      lst_orders-vbeln = lst_orders_temp-vbeln.
      lst_orders-erdat = lst_orders_temp-erdat.
      lst_orders-auart = lst_orders_temp-auart.
      lst_orders-augru = lst_orders_temp-augru.
      lst_orders-lifsk = lst_orders_temp-lifsk.
      lst_orders-faksk = lst_orders_temp-faksk.
      lst_orders-vkorg = lst_orders_temp-vkorg.
      lst_orders-vtweg = lst_orders_temp-vtweg.
      lst_orders-spart = lst_orders_temp-spart.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_orders-vkbur = lst_orders_temp-vkbur.


* SOC by NPOLINA DM1913(E209) ED2K915483
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_orders-vkbur
        IMPORTING
          output = lst_orders-vkbur.   "NPOLINA ED2K915947
* EOC by NPOLINA DM1913(E209) ED2K915483
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_orders-guebg = lst_orders_temp-guebg.
      lst_orders-gueen = lst_orders_temp-gueen.
      lst_orders-knumv = lst_orders_temp-knumv.
      lst_orders-bstnk = lst_orders_temp-bstnk.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_orders-xblnr = lst_orders_temp-xblnr.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_orders-zzpromo = lst_orders_temp-zzpromo.
      lst_orders-posnr = lst_orders_temp-posnr.
      lst_orders-matnr = lst_orders_temp-matnr.
      lst_orders-pstyv = lst_orders_temp-pstyv.
      lst_orders-abgru = lst_orders_temp-abgru.
      lst_orders-kwmeng = lst_orders_temp-kwmeng. " Target quantity in sales units
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_orders-werks  = lst_orders_temp-werks.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*           WRITE lst_orders_temp-kwmeng TO lst_orders-zmeng.
*           lst_orders-zmeng = lst_orders_temp-zmeng.
      lst_orders-parvw = lst_orders_temp-parvw. " Partner Function
      lst_orders-kunnr = lst_orders_temp-kunnr. " Customer Number

      READ TABLE li_vbkd INTO lst_vbkd WITH KEY vbeln = lst_orders_temp-vbeln
                                                posnr = lst_orders_temp-posnr
                                                BINARY SEARCH.
      IF sy-subrc = 0.

        lst_orders-zlsch = lst_vbkd-zlsch.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926
        lst_orders-fkdat = lst_vbkd-fkdat.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926
        lst_orders-ihrez = lst_vbkd-ihrez.
        lst_orders-ihrez_e = lst_vbkd-ihrez_e.
        lst_orders-kdkg3 = lst_vbkd-kdkg3.
        lst_orders-kdkg4 = lst_vbkd-kdkg4.
        lst_orders-kdkg5 = lst_vbkd-kdkg5.
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
        lst_orders-kdkg2 = lst_vbkd-kdkg2.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
        lst_orders-bsark = lst_vbkd-bsark.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *

      ENDIF. " IF sy-subrc = 0

      APPEND lst_orders TO i_orders.
      CLEAR : lst_orders , lst_vbkd, lst_orders_temp.
    ENDLOOP. " LOOP AT li_orders_temp INTO lst_orders_temp
  ENDIF. " IF sy-subrc = 0 AND li_orders_temp IS NOT INITIAL
*--------------------------------------------

*  IF sy-subrc IS INITIAL.
  IF i_orders IS NOT INITIAL.

*    SORT: i_orders    BY vbeln
*                         posnr
*                         kunnr
*                         parvw.

    SORT: i_orders    BY vbeln
                         posnr
                         parvw
                         kunnr.

    PERFORM f_move_to_ord_alv USING    i_orders
                              CHANGING i_ord_alv.
  ENDIF. " IF i_orders IS NOT INITIAL




ENDFORM.
*&-----------------------------------*
*&      Form  F_CONVERT_ORD_EXCEL
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_P_FILE  text
*-----------------------------------*
FORM f_convert_ord_excel  USING    fp_p_file TYPE localfile. " Local file for upload/download

  DATA : li_excel        TYPE STANDARD TABLE OF alsmex_tabline  " Rows for Table with Excel Data
                         INITIAL SIZE 0,                        " Rows for Table with Excel Data
         lst_excel_dummy TYPE                   alsmex_tabline, " Rows for Table with Excel Data
         lst_excel       TYPE                   alsmex_tabline, " Rows for Table with Excel Data
         lst_final_ord   TYPE ty_excel_ord_enhanced.

  DATA: lv_zmeng TYPE char17. " Zmeng of type CHAR17
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  DATA: lv_begin_row TYPE I,
        lv_begin_col TYPE I,
        lv_end_row   TYPE I,
        lv_end_col   TYPE I.
  DATA: lv_index     TYPE sy-tabix,
        lv_identifier(10) TYPE n.         " Order Identifier
  DATA: lv_convert_parvw TYPE char1,
        lv_parvw         TYPE parvw.
  DATA: lv_oid(10)   TYPE n,
        lv_item      TYPE posnr,
        lv_log       TYPE balognr,
        lv_loghandle TYPE balloghndl,
        lv_msg       TYPE char100,
        lv_msgty     TYPE char1,
        lvf_skip_row TYPE char1.

  STATICS: lv_ord_status   TYPE c.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  " 09/29/2020
  DATA : lv_ordertype TYPE auart.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_get_row_column CHANGING lv_begin_row
                                    lv_begin_col
                                    lv_end_row
                                    lv_end_col.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = fp_p_file
      i_begin_col             = lv_begin_col "1      "OTCM-47267
      i_begin_row             = lv_begin_row "2      "OTCM-47267
*     i_end_col               = 31
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
*     i_end_col               = 32  " NPOLINA ERP7763 ED2K913722
*     i_end_col               = 33
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
      i_end_col               = lv_end_col   "34     "OTCM-47267
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
*     Begin of CHANGE:ERP-4080:WROY:29-AUG-2017:ED2K908224
*     i_end_row               = 1000
      i_end_row               = lv_end_row   "65000  "OTCM-47267
*     End   of CHANGE:ERP-4080:WROY:29-AUG-2017:ED2K908224
    TABLES
      intern                  = li_excel
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc EQ 0.
*    *************NOW FILL DATA FROM EXCEL INTO FINAL LEGACY DATA ITAB--***************
    IF NOT li_excel[] IS INITIAL.
      CLEAR lst_final_ord.
      LOOP AT li_excel INTO lst_excel.
        lst_excel_dummy = lst_excel.
        IF lst_excel_dummy-value(1) EQ text-sqt.
          lst_excel_dummy-value(1) = space.
          SHIFT lst_excel_dummy-value LEFT DELETING LEADING space.
        ENDIF. " IF lst_excel_dummy-value(1) EQ text-sqt

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        AT NEW row.
          CLEAR lvf_skip_row.
*         If row starts with Order Identifier, Mandatory or Optional Skip the Row
          IF lst_excel_dummy-value IN ir_row_txt.
            lvf_skip_row = abap_true.
          ENDIF.
*         If using OLD template - Validate and display message
          IF lst_excel_dummy-row = 1 AND lvf_skip_row = abap_false.
            MESSAGE i000 WITH 'Please use the New Template'(164).
            LEAVE LIST-PROCESSING.
          ENDIF.
        ENDAT.
        IF lvf_skip_row  IS NOT INITIAL.
          CONTINUE.
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

        AT NEW col.

          CASE lst_excel_dummy-col.
            WHEN 1.                " NPALLA OTCM-47267
              IF NOT lst_final_ord IS INITIAL.
                APPEND lst_final_ord TO i_final_ord.
                CLEAR lst_final_ord.
              ENDIF. " IF NOT lst_final_ord IS INITIAL

              IF lst_excel_dummy-value IS NOT INITIAL.
                " Process only with Numeric value for Identifier
                FIND REGEX '[[:digit:]]' IN lst_excel_dummy-value.
                IF sy-subrc NE 0.
                  MESSAGE s600(zqtc_r2) DISPLAY LIKE c_errtype.
                  LEAVE LIST-PROCESSING.
                ENDIF.
                lst_final_ord-identifier = lst_excel_dummy-value(10).
              ELSE.
                MESSAGE s593(zqtc_r2) DISPLAY LIKE c_errtype.
                LEAVE LIST-PROCESSING.
              ENDIF.
              CONDENSE lst_final_ord-identifier.
              CLEAR lst_excel_dummy.

            WHEN 2. "1.            " NPALLA OTCM-47267
              lst_final_ord-customer = lst_excel_dummy-value(10).
              CLEAR lst_excel_dummy.
            WHEN 3. "2.            " NPALLA OTCM-47267
              lst_final_ord-parvw = lst_excel_dummy-value(2).

*              IF lst_final_ord-parvw IS NOT INITIAL.
*                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*                  EXPORTING
*                    input  = lst_final_ord-parvw
*                  IMPORTING
*                    output = lst_final_ord-parvw.
*              ENDIF. " IF lst_final_ord-parvw IS NOT INITIAL
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
              IF lv_convert_parvw IS INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
                  EXPORTING
                    input  = lst_final_ord-parvw
                  IMPORTING
                    output = lv_parvw.
                IF lst_final_ord-parvw = lv_parvw.
                  lv_convert_parvw = 'N'.
                ELSE.
                  lv_convert_parvw = 'Y'.
                ENDIF.
              ENDIF.
              IF lst_final_ord-parvw IS NOT INITIAL AND lv_convert_parvw = 'Y'.
                CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
                  EXPORTING
                    input  = lst_final_ord-parvw
                  IMPORTING
                    output = lst_final_ord-parvw.
              ENDIF. " IF lst_final-parvw IS NOT INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

            WHEN 4. "3.            " NPALLA OTCM-47267

              lst_final_ord-partner = lst_excel_dummy-value(10).

              IF lst_final_ord-partner IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-partner
                  IMPORTING
                    output = lst_final_ord-partner.
              ENDIF. " IF lst_final_ord-partner IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 5. "4.            " NPALLA OTCM-47267

              lst_final_ord-vkorg = lst_excel_dummy-value(4).

              IF lst_final_ord-vkorg IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-vkorg
                  IMPORTING
                    output = lst_final_ord-vkorg.
              ENDIF. " IF lst_final_ord-vkorg IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 6. "5.            " NPALLA OTCM-47267
              lst_final_ord-vtweg = lst_excel_dummy-value(2).
              IF lst_final_ord-vtweg IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-vtweg
                  IMPORTING
                    output = lst_final_ord-vtweg.
              ENDIF. " IF lst_final_ord-vtweg IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 7. "6.            " NPALLA OTCM-47267
              lst_final_ord-spart = lst_excel_dummy-value(2).
              IF lst_final_ord-spart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-spart
                  IMPORTING
                    output = lst_final_ord-spart.
              ENDIF. " IF lst_final_ord-spart IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 8. "7             " NPALLA OTCM-47267

*              WRITE lst_excel_dummy-value(8) TO lst_final_ord-guebg. " NPALLA OTCM-47267
              lst_final_ord-guebg = lst_excel_dummy-value(10).
              CLEAR lst_excel_dummy.

            WHEN 9.  "8.           " NPALLA OTCM-47267

*              WRITE lst_excel_dummy-value(8) TO lst_final_ord-gueen. " NPALLA OTCM-47267
              lst_final_ord-gueen = lst_excel_dummy-value(10).
              CLEAR lst_excel_dummy.

            WHEN 10. "9.           " NPALLA OTCM-47267

              lst_final_ord-augru = lst_excel_dummy-value(2).
              IF lst_final_ord-augru IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-augru
                  IMPORTING
                    output = lst_final_ord-augru.
              ENDIF. " IF lst_final_ord-augru IS NOT INITIAL
              CLEAR lst_excel_dummy.


            WHEN 11. "10.          " NPALLA OTCM-47267

              lst_final_ord-matnr = lst_excel_dummy-value(18).

              IF lst_final_ord-matnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input  = lst_final_ord-matnr
                  IMPORTING
                    output = lst_final_ord-matnr.

                CLEAR lst_excel_dummy.
              ENDIF. " IF lst_final_ord-matnr IS NOT INITIAL

            WHEN 12. "11.          " NPALLA OTCM-47267
              lst_final_ord-plant = lst_excel_dummy-value(4).

            WHEN 13. "12. "11.     " NPALLA OTCM-47267
              lst_final_ord-vbeln = lst_excel_dummy-value(10).
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input         = lst_final_ord-vbeln
                IMPORTING
                  output        = lst_final_ord-vbeln.

            WHEN 14.  "13. "12.                        NPOLINA ERP7763 ED2K913722
              WRITE lst_excel_dummy-value(06) TO lst_final_ord-posnr.
              IF lst_final_ord-posnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-posnr
                  IMPORTING
                    output = lst_final_ord-posnr.
              ENDIF. " IF lst_final_ord-posnr IS NOT INITIAL

            WHEN 15. "14. "13.                        NPOLINA ERP7763 ED2K913722

              lst_final_ord-pstyv = lst_excel_dummy-value(4).
              IF lst_final_ord-pstyv IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-pstyv
                  IMPORTING
                    output = lst_final_ord-pstyv.
              ENDIF. " IF lst_final_ord-pstyv IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 16. "15. "14.                        NPOLINA ERP7763 ED2K913722
              lv_zmeng  =  lst_excel_dummy-value(13).
*              lst_final_ord-zmeng  = lv_zmeng.
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_final_ord-kwmeng  = lv_zmeng.
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Quantity & is not in the correct format
                  MESSAGE i131(o3) WITH lst_excel_dummy-value. " Quantity & is not in the correct format
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            WHEN 17. "16. "15.                        NPOLINA ERP7763 ED2K913722
              lst_final_ord-xblnr = lst_excel_dummy-value(16).
              CLEAR lst_excel_dummy.

            WHEN 18. "17. "16.                        NPOLINA ERP7763 ED2K913722
              lst_final_ord-zlsch = lst_excel_dummy-value(1).
              CLEAR lst_excel_dummy.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081

            WHEN 19. "18. "17.                        NPOLINA ERP7763 ED2K913722
              lst_final_ord-lifsk = lst_excel_dummy-value(2).
              IF lst_final_ord-lifsk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-lifsk
                  IMPORTING
                    output = lst_final_ord-lifsk.
              ENDIF. " IF lst_final_ord-lifsk IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 20. "19. "18.                        NPOLINA ERP7763 ED2K913722
              lst_final_ord-faksk = lst_excel_dummy-value(2).
              IF lst_final_ord-faksk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-faksk
                  IMPORTING
                    output = lst_final_ord-faksk.
              ENDIF. " IF lst_final_ord-faksk IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 21. "20. "19.                        NPOLINA ERP7763 ED2K913722
              lst_final_ord-abgru = lst_excel_dummy-value(2).

            WHEN 22. "21. "20.                        NPOLINA ERP7763 ED2K913722

              lst_final_ord-auart = lst_excel_dummy-value(4).
              IF lst_final_ord-auart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-auart
                  IMPORTING
                    output = lst_final_ord-auart.
                lv_ordertype = lst_final_ord-auart..
              ENDIF. " IF lst_final_ord-auart IS NOT INITIAL
              CLEAR lst_excel_dummy.

* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
            WHEN 23. "22.              "21 Lahiru ED2K919734 OTCM-4390
              lst_final_ord-bsark = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
            WHEN 24. "23. "21.         22 Lahiru ED2K919734 OTCM-4390               NPOLINA ERP7763 ED2K913722
              lst_final_ord-bstnk = lst_excel_dummy-value(20).
              IF lst_final_ord-bstnk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-bstnk
                  IMPORTING
                    output = lst_final_ord-bstnk.
              ENDIF. " IF lst_final_ord-bstnk IS NOT INITIAL
              CLEAR lst_excel_dummy.
            WHEN 25. "24. "22.          23 Lahiru ED2K919734 OTCM-4390              NPOLINA ERP7763 ED2K913722

              lst_final_ord-stxh = lst_excel_dummy-value(50).
            WHEN 26. "25.          " 24 Lahiru ED2K919734 OTCM-4390            " NPOLINA ERP7763 ED2K913722
              lst_final_ord-kschl = lst_excel_dummy-value(4).
              IF lst_final_ord-kschl IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-kschl
                  IMPORTING
                    output = lst_final_ord-kschl.
              ENDIF. " IF lst_final_ord-kschl IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 27. "26.        "  25 Lahiru ED2K919734 OTCM-4390            " NPOLINA ERP7763 ED2K913722
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_final_ord-kbetr = lst_excel_dummy-value(11).
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Amount & format is incorrect
                  MESSAGE i406(aw) WITH lst_excel_dummy-value. " Amount & format is incorrect
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.

            WHEN 28. "27.         " 26 Lahiru ED2K919734 OTCM-4390            " NPOLINA ERP7763 ED2K913722
              lst_final_ord-ihrez = lst_excel_dummy-value(12).
              CLEAR lst_excel_dummy.

            WHEN 29. "28.         " 27 Lahiru ED2K919734 OTCM-4390            " NPOLINA ERP7763 ED2K913722
              lst_final_ord-ihrez_e = lst_excel_dummy-value(12).
              CLEAR lst_excel_dummy.

            WHEN 30. "29.       " 28 Lahiru ED2K919734 OTCM-4390              " NPOLINA ERP7763 ED2K913722
              lst_final_ord-zzpromo = lst_excel_dummy-value(10).

              IF lst_final_ord-zzpromo IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final_ord-zzpromo
                  IMPORTING
                    output = lst_final_ord-zzpromo.
              ENDIF. " IF lst_final_ord-zzpromo IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 31. "30.     "29 Lahiru ED2K919734 OTCM-4390                 " NPOLINA ERP7763 ED2K913722
              lst_final_ord-kdkg4 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.

            WHEN 32. "31.   " 30 Lahiru ED2K919734 OTCM-4390                   " NPOLINA ERP7763 ED2K913722
              lst_final_ord-kdkg5 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            WHEN 33. "32. " 31 Lahiru ED2K919734 OTCM-4390                      " NPOLINA ERP7763 ED2K913722
              lst_final_ord-kdkg3 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*            WHEN 31.
*              lst_final_ord-srid = lst_excel_dummy-value(12).
*              CLEAR lst_excel_dummy.
            WHEN 34. "33. "32 Lahiru ED2K919734 OTCM-4390                      " NPOLINA ERP7763 ED2K913722
              lst_final_ord-vkbur = lst_excel_dummy-value(4).
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_final_ord-vkbur
                IMPORTING
                  output = lst_final_ord-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
            WHEN 35. "34.    " 33      Lahiru ED2K919734 OTCM-4390
              lst_final_ord-kdkg2 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            WHEN 36.
              lst_final_ord-fkdat = lst_excel_dummy-value(10). "OTCM-52926
              CLEAR lst_excel_dummy.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          ENDCASE.
        ENDAT.

      ENDLOOP. " LOOP AT li_excel INTO lst_excel
*   Populating the Last line

      APPEND lst_final_ord TO i_final_ord.
      CLEAR lst_final_ord.
    ENDIF. " IF NOT li_excel[] IS INITIAL
  ENDIF. " IF sy-subrc EQ 0


*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  IF i_final_ord IS NOT INITIAL.
    IF p_v_oid IS NOT INITIAL.
      v_oid   = p_v_oid.
      lv_oid  = p_v_oid.
    ELSE.
      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr             = c_zq
          object                  = c_zqtc_uplid
          quantity                = c_quantity
        IMPORTING
          number                  = lv_oid
        EXCEPTIONS
          interval_not_found      = 1
          number_range_not_intern = 2
          object_not_found        = 3
          quantity_is_0           = 4
          quantity_is_not_1       = 5
          interval_overflow       = 6
          buffer_overflow         = 7
          OTHERS                  = 8.
      IF sy-subrc EQ 0.
        v_oid   = lv_oid.
        p_v_oid = lv_oid.
      ENDIF.
    ENDIF.
    IF lv_oid IS NOT INITIAL.
      CONCATENATE 'Your Upload File Identification Number is'(124)
                  lv_oid
             INTO lv_msg SEPARATED BY space.
      CALL FUNCTION 'POPUP_TO_INFORM'
        EXPORTING
          titel = text-114
          txt1  = lv_msg
          txt2  = ''.
    ENDIF.
  ENDIF. "IF fp_i_final IS NOT INITIAL.

  IF rb_or_ct = 'X' OR
     rb_or_cn = 'X'.
*   Get Customers
    PERFORM f_get_customers_ord USING i_final_ord
                             CHANGING i_customer.
*   Get Material and Material Group
    PERFORM f_get_material_group_ord USING i_final_ord
                                  CHANGING i_matnr
                                            i_mvke.
* Process Input File and Create SLG Logs
    LOOP AT i_final_ord ASSIGNING FIELD-SYMBOL(<lfs_i_final_ord>).
      CLEAR:lv_msgty.
      lst_final_ord = <lfs_i_final_ord>.
      lv_item = lst_final_ord-posnr.
      AT NEW identifier.
        lv_index      = sy-tabix.
        lv_identifier = lst_final_ord-identifier.
      ENDAT.
      PERFORM f_create_log_staging_ord USING    lst_final_ord  lv_oid  lv_item
                                       CHANGING lv_log  lv_msgty  lv_loghandle. "lst_final3.
      IF lv_msgty IS INITIAL.
        lv_msgty = c_i.
      ENDIF.
      PERFORM f_retain_log_status USING    lv_msgty
                                  CHANGING lv_ord_status.
      <lfs_i_final_ord>-zlogno     = lv_log.  "st_e101_stage-zlogno.  "Application log: log number
      <lfs_i_final_ord>-log_handle = lv_loghandle.                    "Application Log: Log Handle
      <lfs_i_final_ord>-zoid       = lv_oid.  "st_e101_stage-zoid.    "Order Identifier in Upload File

       AT END OF identifier.
*       At Last Identifier (Order) - Update all Lines of the Order with message Status
        LOOP AT i_final_ord ASSIGNING FIELD-SYMBOL(<lfs_i_final_ord1>) FROM lv_index.
          IF <lfs_i_final_ord1>-identifier <> lv_identifier.
            CLEAR: lv_index, lv_identifier.
            EXIT.
          ENDIF.
          <lfs_i_final_ord1>-msgty = lv_ord_status.
          CASE lv_ord_status.
            WHEN c_i OR c_s.
              <lfs_i_final_ord1>-msgv1 = 'File Validation - Successful'(161).
            WHEN c_w.
              <lfs_i_final_ord1>-msgv1 = 'File Validation - Warnings'(162).
            WHEN c_e.
              <lfs_i_final_ord1>-msgv1 = 'File Validation - Error'(163).
            WHEN OTHERS.
          ENDCASE.
        ENDLOOP.
        CLEAR: lv_ord_status.
      ENDAT.
    ENDLOOP.
  ENDIF.  " IF rb_cros NE 'X'.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  PERFORM f_move_xl_to_ord_alv USING    i_final_ord
                               CHANGING i_ord_alv.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  IF i_e101_stage[] IS NOT INITIAL.
    MODIFY ze225_staging FROM TABLE i_e101_stage.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

ENDFORM.
*&-----------------------------------*
*&      Form  F_DATE_DYNAMICS
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_S_DATE  text
*-----------------------------------*
FORM f_date_dynamics.

  s_date-high   = sy-datum.
  s_date-low    = sy-datum - 30.
  s_date-sign   = 'I'.
  s_date-option = 'BT'.

  APPEND s_date.

  s_inv-high    = sy-datum.
  s_inv-low     = sy-datum - 30.
  s_inv-sign    = 'I'.
  s_inv-option  = 'BT'.

  APPEND s_inv.

  s_invo-high   = sy-datum.
  s_invo-low    = sy-datum - 30.
  s_invo-sign   = 'I'.
  s_invo-option = 'BT'.

  APPEND s_invo.

  s_ord_dt-high   = sy-datum.
  s_ord_dt-low    = sy-datum - 30.
  s_ord_dt-sign   = 'I'.
  s_ord_dt-option = 'BT'.

  APPEND s_ord_dt.

ENDFORM.
*&-----------------------------------*
*&      Form  F_GET_DATE_DIFF
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_S_DATE  text
*-----------------------------------*
FORM f_get_date_diff  USING    fp_s_date TYPE tt_date.

  LOOP AT fp_s_date INTO DATA(lst_date).
    IF ( lst_date-high - lst_date-low GT 30 ).
      MESSAGE text-e17 TYPE 'E'.
    ENDIF. " IF ( lst_date-high - lst_date-low GT 30 )
  ENDLOOP. " LOOP AT fp_s_date INTO DATA(lst_date)
ENDFORM.
*&-----------------------------------*
*&      Form  F_GET_CONDITIONS
*&-----------------------------------*
*       text
*-----------------------------------*
*      <-P_I_KSCHL  text
*-----------------------------------*
FORM f_get_conditions  CHANGING fp_i_vbpa  TYPE tt_vbpa.
  DATA:lst_vbpa      TYPE ty_vbpa,
       lst_edit      TYPE ty_edit,
*** BOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
       lst_cmauart   TYPE ty_cmauart,
*** EOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
       lst_cond_type TYPE ty_cond_type.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059

  CONSTANTS: lc_e101         TYPE zdevid     VALUE 'E101',       " Development ID
             lc_param1_tdid  TYPE rvari_vnam VALUE 'TDID',       " ABAP: Name of Variant Variable
             lc_param2_tdid  TYPE rvari_vnam VALUE 'TEXT',       " ABAP: Name of Variant Variable
             lc_param1_edit  TYPE rvari_vnam VALUE 'EDIT',       " ABAP: Name of Variant Variable
             lc_param2_edit  TYPE rvari_vnam VALUE 'ALV_FIELDS', " ABAP: Name of Variant Variable
             lc_param1_parvw TYPE rvari_vnam VALUE 'PARVW',      " ABAP: Name of Variant Variable
*** BOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
             lc_param1_cmot  TYPE rvari_vnam VALUE 'CRDT',  " ABAP: Name of Variant Variable
             lc_param2_cmot  TYPE rvari_vnam VALUE 'AUART', " ABAP: Name of Variant Variable
*** EOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
             lc_param2_parvw TYPE rvari_vnam VALUE 'PART_ROLE', " ABAP: Name of Variant Variable
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
             lc_param1_vkbur TYPE rvari_vnam VALUE 'VKBUR',     " ABAP: Name of Variant Variable
             lc_param2_vkbur TYPE rvari_vnam VALUE 'SALES_OFF', " ABAP: Name of Variant Variable
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
             lc_param1_fpath TYPE rvari_vnam VALUE 'FILE_PATH', " ABAP: Name of Variant Variable
             lc_param1_llmt  TYPE rvari_vnam VALUE 'LINE_LMT'.  " ABAP: Name of Variant Variable
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  DATA:      lv_system_id TYPE rvari_vnam. " ABAP: Name of Variant Variable
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189

  SELECT devid,    " Development ID
         param1,   " ABAP: Name of Variant Variable
         param2,   " ABAP: Name of Variant Variable
         srno,     " ABAP: Current selection number
         sign,     " ABAP: ID: I/E (include/exclude values)
         opti,     " ABAP: Selection option (EQ/BT/CP/...)
         low,      " Lower Value of Selection Condition
         high      " Upper Value of Selection Condition
  FROM zcaconstant " Wiley Application Constant Table
  INTO TABLE @DATA(li_constant)
  WHERE devid    = @lc_e101
  AND   activate = @abap_true.
  IF sy-subrc IS INITIAL.
    SORT li_constant BY param1
                        param2.


    LOOP AT li_constant INTO DATA(lst_constant) WHERE  param1 = lc_param1_parvw
                                                AND    param2 = lc_param2_parvw.
      CLEAR lst_vbpa.
      lst_vbpa-sign   = c_i.
      lst_vbpa-opti   = c_eq.
      lst_vbpa-low    = lst_constant-low.
      lst_vbpa-high   = lst_constant-high.

      APPEND lst_vbpa TO fp_i_vbpa.
      CLEAR  lst_vbpa.
    ENDLOOP. " LOOP AT li_constant INTO DATA(lst_constant) WHERE param1 = lc_param1_parvw

    CLEAR lst_constant.
    READ TABLE li_constant
    INTO  lst_constant
    WITH KEY param1 = lc_param1_tdid
             param2 = lc_param2_tdid.
    IF sy-subrc IS INITIAL.
      v_tdid = lst_constant-low.

    ENDIF. " IF sy-subrc IS INITIAL
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR lst_constant.
  LOOP AT li_constant INTO lst_constant WHERE param1 = lc_param1_edit
                                        AND   param2 = lc_param2_edit.
    lst_edit-sign = c_i.
    lst_edit-opti = c_eq.
    lst_edit-low  = lst_constant-low.
    lst_edit-high = lst_constant-high.

    APPEND lst_edit TO i_edit.
    CLEAR  lst_edit.
  ENDLOOP. " LOOP AT li_constant INTO lst_constant WHERE param1 = lc_param1_edit

  CLEAR lst_constant.
*** BOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type
  LOOP AT li_constant INTO lst_constant WHERE param1 = lc_param1_cmot
                                        AND   param2 = lc_param2_cmot.
    lst_cmauart-sign = c_i.
    lst_cmauart-opti = c_eq.
    lst_cmauart-low  = lst_constant-low.
    lst_cmauart-high = lst_constant-high.

    APPEND lst_cmauart TO i_cmauart.
    CLEAR lst_cmauart.

  ENDLOOP. " LOOP AT li_constant INTO lst_constant WHERE param1 = lc_param1_cmot
*** EOC BY SAYANDAS on 29-Nov-2017 for Credit Memo Order Type

* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059

* Read default sales office
  CLEAR : v_vkbur,
          lst_constant.

  READ TABLE li_constant INTO lst_constant WITH KEY param1 = lc_param1_vkbur
                                                    param2 = lc_param2_vkbur.
  IF sy-subrc EQ 0.
    v_vkbur = lst_constant-low.
  ENDIF. " IF sy-subrc EQ 0

  CLEAR : lst_constant.

* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  CLEAR : v_fpath,
          v_line_lmt,
          lst_constant.
  lv_system_id = sy-sysid(2).

*  lst_constant = li_constant[ param1 = lc_param1_fpath param2 = lv_system_id ].
*  lst_constant = li_constant[ param1 = lc_param1_fpath param2 = lv_system_id ].
*  v_fpath = lst_constant-low.   "NPOLINA E101  ED2K913574 ERP7614


  CLEAR lst_constant.

  lst_constant  = li_constant[ param1 = lc_param1_llmt ].
  v_line_lmt = lst_constant-low.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
ENDFORM.
*&-----------------------------------*
*&      Form  F_MOVE_TO_ALV
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_LI_CHANGE_SUBS_ORD_TEMP  text
*      <-P_I_FINAL  text
*-----------------------------------*
FORM f_move_to_alv  USING    fp_li_change_subs_ord_temp TYPE tt_exist_subs_ord
                    CHANGING fp_i_final                 TYPE tt_excel_enh.

  DATA: li_lines  TYPE STANDARD TABLE OF tline, " SAPscript: Text Lines
        lst_final TYPE ty_excel_enhanced,
        lv_line   TYPE tdline,                  " Text Line
        lv_name   TYPE tdobname,                " Name
        lv_kunnr  TYPE kunnr.                   " Customer Number
  DATA: lv_identifier TYPE i.

  CONSTANTS:lc_posnr  TYPE posnr VALUE '000000'. " Item number of the SD document

  LOOP AT fp_li_change_subs_ord_temp INTO DATA(lst_change_subs_ord_temp).
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    AT NEW vbeln.
      lv_identifier = lv_identifier + 1 .
    ENDAT.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    IF  lst_change_subs_ord_temp-parvw = c_ag.
      CLEAR lv_kunnr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_final-identifier = lv_identifier.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_final-customer = lst_change_subs_ord_temp-kunnr. " Customer Number
      lv_kunnr           = lst_change_subs_ord_temp-kunnr.
      lst_final-posnr    = lc_posnr. " Item number

      lst_final-parvw   = lst_change_subs_ord_temp-parvw. " Partner Function
      lst_final-vkorg   = lst_change_subs_ord_temp-vkorg. " Sales org. SAP mandatory
      lst_final-vtweg   = lst_change_subs_ord_temp-vtweg. " Dist. channel SAP mandatory
      lst_final-spart   = lst_change_subs_ord_temp-spart. " Division SAP mandatory
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_final-vkbur   = lst_change_subs_ord_temp-vkbur.
* SOC by NPOLINA DM1913(E209) ED2K915483
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_final-vkbur
        IMPORTING
          output = lst_final-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      lst_final-guebg   = lst_change_subs_ord_temp-guebg. " Contract start date Wiley mandatory
*      lst_final-gueen   = lst_change_subs_ord_temp-gueen. " Contract end date Wiley mandatory
      WRITE: lst_change_subs_ord_temp-guebg TO lst_final-guebg. " Contract start date Wiley mandatory
      WRITE: lst_change_subs_ord_temp-gueen TO lst_final-gueen. " Contract end date Wiley mandatory
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_final-xblnr   = lst_change_subs_ord_temp-xblnr.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_final-abgru   = lst_change_subs_ord_temp-abgru. " Reason for rejection
      lst_final-lifsk   = lst_change_subs_ord_temp-lifsk. " Delivery block Wiley mandatory
      lst_final-faksk   = lst_change_subs_ord_temp-faksk. " Billing block Wiley mandatory
      lst_final-vbeln   = lst_change_subs_ord_temp-vbeln. " Sales and Distribution Document Number
      lst_final-auart   = lst_change_subs_ord_temp-auart. " Sales Document Type
      lst_final-bstnk   = lst_change_subs_ord_temp-bstnk. " Purchase order number Wiley mandatory
      lst_final-ihrez   = lst_change_subs_ord_temp-ihrez. " Your Reference
      lst_final-zzpromo = lst_change_subs_ord_temp-zzpromo. " Promo code
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_final-zlsch   = lst_change_subs_ord_temp-zlsch.
      lst_final-kdkg3   = lst_change_subs_ord_temp-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_final-bsark   = lst_change_subs_ord_temp-bsark.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_final-kdkg4   = lst_change_subs_ord_temp-kdkg4. " Customer condition group 4
      lst_final-kdkg5   = lst_change_subs_ord_temp-kdkg5. " Customer condition group 5
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
      lst_final-zuonr   = lst_change_subs_ord_temp-zuonr.
      lst_final-waerk   = lst_change_subs_ord_temp-waerk.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      lst_final-fkdat   = lst_change_subs_ord_temp-fkdat.
      WRITE: lst_change_subs_ord_temp-fkdat TO lst_final-fkdat.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
      lst_final-kdkg2   = lst_change_subs_ord_temp-kdkg2. " NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      lst_final-zzconstart  = lst_change_subs_ord_temp-zzconstart.
*      lst_final-zzconend    = lst_change_subs_ord_temp-zzconend.
      WRITE: lst_change_subs_ord_temp-zzconstart TO lst_final-zzconstart.
      WRITE: lst_change_subs_ord_temp-zzconend TO lst_final-zzconend.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
      lst_final-vlaufz = lst_change_subs_ord_temp-vlaufz.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*      lst_final-vlaufk = lst_change_subs_ord_temp-vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
      CLEAR  lv_name.
      lv_name =  lst_change_subs_ord_temp-vbeln.

      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          client                  = sy-mandt
          id                      = v_tdid
          language                = sy-langu
          name                    = lv_name
          object                  = c_vbbk
        TABLES
          lines                   = li_lines
        EXCEPTIONS
          id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7.
      IF sy-subrc IS INITIAL.
        CLEAR lv_line.
        LOOP AT li_lines INTO DATA(lst_lines).

          CONCATENATE lv_line
                      lst_lines-tdline
                      INTO
                      lv_line.

        ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines)

        CONDENSE lv_line.
        lst_final-stxh = lv_line.
      ENDIF. " IF sy-subrc IS INITIAL

      APPEND lst_final TO fp_i_final.
      CLEAR  lst_final.
    ELSE. " ELSE -> IF lst_change_subs_ord_temp-parvw = c_ag

      IF lst_change_subs_ord_temp-posnr IS NOT INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        lst_final-identifier = lv_identifier.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        lst_final-customer  = lv_kunnr.
        lst_final-kunnr   = lst_change_subs_ord_temp-kunnr. " Customer Number
        lst_final-posnr   = lst_change_subs_ord_temp-posnr. " Item number
        lst_final-parvw   = lst_change_subs_ord_temp-parvw. " Partner Function
        lst_final-vkorg   = lst_change_subs_ord_temp-vkorg. " Sales org. SAP mandatory
        lst_final-vtweg   = lst_change_subs_ord_temp-vtweg. " Dist. channel SAP mandatory
        lst_final-spart   = lst_change_subs_ord_temp-spart. " Division SAP mandatory
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*        lst_final-guebg   = lst_change_subs_ord_temp-guebg. " Contract start date Wiley mandatory
*        lst_final-gueen   = lst_change_subs_ord_temp-gueen. " Contract end date Wiley mandatory
        WRITE: lst_change_subs_ord_temp-guebg TO lst_final-guebg. " Contract start date Wiley mandatory
        WRITE: lst_change_subs_ord_temp-gueen TO lst_final-gueen. " Contract end date Wiley mandatory
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        lst_final-matnr   = lst_change_subs_ord_temp-matnr. " Material
        lst_final-plant   = lst_change_subs_ord_temp-werks. " Plant
        lst_final-vbeln   = lst_change_subs_ord_temp-vbeln. " Sales and Distribution Document Number
        lst_final-pstyv   = lst_change_subs_ord_temp-pstyv. " Item category SAP mandatory
        lst_final-zmeng   = lst_change_subs_ord_temp-zmeng. " Target quantity
        lst_final-abgru   = lst_change_subs_ord_temp-abgru. " Reason for rejection
        lst_final-ihrez   = lst_change_subs_ord_temp-ihrez. " Your Reference
        lst_final-zzpromo = lst_change_subs_ord_temp-zzpromo. " Promo code
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_final-kdkg3   = lst_change_subs_ord_temp-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_final-kdkg4   = lst_change_subs_ord_temp-kdkg4. " Customer condition group 4
        lst_final-kdkg5   = lst_change_subs_ord_temp-kdkg5. " Customer condition group 5
        lst_final-kdkg2   = lst_change_subs_ord_temp-kdkg2. " "NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*        lst_final-zzconstart  = lst_change_subs_ord_temp-zzconstart.
*        lst_final-zzconend    = lst_change_subs_ord_temp-zzconend.
        WRITE: lst_change_subs_ord_temp-zzconstart TO  lst_final-zzconstart.
        WRITE: lst_change_subs_ord_temp-zzconend TO lst_final-zzconend.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
        lst_final-vlaufz = lst_change_subs_ord_temp-vlaufz.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*        lst_final-vlaufk = lst_change_subs_ord_temp-vlaufk.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021

        CLEAR  lv_name.
        CONCATENATE  lst_change_subs_ord_temp-vbeln
                     lst_change_subs_ord_temp-posnr
                     INTO
                     lv_name.

        CONDENSE lv_name NO-GAPS.

        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = v_tdid
            language                = sy-langu
            name                    = lv_name
            object                  = c_vbbp
          TABLES
            lines                   = li_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7.

        IF sy-subrc IS INITIAL.
          CLEAR lv_line.
          LOOP AT li_lines INTO DATA(lst_lines_item).
            CONCATENATE lv_line
                        lst_lines_item-tdline
                        INTO
                        lv_line.
          ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines_item)

          CONDENSE lv_line.
          lst_final-stxh = lv_line.
        ENDIF. " IF sy-subrc IS INITIAL

        APPEND lst_final TO fp_i_final.
        CLEAR  lst_final.
      ENDIF. " IF lst_change_subs_ord_temp-posnr IS NOT INITIAL
    ENDIF. " IF lst_change_subs_ord_temp-parvw = c_ag
  ENDLOOP. " LOOP AT fp_li_change_subs_ord_temp INTO DATA(lst_change_subs_ord_temp)


  SORT fp_i_final BY vbeln
                     posnr.

  DELETE ADJACENT DUPLICATES FROM fp_i_final
  COMPARING vbeln
            posnr.

ENDFORM.
*&-----------------------------------*
*&      Form  F_MOVE_TO_ORD_ALV
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_ORDERS  text
*      <-P_I_ORD_ALV  text
*-----------------------------------*
FORM f_move_to_ord_alv  USING    fp_i_orders  TYPE tt_ord_select
                        CHANGING fp_i_ord_alv TYPE tt_order_alv.

*====================================================================*
*
*====================================================================*
  DATA: li_lines      TYPE STANDARD TABLE OF tline, " SAPscript: Text Lines
        lst_ord_final TYPE ty_ord_alv,
        lv_line       TYPE tdline,                  " Text Line
        lv_name       TYPE tdobname,                " Name
        lv_kunnr      TYPE kunnr.                   " Customer Number
  DATA: lv_identifier TYPE i.                       " Identifier  "OTCM-47267

  CONSTANTS:lc_posnr TYPE posnr VALUE '000000'. " Item number of the SD document
*====================================================================*
*
*====================================================================*

  LOOP AT fp_i_orders INTO DATA(lst_orders).
    AT NEW vbeln.
      lv_identifier = lv_identifier + 1 .
    ENDAT.
    IF  lst_orders-parvw = c_ag.
      CLEAR lv_kunnr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_ord_final-identifier = lv_identifier.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_ord_final-customer  = lst_orders-kunnr. " Customer Number
      lv_kunnr                = lst_orders-kunnr.
      lst_ord_final-parvw     = lst_orders-parvw. " Partner Function
      lst_ord_final-vkorg     = lst_orders-vkorg. " Sales Organization
      lst_ord_final-vtweg     = lst_orders-vtweg. " Distribution Channel
      lst_ord_final-spart     = lst_orders-spart. " Division
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_ord_final-vkbur     = lst_orders-vkbur.

* SOC by NPOLINA DM1913(E209) ED2K915483
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_final-vkbur
        IMPORTING
          output = lst_ord_final-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      lst_ord_final-guebg = lst_orders-guebg. " Division
*      lst_ord_final-gueen     = lst_orders-gueen. " Division
      WRITE: lst_orders-guebg TO lst_ord_final-guebg. " Contract start date
      WRITE: lst_orders-gueen TO lst_ord_final-gueen. " Contract end date
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_ord_final-auart     = lst_orders-auart. " Division
      lst_ord_final-vbeln     = lst_orders-vbeln. " Sales and Distribution Document Number
      lst_ord_final-posnr     = lc_posnr.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_ord_final-xblnr     = lst_orders-xblnr.
      lst_ord_final-zlsch     = lst_orders-zlsch.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_ord_final-lifsk     = lst_orders-lifsk. " Item number of the SD document
      lst_ord_final-faksk     = lst_orders-faksk. " Item number of the SD document
      lst_ord_final-augru     = lst_orders-augru. " Item number of the SD document
      lst_ord_final-bstnk     = lst_orders-bstnk. " Item number of the SD document
      lst_ord_final-ihrez     = lst_orders-ihrez. " Item number of the SD document
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_ord_final-kdkg3     = lst_orders-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *
      lst_ord_final-bsark     = lst_orders-bsark.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      WRITE: lst_orders-fkdat TO lst_ord_final-fkdat. " Billing date
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

      CLEAR  lv_name.
      lv_name =  lst_orders-vbeln.

      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          client                  = sy-mandt
          id                      = v_tdid
          language                = sy-langu
          name                    = lv_name
          object                  = c_vbbk
        TABLES
          lines                   = li_lines
        EXCEPTIONS
          id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7.

      IF sy-subrc IS INITIAL.
        CLEAR lv_line.
        LOOP AT li_lines INTO DATA(lst_lines).

          CONCATENATE lv_line
                      lst_lines-tdline
                      INTO
                      lv_line.

        ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines)

        CONDENSE lv_line.
        lst_ord_final-stxh = lv_line.
      ENDIF. " IF sy-subrc IS INITIAL

      APPEND lst_ord_final TO fp_i_ord_alv.
      CLEAR  lst_ord_final.

    ELSEIF lst_orders-parvw = c_we.

      IF lst_orders-posnr IS NOT INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        lst_ord_final-identifier = lv_identifier.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        lst_ord_final-customer  = lv_kunnr. " Customer Number
        lst_ord_final-partner   = lst_orders-kunnr.
        lst_ord_final-parvw     = lst_orders-parvw. " Partner Function
        lst_ord_final-vkorg     = lst_orders-vkorg. " Sales Organization
        lst_ord_final-vtweg     = lst_orders-vtweg. " Distribution Channel
        lst_ord_final-spart     = lst_orders-spart. " Division
        lst_ord_final-vbeln     = lst_orders-vbeln. " Sales and Distribution Document Number
        lst_ord_final-posnr     = lst_orders-posnr. " Item number of the SD document
        lst_ord_final-matnr     = lst_orders-matnr. " Material Number
        lst_ord_final-abgru     = lst_orders-abgru. " Material Number
        lst_ord_final-pstyv     = lst_orders-pstyv.
        lst_ord_final-kwmeng     = lst_orders-kwmeng. " Target qty
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        lst_ord_final-plant     = lst_orders-werks. " Plant
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        lst_ord_final-zzpromo   = lst_orders-zzpromo.
        lst_ord_final-ihrez     = lst_orders-ihrez.
        lst_ord_final-ihrez_e   = lst_orders-ihrez_e.
        lst_ord_final-kdkg4     = lst_orders-kdkg4.
        lst_ord_final-kdkg5     = lst_orders-kdkg5.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_ord_final-kdkg3     = lst_orders-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
        lst_ord_final-kdkg2     = lst_orders-kdkg2.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *
        lst_ord_final-bsark     = lst_orders-bsark.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *

        CLEAR  lv_name.
        CONCATENATE  lst_orders-vbeln
                     lst_orders-posnr
                     INTO
                     lv_name.

        CONDENSE lv_name NO-GAPS.

        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = v_tdid
            language                = sy-langu
            name                    = lv_name
            object                  = c_vbbp
          TABLES
            lines                   = li_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7.

        IF sy-subrc IS INITIAL.
          CLEAR lv_line.
          LOOP AT li_lines INTO DATA(lst_lines_item).
            CONCATENATE lv_line
                        lst_lines_item-tdline
                        INTO
                        lv_line.
          ENDLOOP. " LOOP AT li_lines INTO DATA(lst_lines_item)

          CONDENSE lv_line.

          lst_ord_final-stxh = lv_line.
        ENDIF. " IF sy-subrc IS INITIAL
        APPEND lst_ord_final TO fp_i_ord_alv.
        CLEAR  lst_ord_final.
      ENDIF. " IF lst_orders-posnr IS NOT INITIAL

    ENDIF. " IF lst_orders-parvw = c_ag
  ENDLOOP. " LOOP AT fp_i_orders INTO DATA(lst_orders)



  SORT fp_i_ord_alv BY vbeln
                       posnr.

  DELETE ADJACENT DUPLICATES FROM fp_i_ord_alv
  COMPARING vbeln
            posnr.
ENDFORM.
*&-----------------------------------*
*&      Form  F_DISPLAY_DISPLAY_REG_ORD
*&-----------------------------------*
*       text
*-----------------------------------*
*  ->  p1        text
*  <-  p2        text
*-----------------------------------*
FORM f_display_display_reg_ord .

  REFRESH i_fcat_out.

  DATA: lv_counter TYPE sycucol VALUE 1. " Counter of type Integers
  DATA: lv_grid_title TYPE lvc_title.    "NPALLA  09/01/2021 E101 OTCM-47267 : ED2K924398

  PERFORM f_buildcat USING:
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'IDENTIFIER' text-113    ,
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'CUSTOMER'  text-h01    , "item number
            lv_counter 'PARVW'     text-011    ,
            lv_counter 'PARTNER'   text-h02    ,
            lv_counter 'VKORG'     text-025    ,
            lv_counter 'VTWEG'     text-026    , "Dist. channel
            lv_counter 'SPART'     text-027    , "division
            lv_counter 'GUEBG'     text-015    , "Contract start date
            lv_counter 'GUEEN'     text-016    , "Contract end date
            lv_counter 'AUGRU'     text-051    ,
            lv_counter 'MATNR'     text-h04    ,
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'PLANT'     text-h10    ,
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            lv_counter 'VBELN'     text-h05    ,
            lv_counter 'POSNR'     text-h03    ,
            lv_counter 'PSTYV'     text-017    , "Item category
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*            lv_counter 'ZMENG'     text-014    , "target quantity
            lv_counter 'KWMENG'    text-014    , "Order quantity
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            lv_counter 'XBLNR'     text-060    ,
            lv_counter 'ZLSCH'     text-061    ,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            lv_counter 'LIFSK'     text-020    , "delivery block
            lv_counter 'FAKSK'     text-021    , "billing block
            lv_counter 'ABGRU'     text-022    , "reason for rejection
            lv_counter 'AUART'     text-023    , "document type
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *
            lv_counter 'BSARK'     text-058    , "Customer purchase order type
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *
            lv_counter 'BSTNK'     text-024    , "purchase document number
            lv_counter 'STXH'      text-032    , "object name
            lv_counter 'KSCHL'     text-030    , "pricing condition
            lv_counter 'KBETR'     text-031    , "pricing
            lv_counter 'IHREZ'     text-h06    ,
            lv_counter 'IHREZ_E'   text-h07    ,
            lv_counter 'ZZPROMO'   text-028    , "promo code
            lv_counter 'KDKG4'     text-h08    , "Customer group
            lv_counter 'KDKG5'     text-h09    , "Customer group
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
            lv_counter 'KDKG3'     text-012    ,
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*            lv_counter 'IHREZ'     text-062    ,
            lv_counter 'VKBUR'     text-063    ,
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
            lv_counter 'KDKG2' text-056.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_buildcat USING:  lv_counter 'FKDAT' text-064.
  PERFORM f_buildcat USING:  lv_counter 'ZLOGNO' text-115.
  PERFORM f_buildcat USING:  lv_counter 'LOG_HANDLE' text-116.
*  PERFORM f_buildcat USING:  lv_counter 'ZOID' text-117.
  PERFORM f_buildcat USING:  lv_counter 'ICON' text-120.
  PERFORM f_buildcat USING:  lv_counter 'MSGTY' text-118.
  PERFORM f_buildcat USING:  lv_counter 'MSGV1' text-119.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  LOOP AT i_ord_alv ASSIGNING FIELD-SYMBOL(<fs_lst_ord_alv>).
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <fs_lst_ord_alv>-zlogno
      IMPORTING
        output = <fs_lst_ord_alv>-zlogno.
*
    PERFORM f_get_icon USING <fs_lst_ord_alv>-msgty
                       CHANGING <fs_lst_ord_alv>-icon.
  ENDLOOP.

* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  IF    i_ord_alv[] IS NOT INITIAL
    AND i_fcat_out[] IS NOT INITIAL.

    IF v_oid IS NOT INITIAL.
      CONCATENATE 'Orders Only Upload ID'(T00) c_hyphen v_oid INTO lv_grid_title SEPARATED BY space.
    ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  st_layout-box_fieldname = 'SEL'.
  st_layout-colwidth_optimize = abap_true.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'F_SET_PF_STATUS'
      i_callback_user_command  = 'F_USER_COMMAND'
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      i_grid_title             = lv_grid_title
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      is_layout                = st_layout
      it_fieldcat              = i_fcat_out
    TABLES
      t_outtab                 = i_ord_alv
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.

    MESSAGE e000 WITH text-008.

  ENDIF. " IF sy-subrc <> 0
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDIF. "IF    i_ord_alv[] IS NOT INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

* SOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
  IF i_ord_alv IS INITIAL .
    MESSAGE s000 WITH text-055 DISPLAY LIKE  'E'.
  ENDIF.
* EOC by NPOLINA 25/Apr/2019 ED2K914956   ERP7822
ENDFORM.
*&-----------------------------------*
*&      Form  F_CREATE_REG_ORD
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_ORD_ALV  text
*-----------------------------------*
FORM f_create_reg_ord  CHANGING fp_i_ord_alv TYPE tt_order_alv.

  TYPES: BEGIN OF lty_cond_class,
           kappl TYPE kappl,     " Application
           kschl TYPE kscha,     " Condition Type
           krech TYPE krech,     " Condition Class
         END OF lty_cond_class,

         BEGIN OF lty_mvke,
           matnr TYPE  matnr,    " Material Number
           vkorg TYPE  vkorg,    " Sales Organization
           vtweg TYPE vtweg,     " Distribution Channel
           dwerk TYPE dwerk_ext, " Delivering Plant (Own or External)
         END OF lty_mvke.
*====================================================================*
*       Local Internal Table
*====================================================================*
  DATA: li_return         TYPE STANDARD TABLE OF bapiret2,   " Return messages
        li_itm            TYPE STANDARD TABLE OF bapisditm,  " Item data
        li_ord_sch        TYPE STANDARD TABLE OF bapischdl,  " Communication Fields for Maintaining SD Doc. Schedule Lines
        li_mvke           TYPE STANDARD TABLE OF lty_mvke
                          INITIAL SIZE 0,
        li_partn          TYPE STANDARD TABLE OF bapiparnr,  " Contract partner
        li_cond           TYPE STANDARD TABLE OF bapicond,   " Contract conditions
        li_extensionin    TYPE STANDARD TABLE OF bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_text           TYPE STANDARD TABLE OF bapisdtext, " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_cond_class     TYPE STANDARD TABLE OF lty_cond_class
                          INITIAL SIZE 0,
*====================================================================*
*       Local Work-area
*====================================================================*
        lst_hdrin         TYPE bapisdhd1,  " Header data
        lst_text          TYPE bapisdtext, " Communication fields: SD texts
        lst_hrdinx        TYPE bapisdhd1x, " Header data extended for promo code
        lst_ord_sch       TYPE bapischdl,  " Communication Fields for Maintaining SD Doc. Schedule Lines
        lst_itm           TYPE bapisditm,  " Item data
        lst_bape_vbak     TYPE bape_vbak,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbakx    TYPE bape_vbakx, " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbap     TYPE bape_vbap,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbapx    TYPE bape_vbapx, " BAPI Interface for Customer Enhancements to Table VBAK
        lst_extensionin   TYPE bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        lst_partn         TYPE bapiparnr,  " Contract partner
        lst_cond          TYPE bapicond,   " Contract conditions
        lst_ord_alv_dummy TYPE ty_ord_alv,
        lst_return        TYPE bapiret2,   " For status of contract creation
        lst_bapi_addr     TYPE bapiaddr1,         "NPOLINA "ERPM2334
        li_bapi_addr      TYPE STANDARD TABLE OF bapiaddr1 INITIAL SIZE 0,  "NPOLINA "ERPM2334
*====================================================================*
*       Local Variable
*====================================================================*
        lv_salesdocin     TYPE bapivbeln-vbeln. "for export field
*====================================================================*
*       Local Constants
*====================================================================*
  CONSTANTS:lc_bape_vbak  TYPE char9  VALUE 'BAPE_VBAK',  " Bape_vbak of type CHAR9
            lc_bape_vbap  TYPE char9  VALUE 'BAPE_VBAP',  " Bape_vbak of type CHAR9
            lc_posnr      TYPE posnr  VALUE '000000',     " Item number of the SD document
            lc_bape_vbakx TYPE char10 VALUE 'BAPE_VBAKX', " Bape_vbak of type CHAR9
            lc_bape_vbapx TYPE char10 VALUE 'BAPE_VBAPX'. " Bape_vbak of type CHAR9
*** BOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
  CONSTANTS: lc_msgid  TYPE msgid VALUE 'ZQTC_R2', " Message identification
             lc_e      TYPE msgty VALUE 'E',       " Message Type
             lc_msgno  TYPE msgno VALUE '242',     " System Message Number
             lc_999    TYPE addr_link VALUE  '999999',  "NPOLINA ERPM2334
             lc_int(3) TYPE c VALUE  'INT'.                  "NPOLINA ERPM2334
*** EOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
* BOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
  DATA : lv_ordertype TYPE auart.
* EOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA : lv_waerk TYPE waerk,
         lv_kbetr TYPE kbetr.
  CLEAR lv_waerk.
  LOOP AT fp_i_ord_alv ASSIGNING FIELD-SYMBOL(<lst_ord_alv>).
    CLEAR lv_kbetr.
    lv_kbetr = <lst_ord_alv>-kbetr.
    PERFORM f_curr_conv_to_intrnl USING <lst_ord_alv>-customer " ED2K921132
                                        <lst_ord_alv>-parvw
                                        <lst_ord_alv>-vkorg
                                        <lst_ord_alv>-vtweg
                                        <lst_ord_alv>-spart
                                        <lst_ord_alv>-vbeln
                                  CHANGING lv_waerk
                                           lv_kbetr.
    <lst_ord_alv>-kbetr = lv_kbetr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <lst_ord_alv>-zlogno
      IMPORTING
        output = <lst_ord_alv>-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDLOOP.
  FREE : lv_waerk, lv_kbetr.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341

* Get Increment of item number in the SD document
  DATA(li_output) = fp_i_ord_alv.

* Sort by Order Type
  SORT li_output BY auart.

  DELETE li_output WHERE auart IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING auart.

  SELECT auart,	 " Sales Document Type
         incpo   " Increment of item number in the SD document
    FROM tvak    " Sales Document Types
    INTO TABLE @DATA(li_tvak)
    FOR ALL ENTRIES IN @li_output
    WHERE auart EQ @li_output-auart.
  IF sy-subrc IS INITIAL.
    SORT li_tvak BY auart.
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = fp_i_ord_alv.

  SORT li_output BY kschl.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING kschl.

  SELECT kappl,	 " Application
         kschl,	 " Condition type
         krech   " Condition class
   FROM t685a    " Conditions: Types: Additional Price Element Data
   INTO TABLE @li_cond_class
   FOR ALL ENTRIES IN @li_output
   WHERE kappl EQ 'V'
   AND   kschl EQ @li_output-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_cond_class BY kschl. "  class
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = fp_i_ord_alv.

  SORT li_output BY matnr vkorg vtweg.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING matnr
                                                      vkorg
                                                      vtweg.
  IF li_output IS NOT INITIAL.
    SELECT matnr, " Material Number
           vkorg, " Sales Organization
           vtweg, " Distribution Channel
           dwerk  " Plant
      FROM mvke   " Sales Data for Material
      INTO TABLE @li_mvke
      FOR ALL ENTRIES IN @li_output
      WHERE matnr = @li_output-matnr
      AND   vkorg = @li_output-vkorg
      AND   vtweg = @li_output-vtweg.

    IF sy-subrc IS INITIAL.
      SORT li_mvke BY matnr vkorg vtweg.
    ENDIF. " IF sy-subrc IS INITIAL
  ENDIF. " IF li_output IS NOT INITIAL

* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected

  PERFORM f_deselect_norm_lines CHANGING fp_i_ord_alv.

  DATA(li_create_reg_order) = fp_i_ord_alv.
  DELETE li_create_reg_order WHERE sel NE abap_true.

  IF li_create_reg_order IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_create_reg_order IS INITIAL

* SOC by NPOLINA ERPM2334 05/Dec/2019
  IF p_devid = c_e225 AND li_create_reg_order[] IS NOT INITIAL.
    SELECT * FROM ze225_staging INTO TABLE i_e225_stage
      FOR ALL ENTRIES IN li_create_reg_order
      WHERE      zuid_upld EQ li_create_reg_order-zoid
        AND zoid EQ li_create_reg_order-identifier AND
        zlogno EQ li_create_reg_order-zlogno.
    IF sy-subrc EQ 0.
      SORT i_e225_stage.
    ENDIF.

    SELECT vbeln ,vbtyp FROM vbak
      INTO TABLE @DATA(li_doc_cat)
      FOR ALL ENTRIES IN @li_create_reg_order
      WHERE vbeln = @li_create_reg_order-vbeln.
    IF sy-subrc EQ 0.
      SORT li_doc_cat BY vbeln.
    ENDIF.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ELSEIF p_devid = c_e101 AND li_create_reg_order[] IS NOT INITIAL.
    SELECT * FROM ze225_staging INTO TABLE i_e101_stage
      FOR ALL ENTRIES IN li_create_reg_order
      WHERE zuid_upld EQ li_create_reg_order-zoid
        AND zoid EQ li_create_reg_order-identifier
        AND zlogno EQ li_create_reg_order-zlogno.
    IF sy-subrc EQ 0.
      SORT i_e101_stage.
    ENDIF.

    SELECT vbeln ,vbtyp FROM vbak
      INTO TABLE @li_doc_cat
      FOR ALL ENTRIES IN @li_create_reg_order
      WHERE vbeln = @li_create_reg_order-vbeln.
    IF sy-subrc EQ 0.
      SORT li_doc_cat BY vbeln.
    ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019

* This loop is run to populate the required internal tables for BAPI
* purchase doc. no. wise
  LOOP AT li_create_reg_order INTO DATA(lst_ord_alv).

    DATA(lv_index) = sy-tabix.

    CLEAR lst_ord_alv_dummy.
    lst_ord_alv_dummy = lst_ord_alv.

*   Whenever we see new header entry, we refresh the tables
    IF lst_ord_alv-parvw  EQ c_ag.
      CLEAR: lst_ord_alv,
             li_itm,
             li_partn,
             li_cond,
             lst_hdrin,
             lst_hrdinx,
             li_ord_sch,
             lv_salesdocin,
             li_return,
             li_text,
             li_extensionin,
             li_bapi_addr.            "NPOLINA ERPM2334
    ENDIF. " IF lst_ord_alv-parvw EQ c_ag

*  Populate the Header records
    IF lst_ord_alv_dummy-posnr IS INITIAL.

*====================================================================*
* Populate Header structure
*====================================================================*
      IF lst_hdrin IS INITIAL.

        lst_hdrin-doc_type   = lst_ord_alv_dummy-auart.
* BOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
        lv_ordertype = lst_ord_alv_dummy-auart.
* EOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
        lst_hdrin-sales_org  = lst_ord_alv_dummy-vkorg.
        lst_hdrin-distr_chan = lst_ord_alv_dummy-vtweg.
        lst_hdrin-division   = lst_ord_alv_dummy-spart.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        lst_hdrin-sales_off  = lst_ord_alv_dummy-vkbur.
* SOC by NPOLINA DM1913(E209) ED2K915483
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_hdrin-sales_off
          IMPORTING
            output = lst_hdrin-sales_off.
* EOC by NPOLINA DM1913(E209) ED2K915483
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        lst_hdrin-cstcndgrp4 = lst_ord_alv_dummy-kdkg4.
        lst_hdrin-cstcndgrp5 = lst_ord_alv_dummy-kdkg5.
        lst_hdrin-purch_no_c = lst_ord_alv_dummy-bstnk.
        lst_hdrin-dlv_block  = lst_ord_alv_dummy-lifsk.
        lst_hdrin-bill_block = lst_ord_alv_dummy-faksk.
        lst_hdrin-ord_reason = lst_ord_alv_dummy-augru.
        lst_hdrin-ref_1_s     = lst_ord_alv_dummy-ihrez.
        lst_hdrin-ref_1_s    = lst_ord_alv_dummy-ihrez_e.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_hdrin-ref_doc_l  = lst_ord_alv_dummy-xblnr.
        lst_hdrin-pymt_meth  = lst_ord_alv_dummy-zlsch.
        lst_hdrin-cstcndgrp3 = lst_ord_alv_dummy-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_ord_alv_dummy-guebg
          IMPORTING
            date_internal            = lst_hdrin-ct_valid_f
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_hdrin-ct_valid_f.
        ENDIF. " IF sy-subrc IS NOT INITIAL

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_ord_alv_dummy-gueen
          IMPORTING
            date_internal            = lst_hdrin-ct_valid_t
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_hdrin-ct_valid_t.
        ENDIF. " IF sy-subrc IS NOT INITIAL

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 "OTCM-52926
        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_ord_alv_dummy-fkdat
          IMPORTING
            date_internal            = lst_hdrin-bill_date
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_hdrin-bill_date.
        ENDIF. " IF sy-subrc IS NOT INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 "OTCM-52926

* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
        " Convert to internal format
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-bsark
          IMPORTING
            output = lst_hdrin-po_method.

        IF lv_ordertype = c_ortype AND lst_hdrin-po_method IS INITIAL.
          MESSAGE e000 WITH text-102.
        ENDIF.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
*====================================================================*
*     Add ZZPROMO to Extension structure of BAPI
*====================================================================*
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
        CLEAR: lst_bape_vbak, lst_bape_vbakx.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267/OTCM-56004
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-zzpromo
          IMPORTING
            output = lst_ord_alv_dummy-zzpromo.

        lst_bape_vbak-vbeln       = lst_ord_alv_dummy-vbeln.
        lst_bape_vbak-zzpromo     = lst_ord_alv_dummy-zzpromo.
        lst_extensionin-structure = lc_bape_vbak .
        lst_extensionin+30(960)   = lst_bape_vbak.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR  lst_extensionin.

        lst_bape_vbakx-vbeln      = lst_ord_alv_dummy-vbeln.
        lst_bape_vbakx-zzpromo    = abap_true.
        lst_extensionin-structure = lc_bape_vbakx.
        lst_extensionin+30(960)   = lst_bape_vbakx.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR  lst_extensionin.

*====================================================================*
*     Header INX structure population for Header
*====================================================================*
        CLEAR lst_hrdinx.

        IF lst_hdrin-doc_type  IS NOT INITIAL.
          lst_hrdinx-doc_type = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-doc_type IS NOT INITIAL
          lst_hrdinx-doc_type = abap_false.
        ENDIF. " IF lst_hdrin-doc_type IS NOT INITIAL

        IF lst_hdrin-sales_org IS NOT INITIAL.
          lst_hrdinx-sales_org = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-sales_org IS NOT INITIAL
          lst_hrdinx-sales_org = abap_false.
        ENDIF. " IF lst_hdrin-sales_org IS NOT INITIAL

        IF lst_hdrin-distr_chan IS NOT INITIAL.
          lst_hrdinx-distr_chan = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-distr_chan IS NOT INITIAL
          lst_hrdinx-distr_chan = abap_false.
        ENDIF. " IF lst_hdrin-distr_chan IS NOT INITIAL

        IF lst_hdrin-division  IS NOT INITIAL.
          lst_hrdinx-division = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-division IS NOT INITIAL
          lst_hrdinx-division = abap_false.
        ENDIF. " IF lst_hdrin-division IS NOT INITIAL

*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
        IF lst_hdrin-sales_off IS NOT INITIAL.
          lst_hrdinx-sales_off = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-sales_off IS NOT INITIAL
          lst_hrdinx-sales_off = abap_false.
        ENDIF. " IF lst_hdrin-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

        IF lst_hdrin-purch_no_c IS NOT INITIAL.
          lst_hrdinx-purch_no_c = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-purch_no_c IS NOT INITIAL
          lst_hrdinx-purch_no_c = abap_true.
        ENDIF. " IF lst_hdrin-purch_no_c IS NOT INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        IF lst_hdrin-ref_doc_l IS NOT INITIAL.
          lst_hrdinx-ref_doc_l = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-ref_doc_l IS NOT INITIAL
          lst_hrdinx-ref_doc_l = abap_false.
        ENDIF. " IF lst_hdrin-ref_doc_l IS NOT INITIAL

        IF lst_hdrin-pymt_meth IS NOT INITIAL.
          lst_hrdinx-pymt_meth = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-pymt_meth IS NOT INITIAL
          lst_hrdinx-pymt_meth = abap_false.
        ENDIF. " IF lst_hdrin-pymt_meth IS NOT INITIAL

        IF lst_hdrin-cstcndgrp3 IS NOT INITIAL.
          lst_hrdinx-cstcndgrp3 = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-cstcndgrp3 IS NOT INITIAL
          lst_hrdinx-cstcndgrp3 = abap_false.
        ENDIF. " IF lst_hdrin-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        IF lst_hdrin-dlv_block IS NOT INITIAL.
          lst_hrdinx-dlv_block = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-dlv_block IS NOT INITIAL
          lst_hrdinx-dlv_block = abap_false.
        ENDIF. " IF lst_hdrin-dlv_block IS NOT INITIAL

        IF lst_hdrin-bill_block IS NOT INITIAL.
          lst_hrdinx-bill_block = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-bill_block IS NOT INITIAL
          lst_hrdinx-bill_block = abap_false.
        ENDIF. " IF lst_hdrin-bill_block IS NOT INITIAL

        IF lst_hdrin-ct_valid_t  IS NOT INITIAL.
          lst_hrdinx-ct_valid_t = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-ct_valid_t IS NOT INITIAL
          lst_hrdinx-ct_valid_t = abap_false.
        ENDIF. " IF lst_hdrin-ct_valid_t IS NOT INITIAL

        IF lst_hdrin-ct_valid_f IS NOT INITIAL.
          lst_hrdinx-ct_valid_f = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-ct_valid_f IS NOT INITIAL
          lst_hrdinx-ct_valid_f = abap_false.
        ENDIF. " IF lst_hdrin-ct_valid_f IS NOT INITIAL
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926
        IF lst_hdrin-bill_date IS NOT INITIAL.
          lst_hrdinx-bill_date = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-bill_date IS NOT INITIAL
          lst_hrdinx-bill_date = abap_false.
        ENDIF. " IF lst_hdrin-bill_date IS NOT INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
        IF lst_hdrin-po_method IS NOT INITIAL.
          lst_hrdinx-po_method = abap_true.
        ELSE. " ELSE -> IF lst_hdrin-ct_valid_f IS NOT INITIAL
          lst_hrdinx-po_method = abap_false.
        ENDIF.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
*====================================================================*
* Populate the conditions table
*====================================================================*
        lst_cond-itm_number = lc_posnr.
        lst_cond-cond_type  = lst_ord_alv_dummy-kschl.
        lst_cond-cond_value = lst_ord_alv_dummy-kbetr.

        APPEND lst_cond TO li_cond.
        CLEAR lst_cond.
*====================================================================*
*     Populating Partner Table
*====================================================================*
        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-parvw
          IMPORTING
            output = lst_partn-partn_role.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-customer
          IMPORTING
            output = lst_partn-partn_numb.

        lst_partn-itm_number = lc_posnr.

        APPEND lst_partn TO li_partn.
        CLEAR lst_partn.
*====================================================================*
*      BAPI TEXT
*====================================================================*
        lst_text-itm_number = lc_posnr.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = lst_ord_alv_dummy-stxh.

        APPEND lst_text TO li_text.
        CLEAR  lst_text.

*     Get Increment of item number in the SD document
        IF lst_ord_alv_dummy-auart IS NOT INITIAL.
          DATA(lst_tvak) = li_tvak[ auart = lst_ord_alv_dummy-auart ].
        ENDIF. " IF lst_ord_alv_dummy-auart IS NOT INITIAL

      ELSE. " ELSE -> IF lst_hdrin IS INITIAL
*====================================================================*
*     Populating Partner Table
*====================================================================*
        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-parvw
          IMPORTING
            output = lst_partn-partn_role.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-customer
          IMPORTING
            output = lst_partn-partn_numb.

        lst_partn-itm_number = lc_posnr.

        APPEND lst_partn TO li_partn.
        CLEAR lst_partn.
      ENDIF. " IF lst_hdrin IS INITIAL

    ELSE. " ELSE -> IF lst_ord_alv_dummy-posnr IS INITIAL

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-posnr
        IMPORTING
          output = lst_ord_alv_dummy-posnr.

      READ TABLE li_itm WITH KEY itm_number =
      lst_ord_alv_dummy-posnr TRANSPORTING NO FIELDS.
      IF sy-subrc IS NOT INITIAL.

*====================================================================*
*    Check BOM to determine line item numbers
*====================================================================*

        READ TABLE li_mvke ASSIGNING FIELD-SYMBOL(<lfs_mvke>)
        WITH KEY matnr = lst_ord_alv_dummy-matnr " Material Number
                 vkorg = lst_hdrin-sales_org     " Sales Organization
                 vtweg = lst_hdrin-distr_chan    " Distribution Channel
                 BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          IF <lfs_mvke>-dwerk IS NOT INITIAL.

            PERFORM f_get_bom_norm USING
                                       lst_ord_alv_dummy-matnr
                                       <lfs_mvke>-dwerk
*                                       lst_ord_alv_dummy-zmeng
                                       lst_ord_alv_dummy-kwmeng
                                       lv_index
                                       lst_tvak-incpo
                              CHANGING li_create_reg_order.
          ENDIF. " IF <lfs_mvke>-dwerk IS NOT INITIAL
        ENDIF. " IF sy-subrc IS INITIAL

*   If not the Sold to lines, they are the ship to Lines ( PARVW = 'WE')  in an order
*   Which can be multiple and is considered as the ITEM lines of the Order
*====================================================================*
* First populate item table
*====================================================================*
        lst_itm-itm_number     =  lst_ord_alv_dummy-posnr.
        lst_itm-material       =  lst_ord_alv_dummy-matnr.
*        lst_itm-target_qty     =  lst_ord_alv_dummy-zmeng.
        lst_itm-target_qty     =  lst_ord_alv_dummy-kwmeng.
        lst_itm-item_categ     =  lst_ord_alv_dummy-pstyv.
        lst_itm-hg_lv_item     =  lc_posnr.
        lst_itm-ref_1_s         =  lst_ord_alv_dummy-ihrez.
        lst_itm-ref_1_s        =  lst_ord_alv_dummy-ihrez_e.
        lst_itm-cstcndgrp4     =  lst_ord_alv_dummy-kdkg4.
        lst_itm-cstcndgrp5     =  lst_ord_alv_dummy-kdkg5.
        lst_itm-reason_rej     =  lst_ord_alv_dummy-abgru.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
        lst_itm-cstcndgrp3     =  lst_ord_alv_dummy-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
        " Convert to internal format
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-kdkg2
          IMPORTING
            output = lst_itm-cstcndgrp2.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
* BOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
        IF lv_ordertype = c_ortype.
          IF  ( lst_itm-item_categ  = c_itmcat1 OR lst_itm-item_categ = c_itmcat2 ) AND lst_itm-cstcndgrp2 IS INITIAL.
            MESSAGE e000 WITH text-101.
          ENDIF.
        ENDIF.
* EOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *

* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
        " Convert to internal format
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-bsark
          IMPORTING
            output = lst_itm-po_method.

        IF lv_ordertype = c_ortype AND lst_itm-po_method IS INITIAL.
          MESSAGE e000 WITH text-102.
        ENDIF.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *

        APPEND lst_itm TO li_itm.
        CLEAR lst_itm.

        lst_ord_sch-itm_number = lst_ord_alv_dummy-posnr.
*        lst_ord_sch-req_qty    = lst_ord_alv_dummy-zmeng.
        lst_ord_sch-req_qty    = lst_ord_alv_dummy-kwmeng.

        APPEND lst_ord_sch TO li_ord_sch.
        CLEAR  lst_ord_sch.
*====================================================================*
* Populate the conditions table
*====================================================================*
        lst_cond-itm_number = lst_ord_alv_dummy-posnr.
        lst_cond-cond_type  = lst_ord_alv_dummy-kschl.

        READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
        WITH KEY kschl = lst_ord_alv_dummy-kschl
        BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          IF <lfs_cond>-krech NE 'A'.
            lst_cond-cond_value = lst_ord_alv_dummy-kbetr / 10.
          ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
            lst_cond-cond_value = lst_ord_alv_dummy-kbetr.
          ENDIF. " IF <lfs_cond>-krech NE 'A'
        ENDIF. " IF sy-subrc IS INITIAL

        APPEND lst_cond TO li_cond.
        CLEAR lst_cond.
*====================================================================*
*      BAPI TEXT
*====================================================================*
        lst_text-itm_number = lst_ord_alv_dummy-posnr.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = lst_ord_alv_dummy-stxh.

        APPEND lst_text TO li_text.
        CLEAR  lst_text.
*====================================================================*
* Populate the Extensionin table
*====================================================================*
        lst_bape_vbap-vbeln       = lst_ord_alv_dummy-vbeln.
        lst_bape_vbap-posnr       = lst_ord_alv_dummy-posnr.
        lst_bape_vbap-zzpromo     = lst_ord_alv_dummy-zzpromo.
        lst_extensionin-structure = lc_bape_vbap.
        lst_extensionin+30(960)   = lst_bape_vbap.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR lst_extensionin.

        CLEAR lst_bape_vbapx.
        lst_bape_vbapx-vbeln      = lst_ord_alv_dummy-vbeln.
        lst_bape_vbapx-posnr      = lst_ord_alv_dummy-posnr.
        lst_bape_vbapx-zzpromo    = abap_true.
        lst_extensionin-structure = lc_bape_vbapx.
        lst_extensionin+30(960)   = lst_bape_vbapx.
        APPEND lst_extensionin TO li_extensionin.
        CLEAR  lst_extensionin.
*====================================================================*
*     Populate partner details
*====================================================================*

        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-parvw
          IMPORTING
            output = lst_ord_alv_dummy-parvw.


        lst_partn-partn_role = lst_ord_alv_dummy-parvw.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-partner
          IMPORTING
            output = lst_partn-partn_numb.


*** BOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
        SELECT kunnr,
               vkorg,
               vtweg,
               spart " Division
          FROM knvv  " Customer Master Sales Data
          INTO TABLE @DATA(li_knvv)
          WHERE kunnr = @lst_partn-partn_numb
          AND vkorg = @lst_hdrin-sales_org
          AND vtweg = @lst_hdrin-distr_chan
          AND spart = @lst_hdrin-division.
        IF sy-subrc NE 0.

          st_err_msg-msgid = lc_msgid.
          st_err_msg-msgty = lc_e.
          st_err_msg-msgno = lc_msgno.
          st_err_msg-msgv1 = lst_partn-partn_numb.
          st_err_msg-msgv2 = lst_hdrin-sales_org.
          APPEND st_err_msg TO i_err_msg.

* SOC by NPOLINA ERPM2334 05/Dec/2019
          IF p_devid = c_e225.
            FREE:i_return[].
            st_err_msg-msgid = lc_msgid.
            st_return-type = lc_e.
            st_return-number = lc_msgno.
            st_return-message = lst_partn-partn_numb.
            st_return-message_v1 = lst_hdrin-sales_org.
            APPEND st_return TO i_return.
            PERFORM f_update_log_staging_e225 USING lst_ord_alv_dummy-log_handle
                                                    lv_salesdocin lst_ord_alv_dummy-zlogno.
          ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019

          CLEAR: st_err_msg.
          CONTINUE.
        ENDIF. " IF sy-subrc NE 0

*** EOC BY SAYANDAS on 31-JAN-2018 for ERP-6266

        lst_partn-itm_number = lst_ord_alv_dummy-posnr.
        APPEND lst_partn TO li_partn.
        CLEAR lst_partn.

      ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL
*====================================================================*
*     Populate partner details
*====================================================================*

        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-parvw
          IMPORTING
            output = lst_ord_alv_dummy-parvw.


        lst_partn-partn_role = lst_ord_alv_dummy-parvw.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_ord_alv_dummy-partner
          IMPORTING
            output = lst_partn-partn_numb.


*** BOC BY SAYANDAS on 31-JAN-2018 for ERP-6266
*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
        SELECT kunnr,
               vkorg,
               vtweg,
               spart " Division
          FROM knvv  " Customer Master Sales Data
          INTO TABLE @li_knvv
          WHERE kunnr = @lst_partn-partn_numb
          AND vkorg = @lst_hdrin-sales_org
          AND vtweg = @lst_hdrin-distr_chan
          AND spart = @lst_hdrin-division.
        IF sy-subrc NE 0.

          st_err_msg-msgid = lc_msgid.
          st_err_msg-msgty = lc_e.
          st_err_msg-msgno = lc_msgno.
          st_err_msg-msgv1 = lst_partn-partn_numb.
          st_err_msg-msgv2 = lst_hdrin-sales_org.
          APPEND st_err_msg TO i_err_msg.

* SOC by NPOLINA ERPM2334 05/Dec/2019
          IF p_devid = c_e225.
            FREE:i_return[].
            st_err_msg-msgid = lc_msgid.
            st_return-type = lc_e.
            st_return-number = lc_msgno.
            st_return-message = lst_partn-partn_numb.
            st_return-message_v1 = lst_hdrin-sales_org.
            FREE:i_return[].
            APPEND st_return TO i_return.
            PERFORM f_update_log_staging_e225 USING lst_ord_alv_dummy-log_handle
                                                    lv_salesdocin lst_ord_alv_dummy-zlogno.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            ELSE.
              st_err_msg-msgid = lc_msgid.
              st_return-id = lc_msgid.
              st_return-type = lc_e.
              st_return-number = lc_msgno.
              st_return-message_v1 = lst_partn-partn_numb.
              st_return-message_v2 = lst_hdrin-sales_org.
              FREE:i_return[].
              APPEND st_return TO i_return.
              PERFORM f_update_log_staging_e101 USING lst_ord_alv_dummy-log_handle
                                                      lv_salesdocin lst_ord_alv_dummy-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
          ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019

          CLEAR: st_err_msg.
          CONTINUE.
        ENDIF. " IF sy-subrc NE 0

*** EOC BY SAYANDAS on 31-JAN-2018 for ERP-6266


        lst_partn-itm_number = lst_ord_alv_dummy-posnr.
        APPEND lst_partn TO li_partn.
        CLEAR lst_partn.

      ENDIF. " IF sy-subrc IS NOT INITIAL

    ENDIF. " IF lst_ord_alv_dummy-posnr IS INITIAL

* SOC by NPOLINA ERPM2334 05/Dec/2019
    IF p_devid EQ c_e225 AND lst_ord_alv_dummy-bp_email IS NOT INITIAL.
* Populate Partner Email ID
      CLEAR:st_addr.
      st_addr-partner = lst_ord_alv_dummy-customer.
      st_addr-parvw = lst_ord_alv_dummy-parvw.
      st_addr-posnr = lst_ord_alv_dummy-posnr.
      st_addr-email = lst_ord_alv_dummy-bp_email.
      APPEND st_addr TO i_addr.

    ENDIF.   "P_devid eq C_E225 and BP_EMAIL not initial
** EOC by NPOLINA ERPM2334 05/Dec/2019

*   Before a new header record/ last entry - Create contract
    IF lv_index EQ lines( li_create_reg_order ).
      DATA(lv_create_norm) = abap_true.
    ELSE. " ELSE -> IF lv_index EQ lines( li_create_reg_order )
      IF li_create_reg_order[ ( lv_index + 1 ) ]-parvw EQ c_ag.
        lv_create_norm = abap_true.
      ENDIF. " IF li_create_reg_order[ ( lv_index + 1 ) ]-parvw EQ c_ag
    ENDIF. " IF lv_index EQ lines( li_create_reg_order )

    IF lv_create_norm EQ abap_true.
      CLEAR lv_create_norm.
*====================================================================*
*     Call Bapi
*====================================================================*
      CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
        EXPORTING
          order_header_in     = lst_hdrin
          order_header_inx    = lst_hrdinx
        IMPORTING
          salesdocument       = lv_salesdocin
        TABLES
          return              = li_return
          order_items_in      = li_itm
          order_schedules_in  = li_ord_sch
          order_partners      = li_partn
          order_conditions_in = li_cond
          order_text          = li_text
          extensionin         = li_extensionin
          partneraddresses    = li_bapi_addr.   "ERPM2334
      IF NOT li_return IS INITIAL.
* SOC by NPOLINA ERPM2334 05/Dec/2019
        IF p_devid = c_e225.
          CLEAR:v_err.
          i_return[] = li_return[].
          PERFORM f_update_log_staging_e225 USING lst_ord_alv_dummy-log_handle
                                                  lv_salesdocin lst_ord_alv_dummy-zlogno.
          IF i_addr IS NOT INITIAL AND v_err IS INITIAL.
            PERFORM f_update_partner_email USING lv_salesdocin lst_hdrin lst_hrdinx.
          ENDIF.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ELSE. " IF p_devid = c_e225.
          CLEAR:v_err.
          i_return[] = li_return[].
          PERFORM f_update_log_staging_e101 USING lst_ord_alv_dummy-log_handle
                                                  lv_salesdocin lst_ord_alv_dummy-zlogno.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        ENDIF.
* EOC by NPOLINA ERPM2334 05/Dec/2019

        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc IS INITIAL.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: lst_return,
                 st_err_msg.
        ELSE. " ELSE -> IF sy-subrc IS INITIAL

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' .

          READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
          IF sy-subrc IS INITIAL.
            st_err_msg-wbeln = lv_salesdocin.
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return,
                   st_err_msg.
          ENDIF. " IF sy-subrc IS INITIAL
        ENDIF. " IF sy-subrc IS INITIAL
      ENDIF. " IF NOT li_return IS INITIAL

    ENDIF. " IF lv_create_norm EQ abap_true
  ENDLOOP  . " LOOP AT li_create_reg_order INTO DATA(lst_ord_alv)
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  PERFORM f_send_email_move_file.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0

ENDFORM.
*&-----------------------------------*
*&      Form  F_CHANGE_REG_ORD
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_ORD_ALV  text
*-----------------------------------*
FORM f_change_reg_ord  USING    fp_i_ord_alv TYPE tt_order_alv.

  TYPES: BEGIN OF lty_cond_class,
           kappl TYPE kappl,  " Application
           kschl TYPE kscha,  " Condition Type
           krech TYPE krech,  " Condition Class
         END OF lty_cond_class,

         BEGIN OF lty_konv,
           knumv TYPE knumv,  " Number of the document condition
           kposn TYPE kposn,  " Condition item number
           stunr TYPE stunr,  " Step number
           zaehk TYPE dzaehk, " Condition counter
           kschl TYPE kscha,  " Condition type
           vbeln TYPE vbeln,  " Sales Doc Number
         END OF lty_konv.
*====================================================================*
*       Local Internal Table
*====================================================================*
  DATA: li_return             TYPE STANDARD TABLE OF bapiret2,   " Return messages
        li_cond_class         TYPE STANDARD TABLE OF lty_cond_class
                          INITIAL SIZE 0,
        li_konv               TYPE STANDARD TABLE OF lty_konv
                          INITIAL SIZE 0,
        li_itm                TYPE STANDARD TABLE OF bapisditm,  " Item data
        li_ord_sch            TYPE STANDARD TABLE OF bapischdl,  " Communication Fields for Maintaining SD Doc. Schedule Lines
        li_ord_schx           TYPE STANDARD TABLE OF bapischdlx, " Communication Fields for Maintaining SD Doc. Schedule Lines
        li_items_inx          TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
        li_partner            TYPE STANDARD TABLE OF bapiparnrc, " Partner
        li_cond               TYPE STANDARD TABLE OF bapicond,   " Contract conditions
        li_condx              TYPE STANDARD TABLE OF bapicondx,  " Contract conditions
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
        li_change_reg_ord_chg TYPE tt_order_alv_chg,
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
        li_extensionin        TYPE STANDARD TABLE OF bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_extensioninx       TYPE STANDARD TABLE OF bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_text               TYPE STANDARD TABLE OF bapisdtext, " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
*====================================================================*
*       Local Work-area
*====================================================================*
        lst_hdrin             TYPE bapisdh1,   " Header data
        lst_text              TYPE bapisdtext, " Communication fields: SD texts
        lst_hrdinx            TYPE bapisdh1x,  " Header data extended for promo code
        lst_itm               TYPE bapisditm,  " Item data
        lst_partner           TYPE bapiparnrc, " Partner
        lst_ord_sch           TYPE bapischdl,  " Communication Fields for Maintaining SD Doc. Schedule Lines
        lst_bape_vbak         TYPE bape_vbak,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbakx        TYPE bape_vbakx, " BAPI Interface for Customer Enhancements to Table VBAKX
        lst_bape_vbap         TYPE bape_vbap,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbapx        TYPE bape_vbapx, " BAPI Interface for Customer Enhancements to Table VBAK
        lst_extensionin       TYPE bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        lst_cond              TYPE bapicond,   " Contract conditions
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*        lst_ord_alv_dummy TYPE ty_ord_alv,
        lst_ord_alv_dummy     TYPE ty_ord_alv_chg,
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
        lst_return            TYPE bapiret2, " For status of contract creation
*====================================================================*
*       Local Variable
*====================================================================*
        lv_salesdocin         TYPE bapivbeln-vbeln. "for export field
*====================================================================*
*       Local Constants
*====================================================================*
  CONSTANTS:lc_bape_vbak  TYPE char9  VALUE 'BAPE_VBAK',  " Bape_vbak of type CHAR9
            lc_bape_vbap  TYPE char9  VALUE 'BAPE_VBAP',  " Bape_vbak of type CHAR9
            lc_posnr      TYPE posnr  VALUE '000000',     " Item number of the SD document
            lc_bape_vbakx TYPE char10 VALUE 'BAPE_VBAKX', " Bape_vbak of type CHAR9
            lc_bape_vbapx TYPE char10 VALUE 'BAPE_VBAPX'. " Bape_vbak of type CHAR9

* BOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
  DATA : lv_ordertype TYPE auart.
* EOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* first arrange the data in bapi compatible form
* Moved the Logic After ALV Table Refresh Below
*  SORT fp_i_ord_alv BY vbeln
*                       posnr.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* first arrange the data in bapi compatible form
  SORT fp_i_ord_alv BY vbeln
                       posnr.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA : lv_waerk TYPE waerk,
         lv_kbetr TYPE kbetr.
  CLEAR lv_waerk.
  LOOP AT fp_i_ord_alv ASSIGNING FIELD-SYMBOL(<lst_ord_alv>).
    CLEAR lv_kbetr.
    lv_kbetr = <lst_ord_alv>-kbetr.
    PERFORM f_curr_conv_to_intrnl USING <lst_ord_alv>-customer " ED2K921132
                                        <lst_ord_alv>-parvw
                                        <lst_ord_alv>-vkorg
                                        <lst_ord_alv>-vtweg
                                        <lst_ord_alv>-spart
                                        <lst_ord_alv>-vbeln
                                  CHANGING lv_waerk
                                           lv_kbetr.
    <lst_ord_alv>-kbetr = lv_kbetr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*   Convert Log Number to Internal Format
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <lst_ord_alv>-zlogno
      IMPORTING
        output = <lst_ord_alv>-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDLOOP.
  FREE : lv_waerk, lv_kbetr.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341

* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected

  PERFORM f_deselect_norm_lines CHANGING fp_i_ord_alv.

  DATA(li_change_reg_ord) = fp_i_ord_alv.
  DELETE li_change_reg_ord WHERE sel NE abap_true.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_update_log_2h CHANGING li_change_reg_ord
                                   fp_i_ord_alv.
* Update Logs to Staging Table
  IF i_e101_stage[] IS NOT INITIAL.
    MODIFY ze225_staging FROM TABLE i_e101_stage.
  ELSE.
    IF li_change_reg_ord[] IS NOT INITIAL.
      SELECT * FROM ze225_staging INTO TABLE i_e101_stage
        FOR ALL ENTRIES IN li_change_reg_ord
        WHERE zuid_upld EQ li_change_reg_ord-zoid
          AND zoid      EQ li_change_reg_ord-identifier
          AND zlogno    EQ li_change_reg_ord-zlogno.
      IF sy-subrc EQ 0.
        SORT i_e101_stage.
      ENDIF.
    ENDIF.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  IF li_change_reg_ord IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_change_reg_ord IS INITIAL

  SELECT kappl,	 " Application
         kschl,	 " Condition type
         krech   " Condition class
   FROM t685a    " Conditions: Types: Additional Price Element Data
   INTO TABLE @li_cond_class
   FOR ALL ENTRIES IN @li_change_reg_ord
   WHERE kappl EQ 'V'
   AND   kschl EQ @li_change_reg_ord-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_cond_class BY kschl. "  class
  ENDIF. " IF sy-subrc IS INITIAL

  SELECT a~knumv,
         a~kposn,
         a~stunr,
         a~zaehk,
         a~kschl,
         b~vbeln " Sales Document
    INTO TABLE @li_konv
    FROM konv AS a INNER JOIN vbak AS b
    ON a~knumv EQ b~knumv
    FOR ALL ENTRIES IN @li_change_reg_ord
    WHERE b~vbeln = @li_change_reg_ord-vbeln
    AND   a~kschl = @li_change_reg_ord-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_konv BY vbeln kposn kschl.
  ENDIF. " IF sy-subrc IS INITIAL

*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
  PERFORM f_change_pos_rord USING li_change_reg_ord
                            CHANGING li_change_reg_ord_chg.
* This loop is run to populate the required internal tables for BAPI
* Purchase doc. no. wise
  LOOP AT li_change_reg_ord_chg INTO DATA(lst_ord_alv).
*  LOOP AT li_change_reg_ord INTO DATA(lst_ord_alv).
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
    CLEAR lst_ord_alv_dummy.
    lst_ord_alv_dummy = lst_ord_alv.

*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*    AT NEW customer.
    AT NEW vbeln.
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
      CLEAR:  lst_ord_alv.
      CLEAR:  li_itm,
              li_items_inx,
              li_cond,
              li_condx,
              lst_hdrin,
              lst_hrdinx,
              li_partner,
              lv_salesdocin,
              li_ord_sch,
              li_text,
              li_extensionin,
              li_extensioninx,
              li_return.
    ENDAT.

*  There will always be one Sold to party(Parve = 'AG') in an order
*  Populate the Header records
    IF ( lst_ord_alv_dummy-parvw  EQ c_ag
    AND  lst_ord_alv_dummy-posnr  EQ space ).

*====================================================================*
* Populate Header structure
*====================================================================*
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      lv_salesdocin        = lst_ord_alv_dummy-vbeln.
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lv_salesdocin
        IMPORTING
          output = lv_salesdocin.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
* BOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
      lv_ordertype = lst_ord_alv_dummy-auart.
* EOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *

      lst_hdrin-sales_org  = lst_ord_alv_dummy-vkorg.
      lst_hdrin-distr_chan = lst_ord_alv_dummy-vtweg.
      lst_hdrin-division   = lst_ord_alv_dummy-spart.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_hdrin-sales_off  = lst_ord_alv_dummy-vkbur.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_hdrin-cstcndgrp4  = lst_ord_alv_dummy-kdkg4.
      lst_hdrin-cstcndgrp5  = lst_ord_alv_dummy-kdkg5.
      lst_hdrin-purch_no_c = lst_ord_alv_dummy-bstnk.
      lst_hdrin-dlv_block  = lst_ord_alv_dummy-lifsk.
      lst_hdrin-bill_block = lst_ord_alv_dummy-faksk.
      lst_hdrin-ord_reason = lst_ord_alv_dummy-augru.
      lst_hdrin-ref_1_s     = lst_ord_alv_dummy-ihrez.
      lst_hdrin-ref_1_s    = lst_ord_alv_dummy-ihrez_e.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_hdrin-ref_doc_l  =  lst_ord_alv_dummy-xblnr.
      lst_hdrin-pymt_meth  =  lst_ord_alv_dummy-zlsch.
      lst_hdrin-cstcndgrp3 =  lst_ord_alv_dummy-kdkg3.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-bsark
        IMPORTING
          output = lst_hdrin-po_method.

      IF lv_ordertype = c_ortype AND lst_hdrin-po_method IS INITIAL.
        MESSAGE e000 WITH text-102.
      ENDIF.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *

      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_ord_alv_dummy-guebg
        IMPORTING
          date_internal            = lst_hdrin-ct_valid_f
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_hdrin-ct_valid_f.
      ENDIF. " IF sy-subrc IS NOT INITIAL

      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_ord_alv_dummy-gueen
        IMPORTING
          date_internal            = lst_hdrin-ct_valid_t
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_hdrin-ct_valid_t.
      ENDIF. " IF sy-subrc IS NOT INITIAL

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 "OTCM-52926
        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_ord_alv_dummy-fkdat
          IMPORTING
            date_internal            = lst_hdrin-bill_date
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_hdrin-bill_date.
        ENDIF. " IF sy-subrc IS NOT INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 "OTCM-52926

*====================================================================*
*     Add ZZPROMO to Extension structure of BAPI
*====================================================================*

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-zzpromo
        IMPORTING
          output = lst_ord_alv_dummy-zzpromo.

      lst_extensionin-structure = lc_bape_vbak .
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-vbeln
        IMPORTING
          output = lv_salesdocin.
      " lst_extensionin+30(960)   = lst_ord_alv_dummy-vbeln.
      lst_extensionin+30(960) = lv_salesdocin.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      APPEND lst_extensionin TO li_extensionin.
      CLEAR  lst_extensionin.

*====================================================================*
*     Header INX structure population for Header
*====================================================================*
      CLEAR lst_hrdinx.

      lst_hrdinx-updateflag = c_u.

      IF lst_hdrin-sales_org IS NOT INITIAL.
        lst_hrdinx-sales_org = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-sales_org IS NOT INITIAL
        lst_hrdinx-sales_org = abap_false.
      ENDIF. " IF lst_hdrin-sales_org IS NOT INITIAL

      IF lst_hdrin-distr_chan IS NOT INITIAL.
        lst_hrdinx-distr_chan = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-distr_chan IS NOT INITIAL
        lst_hrdinx-distr_chan = abap_false.
      ENDIF. " IF lst_hdrin-distr_chan IS NOT INITIAL

      IF lst_hdrin-division  IS NOT INITIAL.
        lst_hrdinx-division = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-division IS NOT INITIAL
        lst_hrdinx-division = abap_false.
      ENDIF. " IF lst_hdrin-division IS NOT INITIAL

*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      IF lst_hdrin-sales_off IS NOT INITIAL.
        lst_hrdinx-sales_off = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-sales_off IS NOT INITIAL
        lst_hrdinx-sales_off = abap_false.
      ENDIF. " IF lst_hdrin-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

      IF lst_hdrin-purch_no_c IS NOT INITIAL.
        lst_hrdinx-purch_no_c = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-purch_no_c IS NOT INITIAL
        lst_hrdinx-purch_no_c = abap_true.
      ENDIF. " IF lst_hdrin-purch_no_c IS NOT INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_hdrin-ref_doc_l IS NOT INITIAL.
        lst_hrdinx-ref_doc_l = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-ref_doc_l IS NOT INITIAL
        lst_hrdinx-ref_doc_l = abap_false.
      ENDIF. " IF lst_hdrin-ref_doc_l IS NOT INITIAL

      IF lst_hdrin-pymt_meth IS NOT INITIAL.
        lst_hrdinx-pymt_meth = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-pymt_meth IS NOT INITIAL
        lst_hrdinx-pymt_meth = abap_false.
      ENDIF. " IF lst_hdrin-pymt_meth IS NOT INITIAL

      IF lst_hdrin-cstcndgrp3 IS NOT INITIAL.
        lst_hrdinx-cstcndgrp3 = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-cstcndgrp3 IS NOT INITIAL
        lst_hrdinx-cstcndgrp3 = abap_false.
      ENDIF. " IF lst_hdrin-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081

      IF lst_hdrin-dlv_block IS NOT INITIAL.
        lst_hrdinx-dlv_block = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-dlv_block IS NOT INITIAL
        lst_hrdinx-dlv_block = abap_false.
      ENDIF. " IF lst_hdrin-dlv_block IS NOT INITIAL

      IF lst_hdrin-bill_block IS NOT INITIAL.
        lst_hrdinx-bill_block = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-bill_block IS NOT INITIAL
        lst_hrdinx-bill_block = abap_false.
      ENDIF. " IF lst_hdrin-bill_block IS NOT INITIAL

      IF lst_hdrin-ct_valid_t  IS NOT INITIAL.
        lst_hrdinx-ct_valid_t = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-ct_valid_t IS NOT INITIAL
        lst_hrdinx-ct_valid_t = abap_false.
      ENDIF. " IF lst_hdrin-ct_valid_t IS NOT INITIAL

      IF lst_hdrin-ct_valid_f IS NOT INITIAL.
        lst_hrdinx-ct_valid_f = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-ct_valid_f IS NOT INITIAL
        lst_hrdinx-ct_valid_f = abap_false.
      ENDIF. " IF lst_hdrin-ct_valid_f IS NOT INITIAL

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926
      IF lst_hdrin-bill_date IS NOT INITIAL.
        lst_hrdinx-bill_date = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-bill_date IS NOT INITIAL
        lst_hrdinx-bill_date = abap_false.
      ENDIF. " IF lst_hdrin-bill_date IS NOT INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 OTCM-52926

* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
      IF lst_hdrin-po_method IS NOT INITIAL.
        lst_hrdinx-po_method = abap_true.
      ELSE. " ELSE -> IF lst_hdrin-ct_valid_f IS NOT INITIAL
        lst_hrdinx-po_method = abap_false.
      ENDIF. " IF lst_hdrin-ct_valid_f IS NOT INITIAL
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
*====================================================================*
* Populate the conditions table
*====================================================================*
      lst_cond-itm_number = lst_ord_alv_dummy-posnr.
      lst_cond-cond_type  = lst_ord_alv_dummy-kschl.
      lst_cond-cond_value = lst_ord_alv_dummy-kbetr.

      APPEND lst_cond TO li_cond.
      CLEAR lst_cond.
*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_text-itm_number = lc_posnr.
      lst_text-text_id    = v_tdid.
      lst_text-langu      = sy-langu.
      lst_text-format_col = c_format.
      lst_text-text_line  = lst_ord_alv_dummy-stxh.

      APPEND lst_text TO li_text.
      CLEAR  lst_text.

*====================================================================*
*     Add ZZPROMO to Extension structure of BAPI
*====================================================================*
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      CLEAR: lst_bape_vbak, lst_bape_vbakx.               "OTCM-56004
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-zzpromo
        IMPORTING
          output = lst_ord_alv_dummy-zzpromo.

* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-vbeln
        IMPORTING
          output = lv_salesdocin.

      "lst_bape_vbak-vbeln       = lst_ord_alv_dummy-vbeln.
      lst_bape_vbak-vbeln       = lv_salesdocin.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      lst_bape_vbak-zzpromo     = lst_ord_alv_dummy-zzpromo.
      lst_extensionin-structure = lc_bape_vbak .
      lst_extensionin+30(960)   = lst_bape_vbak.
      APPEND lst_extensionin TO li_extensionin.
      CLEAR  lst_extensionin.

* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      " lst_bape_vbakx-vbeln      = lst_ord_alv_dummy-vbeln.
      " assign internal format converted value
      lst_bape_vbakx-vbeln      = lv_salesdocin.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
*      lst_bape_vbakx-vbeln      = lst_ord_alv_dummy-vbeln.
      lst_bape_vbakx-zzpromo    = abap_true.
      lst_extensionin-structure = lc_bape_vbakx.
      lst_extensionin+30(960)   = lst_bape_vbakx.
      APPEND lst_extensionin TO li_extensionin.
      CLEAR  lst_extensionin.

    ELSEIF  lst_ord_alv_dummy-parvw EQ c_we.
*   If not the Sold to lines, they are the ship to Lines ( PARVW = 'WE')  in an order
*   Which can be multiple and is considered as the ITEM lines of the Order
*====================================================================*
* First populate item table
*====================================================================*
      lst_itm-itm_number     =  lst_ord_alv_dummy-posnr.
      lst_itm-material       =  lst_ord_alv_dummy-matnr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      lst_itm-target_qty     =  lst_ord_alv_dummy-zmeng.
      lst_itm-target_qty     =  lst_ord_alv_dummy-kwmeng.  "OTCM-47267
      lst_itm-plant          =  lst_ord_alv_dummy-plant.   "OTCM-47267
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      lst_itm-item_categ     =  lst_ord_alv_dummy-pstyv.
      lst_itm-hg_lv_item     =  lc_posnr.
      lst_itm-ref_1_s         =  lst_ord_alv_dummy-ihrez.
      lst_itm-ref_1_s        =  lst_ord_alv_dummy-ihrez_e.
      lst_itm-cstcndgrp4     =  lst_ord_alv_dummy-kdkg4.
      lst_itm-cstcndgrp5     =  lst_ord_alv_dummy-kdkg5.
      lst_itm-reason_rej     =  lst_ord_alv_dummy-abgru.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_itm-cstcndgrp3     =  lst_ord_alv_dummy-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-kdkg2
        IMPORTING
          output = lst_itm-cstcndgrp2.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
* BOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
      IF lv_ordertype = c_ortype.
        IF  ( lst_itm-item_categ = c_itmcat1 OR lst_itm-item_categ = c_itmcat2 ) AND lst_itm-cstcndgrp2 IS INITIAL.
          MESSAGE e000 WITH text-101.
        ENDIF.
      ENDIF.
* EOC by Lahiru on 09/29/2020 for OTCM-4390 with ED2K919704 *
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-bsark
        IMPORTING
          output = lst_itm-po_method.

      IF lv_ordertype = c_ortype AND lst_itm-po_method IS INITIAL.
        MESSAGE e000 WITH text-102.
      ENDIF.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734  *

      APPEND lst_itm TO li_itm.
      CLEAR lst_itm.

      lst_ord_sch-itm_number = lst_ord_alv_dummy-posnr.
      lst_ord_sch-sched_line = '0001'.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      lst_ord_sch-req_qty    = lst_ord_alv_dummy-zmeng.
      lst_ord_sch-req_qty    = lst_ord_alv_dummy-kwmeng.  "OTCM-47267
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

      APPEND lst_ord_sch TO li_ord_sch.
      CLEAR  lst_ord_sch.

      APPEND INITIAL LINE TO li_ord_schx ASSIGNING
      FIELD-SYMBOL(<lfs_ord_schx>).
      IF <lfs_ord_schx> IS ASSIGNED.
        <lfs_ord_schx>-itm_number = lst_ord_alv_dummy-posnr.
        <lfs_ord_schx>-sched_line = '0001'.
        <lfs_ord_schx>-updateflag = 'U'.
        <lfs_ord_schx>-req_qty    = abap_true.
      ENDIF. " IF <lfs_ord_schx> IS ASSIGNED
*====================================================================*
* Populate the conditions table
*====================================================================*
      lst_cond-itm_number = lst_ord_alv_dummy-posnr.
      lst_cond-cond_type  = lst_ord_alv_dummy-kschl.

      READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
      WITH KEY kschl = lst_ord_alv_dummy-kschl
      BINARY SEARCH.
      IF sy-subrc IS INITIAL.
        IF <lfs_cond>-krech NE 'A'.
          lst_cond-cond_value = lst_ord_alv_dummy-kbetr / 10.
        ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
          lst_cond-cond_value = lst_ord_alv_dummy-kbetr.
        ENDIF. " IF <lfs_cond>-krech NE 'A'
      ENDIF. " IF sy-subrc IS INITIAL

      READ TABLE li_konv ASSIGNING FIELD-SYMBOL(<lfs_konv>)
      WITH KEY vbeln = lst_ord_alv_dummy-vbeln
               kposn = lst_ord_alv_dummy-posnr
               kschl = lst_ord_alv_dummy-kschl
               BINARY SEARCH.
      IF sy-subrc IS INITIAL.

        lst_cond-cond_st_no = <lfs_konv>-stunr.
        lst_cond-cond_count = <lfs_konv>-zaehk.

*       Change existing condition in line item level
        APPEND INITIAL LINE TO li_condx ASSIGNING
        FIELD-SYMBOL(<lfs_contract_condx>).

        IF <lfs_contract_condx> IS ASSIGNED.
          <lfs_contract_condx>-itm_number = lst_ord_alv_dummy-posnr.
          <lfs_contract_condx>-cond_st_no = <lfs_konv>-stunr.
          <lfs_contract_condx>-cond_count = <lfs_konv>-zaehk.
          <lfs_contract_condx>-cond_type  = lst_ord_alv_dummy-kschl.
          <lfs_contract_condx>-cond_value = abap_true.
          <lfs_contract_condx>-updateflag = 'U'.
        ENDIF. " IF <lfs_contract_condx> IS ASSIGNED

      ENDIF. " IF sy-subrc IS INITIAL


      APPEND lst_cond TO li_cond.
      CLEAR lst_cond.


*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_text-itm_number = lst_ord_alv_dummy-posnr.
      lst_text-text_id    = v_tdid.
      lst_text-langu      = sy-langu.
      lst_text-format_col = c_format.
      lst_text-text_line  = lst_ord_alv_dummy-stxh.

      APPEND lst_text TO li_text.
      CLEAR  lst_text.
*====================================================================*
* Populate the Extensionin table
*====================================================================*
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-vbeln
        IMPORTING
          output = lv_salesdocin.

      "lst_bape_vbap-vbeln       = lst_ord_alv_dummy-vbeln.
      lst_bape_vbap-vbeln       = lv_salesdocin.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      lst_bape_vbap-zzpromo     = lst_ord_alv_dummy-zzpromo.
      lst_extensionin-structure = lc_bape_vbap.
      lst_bape_vbap-posnr       = lst_ord_alv_dummy-posnr.
      lst_extensionin+30(960)   = lst_bape_vbap.
      APPEND lst_extensionin TO li_extensionin.
      CLEAR lst_extensionin.

      CLEAR lst_bape_vbapx.
      lst_bape_vbapx-zzpromo    = abap_true.
      lst_extensionin-structure = lc_bape_vbapx.
      lst_bape_vbapx-posnr      = lst_ord_alv_dummy-posnr.
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      " lst_bape_vbapx-vbeln      = lst_ord_alv_dummy-vbeln.
      " Assign Internal format converted value
      lst_bape_vbapx-vbeln      = lv_salesdocin.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      lst_extensionin+30(960)   = lst_bape_vbapx.
      APPEND lst_extensionin TO li_extensionin.
      CLEAR  lst_extensionin.

*====================================================================*
* Populate the Partner Changes
*====================================================================*
      lst_partner-document    = lv_salesdocin. " Document Number
      lst_partner-itm_number  = lst_ord_alv_dummy-posnr. " Item
      lst_partner-updateflag  = 'U'. " Update

      CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-parvw
        IMPORTING
          output = lst_partner-partn_role. " Partner Role

      lst_partner-p_numb_new  = lst_ord_alv_dummy-partner. " Partner
      APPEND lst_partner TO li_partner.

    ENDIF. " IF ( lst_ord_alv_dummy-parvw EQ c_ag

*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*    AT END OF customer.
    AT END OF vbeln.
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
*====================================================================*
*     Call Bapi
*====================================================================*
      CLEAR lv_salesdocin.
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      " lv_salesdocin = lst_ord_alv_dummy-vbeln.
      " Convert to internal format
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv_dummy-vbeln
        IMPORTING
          output = lv_salesdocin.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *

*     Change the Sales Order
      CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
        EXPORTING
          salesdocument    = lv_salesdocin
          order_header_in  = lst_hdrin
          order_header_inx = lst_hrdinx
        TABLES
          return           = li_return
          order_item_in    = li_itm
          order_item_inx   = li_items_inx
          partnerchanges   = li_partner
          order_text       = li_text
          conditions_in    = li_cond
          conditions_inx   = li_condx
          schedule_lines   = li_ord_sch
          schedule_linesx  = li_ord_schx
          extensionin      = li_extensionin
          extensionex      = li_extensioninx.

      IF NOT li_return IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        IF p_devid = c_e101.
          CLEAR:v_err.
          i_return[] = li_return[].
          PERFORM f_update_log_staging_e101 USING lst_ord_alv_dummy-log_handle
                                                  lv_salesdocin lst_ord_alv_dummy-zlogno.
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc IS INITIAL.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: lst_return,
                 st_err_msg.
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

        ELSE. " ELSE -> IF sy-subrc IS INITIAL
          READ TABLE li_return INTO lst_return WITH KEY type = 'A'. " Return into lst_ of type
          IF sy-subrc IS INITIAL.
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.

            CLEAR: lst_return,
                   st_err_msg.
*** BOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*** EOC BY SAYANDAS on 04-Dec-2017 for CMRORDCHG
          ELSE. " ELSE -> IF sy-subrc IS INITIAL
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' .

            READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
            IF sy-subrc IS INITIAL.
              st_err_msg-wbeln = lv_salesdocin.
              st_err_msg-msgid = lst_return-id.
              st_err_msg-msgty = lst_return-type.
              st_err_msg-msgno = lst_return-number.
              st_err_msg-msgv1 = lst_return-message_v1.
              st_err_msg-msgv2 = lst_return-message_v2.
              st_err_msg-msgv3 = lst_return-message_v3.
              st_err_msg-msgv4 = lst_return-message_v4.
              APPEND st_err_msg TO i_err_msg.
              CLEAR: lst_return,
                     st_err_msg.
            ENDIF. " IF sy-subrc IS INITIAL
          ENDIF. " IF sy-subrc IS INITIAL
        ENDIF. " IF sy-subrc IS INITIAL
      ENDIF. " IF NOT li_return IS INITIAL
    ENDAT.
  ENDLOOP  . " LOOP AT li_change_reg_ord_chg INTO DATA(lst_ord_alv)
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  PERFORM f_send_email_move_file.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0

ENDFORM.
*&-----------------------------------*
*&      Form  F_GET_BOM
*&-----------------------------------*
*       Check BOM and determine line item number accoringly
*-----------------------------------*
*      ->FP_MATNR  Material
*      ->FP_PLANT  Plant
*      ->FP_QUANTITY Quantity
*      ->FP_INDEX    Index
*      ->FP_INCPO    Increment of item number in the SD document
*      <-FP_I_OUTPUT  Output table with changed line items
*-----------------------------------*
FORM f_get_bom  USING    fp_matnr    TYPE matnr    " Material Number
                         fp_plant    TYPE werks_d  " Plant
                         fp_quantity TYPE char17   " Quantity of type CHAR17
                         fp_index    TYPE sy-tabix " ABAP System Field: Row Index of Internal Tables
                         fp_incpo    TYPE incpo    " Increment of item number in the SD document
                CHANGING fp_i_output TYPE tt_output_x
                         fp_bom_items TYPE tt_bom_items.

* Local Internal table for BOM
  DATA : li_bom      TYPE STANDARD TABLE OF stpox INITIAL SIZE 0, " BOM Items (Extended for List Displays)
* Local Work Area for BOM Explosions
         lst_topmat  TYPE cstmat, " Start Material Display for BOM Explosions
* Local Variable for target Quantity
         lv_quantity TYPE basmn. " Base quantity
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  DATA:  lv_posnr    TYPE posnr.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267


**** BOC BY SAYANDAS for BOM Partner on 23-AUG-2017
*         lst_bom         TYPE stpox, " BOM Items (Extended for List Displays)
*         lv_posnr        TYPE posnr, " Item number of the SD document
*         lst_bom_partner TYPE ty_bom_partner.
**** EOC BY SAYANDAS for BOM Partner on 23-AUG-2017

* Move character format to quantity format
  lv_quantity = fp_quantity.

  CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
    EXPORTING
      capid                 = 'SD01'      " Application ID
      datuv                 = sy-datum    " Date
      emeng                 = lv_quantity " Quantity
      salww                 = abap_true
      mtnrv                 = fp_matnr    " Material
      rndkz                 = '2'         " Round off: ' '=always, '1'=never, '2'=only levels > 1
      werks                 = fp_plant    " Plant
    IMPORTING
      topmat                = lst_topmat
    TABLES
      stb                   = li_bom
    EXCEPTIONS
      alt_not_found         = 1
      call_invalid          = 2
      material_not_found    = 3
      missing_authorization = 4
      no_bom_found          = 5
      no_plant_data         = 6
      no_suitable_bom_found = 7
      conversion_error      = 8
      OTHERS                = 9.
  IF sy-subrc IS INITIAL.

* Delete items which are not Sales Relevant
    DELETE li_bom WHERE rvrel IS INITIAL.

    IF li_bom IS NOT INITIAL.

*  Get total number of BOM item
      DATA(lv_bom_lines) = lines( li_bom ).

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                                    FROM  fp_index.
*       Begin of ADD:ERP-3832:WROY:04-AUG-2017:ED2K907751
        DATA(lv_tabix) = sy-tabix.
*       End   of ADD:ERP-3832:WROY:04-AUG-2017:ED2K907751
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*        IF <lfs_output>-parvw EQ 'AG' OR <lfs_output>-parvw EQ c_sp.
*          EXIT.
*        ENDIF. " IF <lfs_output>-parvw EQ 'AG'
        IF <lfs_output>-parvw EQ 'AG'.
          EXIT.
        ENDIF. " IF <lfs_output>-parvw EQ 'AG'
*       Update the Line Item of BOM Header
        IF <lfs_output>-parvw EQ c_sp.
          <lfs_output>-posnr = lv_posnr.
          CONTINUE.
        ENDIF. " IF <lfs_output>-parvw EQ c_sp
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

**** BOC BY SAYANDAS for BOM Partner on 23-AUG-2017
*        LOOP AT li_bom INTO lst_bom.
*          IF lv_posnr IS INITIAL.
*            lv_posnr = <lfs_output>-posnr + fp_incpo.
*          ELSE.
*            lv_posnr = lv_posnr + fp_incpo.
*          ENDIF.
*
*          lst_bom_partner-posnr = lv_posnr.
*          lst_bom_partner-parvw = <lfs_output>-parvw.
*          lst_bom_partner-kunnr = <lfs_output>-kunnr.
*          APPEND lst_bom_partner TO i_bom_partner.
*          CLEAR lst_bom_partner.
*        ENDLOOP. " LOOP AT li_bom INTO lst_bom
*
*        CLEAR lv_posnr.
**** EOC BY SAYANDAS for BOM Partner on 23-AUG-2017

        APPEND INITIAL LINE TO fp_bom_items ASSIGNING
        FIELD-SYMBOL(<lfs_bom_items>).
        IF <lfs_bom_items> IS ASSIGNED.
          <lfs_bom_items>-old_posnr =  <lfs_output>-posnr.
        ENDIF. " IF <lfs_bom_items> IS ASSIGNED
*    No need to change the first line item
*       Begin of DEL:ERP-3832:WROY:04-AUG-2017:ED2K907751
*       IF sy-tabix NE fp_index.
*       End   of DEL:ERP-3832:WROY:04-AUG-2017:ED2K907751
*       Begin of ADD:ERP-3832:WROY:04-AUG-2017:ED2K907751
        IF lv_tabix NE fp_index.
*       End   of ADD:ERP-3832:WROY:04-AUG-2017:ED2K907751
          <lfs_output>-posnr = <lfs_output>-posnr + ( lv_bom_lines * fp_incpo ).
        ENDIF. " IF lv_tabix NE fp_index
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*       Capture the Line Item of BOM Header
        lv_posnr = <lfs_output>-posnr.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

        IF <lfs_bom_items> IS ASSIGNED.
          <lfs_bom_items>-new_posnr = <lfs_output>-posnr.
        ENDIF. " IF <lfs_bom_items> IS ASSIGNED
      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
      CLEAR lst_topmat.
    ENDIF. " IF li_bom IS NOT INITIAL
  ENDIF. " IF sy-subrc IS INITIAL
ENDFORM.
*&-----------------------------------*
*&      Form  F_GET_BOM_CREDIT
*&-----------------------------------*
*       Check BOM and determine line item number accoringly
*-----------------------------------*
*      ->FP_MATNR  Material
*      ->FP_PLANT  Plant
*      ->FP_QUANTITY Quantity
*      ->FP_INDEX    Index
*      ->FP_INCPO    Increment of item number in the SD document
*      <-FP_I_OUTPUT  Output table with changed line items
*-----------------------------------*
FORM f_get_bom_credit  USING
                         fp_matnr    TYPE matnr   " Material Number
                         fp_plant    TYPE werks_d " Plant
*                        Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
*                        fp_quantity TYPE char17   " Quantity of type CHAR17
                         fp_quantity TYPE fkimg " Quantity of type CHAR17
*                        End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                         fp_index    TYPE sy-tabix " ABAP System Field: Row Index of Internal Tables
                         fp_incpo    TYPE incpo    " Increment of item number in the SD document
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
*                CHANGING fp_i_output TYPE tt_crdt_memo_enh.
* Change in table structure
                CHANGING fp_i_output TYPE tt_crdt_memo_crt.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059

* Local Internal table for BOM
  DATA : li_bom      TYPE STANDARD TABLE OF stpox INITIAL SIZE 0, " BOM Items (Extended for List Displays)
* Local Work Area for BOM Explosions
         lst_topmat  TYPE cstmat, " Start Material Display for BOM Explosions
* Local Variable for target Quantity
         lv_quantity TYPE basmn. " Base quantity

* Move character format to quantity format
  lv_quantity = fp_quantity.

  CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
    EXPORTING
      capid                 = 'SD01'      " Application ID
      datuv                 = sy-datum    " Date
      emeng                 = lv_quantity " Quantity
      salww                 = abap_true
      mtnrv                 = fp_matnr    " Material
      rndkz                 = '2'         " Round off: ' '=always, '1'=never, '2'=only levels > 1
      werks                 = fp_plant    " Plant
    IMPORTING
      topmat                = lst_topmat
    TABLES
      stb                   = li_bom
    EXCEPTIONS
      alt_not_found         = 1
      call_invalid          = 2
      material_not_found    = 3
      missing_authorization = 4
      no_bom_found          = 5
      no_plant_data         = 6
      no_suitable_bom_found = 7
      conversion_error      = 8
      OTHERS                = 9.
  IF sy-subrc IS INITIAL.

* Delete items which are not Sales Relevant
    DELETE li_bom WHERE rvrel IS INITIAL.

    IF li_bom IS NOT INITIAL.

*  Get total number of BOM item
      DATA(lv_bom_lines) = lines( li_bom ).

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                                    FROM  fp_index.
        IF <lfs_output>-parvw EQ 'AG'.
          EXIT.
        ENDIF. " IF <lfs_output>-parvw EQ 'AG'
*    No need to change the first line item
        IF sy-tabix NE fp_index.
          <lfs_output>-posnr = <lfs_output>-posnr + ( lv_bom_lines * fp_incpo ).
        ENDIF. " IF sy-tabix NE fp_index

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
      CLEAR lst_topmat.
    ENDIF. " IF li_bom IS NOT INITIAL
  ENDIF. " IF sy-subrc IS INITIAL
ENDFORM.
*&-----------------------------------*
*&      Form  F_GET_BOM_NORM
*&-----------------------------------*
*       Check BOM and determine line item number accoringly
*-----------------------------------*
*      ->FP_MATNR  Material
*      ->FP_PLANT  Plant
*      ->FP_QUANTITY Quantity
*      ->FP_INDEX    Index
*      ->FP_INCPO    Increment of item number in the SD document
*      <-FP_I_OUTPUT  Output table with changed line items
*-----------------------------------*
FORM f_get_bom_norm      USING
                         fp_matnr    TYPE matnr   " Material Number
                         fp_plant    TYPE werks_d " Plant
*                         fp_quantity TYPE char17   " Quantity of type CHAR17
                         fp_quantity TYPE char15   " Quantity of type CHAR15
                         fp_index    TYPE sy-tabix " ABAP System Field: Row Index of Internal Tables
                         fp_incpo    TYPE incpo    " Increment of item number in the SD document
                CHANGING fp_i_output TYPE tt_order_alv.

* Local Internal table for BOM
  DATA : li_bom      TYPE STANDARD TABLE OF stpox INITIAL SIZE 0, " BOM Items (Extended for List Displays)
* Local Work Area for BOM Explosions
         lst_topmat  TYPE cstmat, " Start Material Display for BOM Explosions
* Local Variable for target Quantity
         lv_quantity TYPE basmn. " Base quantity

* Move character format to quantity format
  lv_quantity = fp_quantity.

  CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
    EXPORTING
      capid                 = 'SD01'      " Application ID
      datuv                 = sy-datum    " Date
      emeng                 = lv_quantity " Quantity
      salww                 = abap_true
      mtnrv                 = fp_matnr    " Material
      rndkz                 = '2'         " Round off: ' '=always, '1'=never, '2'=only levels > 1
      werks                 = fp_plant    " Plant
    IMPORTING
      topmat                = lst_topmat
    TABLES
      stb                   = li_bom
    EXCEPTIONS
      alt_not_found         = 1
      call_invalid          = 2
      material_not_found    = 3
      missing_authorization = 4
      no_bom_found          = 5
      no_plant_data         = 6
      no_suitable_bom_found = 7
      conversion_error      = 8
      OTHERS                = 9.
  IF sy-subrc IS INITIAL.

* Delete items which are not Sales Relevant
    DELETE li_bom WHERE rvrel IS INITIAL.

    IF li_bom IS NOT INITIAL.

*  Get total number of BOM item
      DATA(lv_bom_lines) = lines( li_bom ).

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                                    FROM  fp_index.
        IF <lfs_output>-parvw EQ 'AG'.
          EXIT.
        ENDIF. " IF <lfs_output>-parvw EQ 'AG'

*    No need to change the first line item
        IF sy-tabix NE fp_index.
          <lfs_output>-posnr = <lfs_output>-posnr + ( lv_bom_lines * fp_incpo ).
        ENDIF. " IF sy-tabix NE fp_index

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
      CLEAR lst_topmat.
    ENDIF. " IF li_bom IS NOT INITIAL
  ENDIF. " IF sy-subrc IS INITIAL
ENDFORM.
*&-----------------------------------*
*&      Form  F_MOVE_XL_TO_ORD_ALV
*&-----------------------------------*
*       text
*-----------------------------------*
*      ->P_I_FINAL_ORD  text
*      <-P_I_ORD_ALV  text
*-----------------------------------*
FORM f_move_xl_to_ord_alv  USING    fp_i_final_ord TYPE tt_final_ord
                           CHANGING fp_i_ord_alv   TYPE tt_ord_alv.

  LOOP AT fp_i_final_ord INTO DATA(lst_final_ord).

    APPEND INITIAL LINE TO fp_i_ord_alv ASSIGNING
    FIELD-SYMBOL(<lfs_final_ord>).
    IF <lfs_final_ord> IS ASSIGNED.
      <lfs_final_ord>-sel      = lst_final_ord-sel.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      <lfs_final_ord>-identifier = lst_final_ord-identifier.   " Order Identifier
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      <lfs_final_ord>-customer = lst_final_ord-customer. " Customer Number
      <lfs_final_ord>-parvw    = lst_final_ord-parvw. " Partner Function
      <lfs_final_ord>-partner  = lst_final_ord-partner. " Customer Number
      <lfs_final_ord>-vkorg    = lst_final_ord-vkorg. " Sales org. SAP mandatory
      <lfs_final_ord>-vtweg    = lst_final_ord-vtweg. " Dist. channel SAP mandatory
      <lfs_final_ord>-spart    = lst_final_ord-spart. " Division SAP mandatory
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      <lfs_final_ord>-vkbur    = lst_final_ord-vkbur.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      <lfs_final_ord>-guebg    = lst_final_ord-guebg. " Contract start date Wiley mandatory
      <lfs_final_ord>-gueen    = lst_final_ord-gueen. " Contract end date Wiley mandatory
      <lfs_final_ord>-augru    = lst_final_ord-augru.
      <lfs_final_ord>-matnr    = lst_final_ord-matnr. " Material
      <lfs_final_ord>-plant    = lst_final_ord-plant. " Plant
      <lfs_final_ord>-vbeln    = lst_final_ord-vbeln. " Sales and Distribution Document Number
      <lfs_final_ord>-posnr    = lst_final_ord-posnr. " Item number
      <lfs_final_ord>-pstyv    = lst_final_ord-pstyv. " Item category SAP mandatory
*      <lfs_final_ord>-zmeng    = lst_final_ord-zmeng. " Target quantity
      <lfs_final_ord>-kwmeng    = lst_final_ord-kwmeng.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      <lfs_final_ord>-xblnr    = lst_final_ord-xblnr.
      <lfs_final_ord>-zlsch    = lst_final_ord-zlsch.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      <lfs_final_ord>-lifsk    = lst_final_ord-lifsk. " Delivery block Wiley mandatory
      <lfs_final_ord>-faksk    = lst_final_ord-faksk. " Billing block Wiley mandatory
      <lfs_final_ord>-abgru    = lst_final_ord-abgru. " Reason for rejection
      <lfs_final_ord>-auart    = lst_final_ord-auart. " Sales Document Type
* BOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *
      <lfs_final_ord>-bsark    = lst_final_ord-bsark. " Customer Purchase order type.
* EOC by Lahiru on 09/30/2020 for OTCM-4390 with ED2K919734 *
      <lfs_final_ord>-bstnk    = lst_final_ord-bstnk. " Purchase order number Wiley mandatory
      <lfs_final_ord>-stxh     = lst_final_ord-stxh. " Stxh of type CHAR200
      <lfs_final_ord>-kschl    = lst_final_ord-kschl. " Pricing condition value Wiley mandatory
      <lfs_final_ord>-kbetr    = lst_final_ord-kbetr. " Pricing Wiley mandatory
      <lfs_final_ord>-ihrez    = lst_final_ord-ihrez. " Your Reference
      <lfs_final_ord>-ihrez_e  = lst_final_ord-ihrez_e. " Ship-to party character
      <lfs_final_ord>-zzpromo  = lst_final_ord-zzpromo. " Promo code
      <lfs_final_ord>-kdkg4    = lst_final_ord-kdkg4. " Customer condition group 4
      <lfs_final_ord>-kdkg5    = lst_final_ord-kdkg5. " Customer condition group 5
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      <lfs_final_ord>-kdkg3    = lst_final_ord-kdkg3.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
* BOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
      <lfs_final_ord>-kdkg2    = lst_final_ord-kdkg2.
* EOC by Lahiru on 09/22/2020 for OTCM-4390 with ED2K919600 *
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      <lfs_final_ord>-fkdat       = lst_final_ord-fkdat.       "Billing Date "OTCM-52926
      <lfs_final_ord>-zlogno      = lst_final_ord-zlogno.      "Application log: log number
      <lfs_final_ord>-log_handle  = lst_final_ord-log_handle.  "Application Log: Log Handle
      <lfs_final_ord>-zoid        = lst_final_ord-zoid.        "Order Identifier in Upload File
      <lfs_final_ord>-msgty       = lst_final_ord-msgty.       "Message Type
      <lfs_final_ord>-msgv1       = lst_final_ord-msgv1.       "Message Detials
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    ENDIF. " IF <lfs_final_ord> IS ASSIGNED
    CLEAR  lst_final_ord.
  ENDLOOP. " LOOP AT fp_i_final_ord INTO DATA(lst_final_ord)
ENDFORM.
*-----------------------------------*
*      Form  F_VALIDATE_FILE
*-----------------------------------*
*      Validate File
*-----------------------------------*
FORM f_validate_file  USING   fp_file TYPE localfile. " Local file for upload/download

  DATA : lv_file_char   TYPE localfile. " Local file for upload/download
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  DATA : lv_ferr_flg    TYPE xfld.
  DATA : lv_check_file  TYPE c.
  DATA : li_stage_ref   TYPE STANDARD TABLE OF ze225_staging.
  DATA : lst_stage_ref   TYPE ze225_staging.

*  IF fp_file IS NOT INITIAL.
  IF fp_file IS NOT INITIAL AND p_a_file IS INITIAL.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

* Reverse the string
    CALL FUNCTION 'STRING_REVERSE'
      EXPORTING
        string    = fp_file
        lang      = sy-langu
      IMPORTING
        rstring   = lv_file_char
      EXCEPTIONS
        too_small = 1
        OTHERS    = 2.
    IF sy-subrc IS INITIAL.
      IF lv_file_char+0(3) NE 'slx'  AND
         lv_file_char+0(3) NE 'SLX'  AND
         lv_file_char+0(4) NE 'xslx' AND
         lv_file_char+0(4) NE 'XSLX'.
        MESSAGE text-e18 TYPE 'E'.
      ENDIF. " IF lv_file_char+0(3) NE 'slx' AND
    ENDIF. " IF sy-subrc IS INITIAL

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*   Check if File needs to be validated based on selection
    PERFORM f_validate_file_needed USING lv_check_file.
    CHECK lv_check_file IS NOT INITIAL.
*   Validate if File already processed
    CLEAR lv_ferr_flg.
    SELECT SINGLE * FROM ze225_staging INTO @DATA(lst_stage)
      WHERE zfilepath = @p_file.
    IF sy-subrc EQ 0 AND sy-batch IS INITIAL.
      SELECT * FROM ze225_staging
        INTO TABLE @li_stage_ref
        WHERE zfilepath = @p_file.
      IF sy-subrc = 0.
*       Get the most recent file Processed
        SORT li_stage_ref BY zcrtdat DESCENDING
                             zcrttim DESCENDING.
*       If the Most recent File is in Validation Error Allow reporcessing
        READ TABLE li_stage_ref INTO lst_stage_ref INDEX 1.
        lv_ferr_flg = abap_true.
        LOOP AT li_stage_ref INTO DATA(lst_stage_ref1) WHERE zuid_upld = lst_stage_ref-zuid_upld
                                                         AND zprcstat  = c_f1. "'F1'.
          CLEAR: lv_ferr_flg.
          EXIT.
        ENDLOOP.
      ENDIF.
    ENDIF.
*
    IF lv_ferr_flg IS NOT INITIAL.
*
      LOOP AT SCREEN.
        IF screen-group1 = c_z1.
          screen-input = '1'.
        ENDIF. " IF screen-group1 = c_z1
        MODIFY SCREEN.
      ENDLOOP. " LOOP AT SCREEN
*
      MESSAGE e263(zqtc_r2). "DISPLAY LIKE 'S'. " File already processed.
    ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDIF. " IF fp_file IS NOT INITIAL

ENDFORM.
*-----------------------------------*
*      Form  F_DESELECT_LINES
*&-----------------------------------*
* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected
*-----------------------------------*
*      <-FP_I_OUTPUT  Output table
*-----------------------------------*
FORM f_deselect_lines  CHANGING fp_i_output TYPE tt_output_x.

  DATA(li_output) = fp_i_output.

  LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                    WHERE parvw EQ 'AG'.

    DATA(lv_tabix) = sy-tabix.

*    If header not selected, ignore corresponding items
    IF <lfs_output>-sel NE abap_true.

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*       Deselect Items
        CLEAR : <lfs_main_output>-sel.

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)

    ELSE. " ELSE -> IF <lfs_output>-sel NE abap_true

*    If header selected, check corresponding items. If items are not
*    selected, deselect header

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING <lfs_main_output>
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*        Mark that line items exist in file
        DATA(lv_line_exists)  = abap_true.

*        If any of the line item is selected, mark the variable
        IF <lfs_main_output>-sel EQ abap_true.
          DATA(lv_line_selected) = abap_true.
        ENDIF. " IF <lfs_main_output>-sel EQ abap_true

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING <lfs_main_output>

*      If no line selected
      IF  lv_line_exists   EQ abap_true
      AND lv_line_selected NE abap_true.

*         Get back the header index
        lv_tabix = lv_tabix - 1.

        READ TABLE fp_i_output ASSIGNING <lfs_main_output>
        INDEX lv_tabix.

        IF <lfs_main_output> IS ASSIGNED.
*            Deselect Header
          CLEAR : <lfs_main_output>-sel.
        ENDIF. " IF <lfs_main_output> IS ASSIGNED

      ENDIF. " IF lv_line_exists EQ abap_true

      CLEAR : lv_line_selected,
              lv_line_exists.

    ENDIF. " IF <lfs_output>-sel NE abap_true

  ENDLOOP. " LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)

ENDFORM.
*-----------------------------------*
*      Form  F_DESELECT_CREDIT_LINES
*&-----------------------------------*
* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected
*-----------------------------------*
*      <-FP_I_OUTPUT  Output table
*-----------------------------------*
FORM f_deselect_credit_lines  CHANGING fp_i_output TYPE tt_crdt_memo_enh.

  DATA(li_output) = fp_i_output.

  LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                    WHERE parvw EQ 'AG'.

    DATA(lv_tabix) = sy-tabix.

*    If header not selected, ignore corresponding items
    IF <lfs_output>-sel NE abap_true.

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*       Deselect Items
        CLEAR : <lfs_main_output>-sel.

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)

    ELSE. " ELSE -> IF <lfs_output>-sel NE abap_true

*    If header selected, check corresponding items. If items are not
*    selected, deselect header

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING <lfs_main_output>
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*        Mark that line items exist in file
        DATA(lv_line_exists)  = abap_true.

*        If any of the line item is selected, mark the variable
        IF <lfs_main_output>-sel EQ abap_true.
          DATA(lv_line_selected) = abap_true.
        ENDIF. " IF <lfs_main_output>-sel EQ abap_true

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING <lfs_main_output>

*      If no line selected
      IF  lv_line_exists   EQ abap_true
      AND lv_line_selected NE abap_true.

*         Get back the header index
        lv_tabix = lv_tabix - 1.

        READ TABLE fp_i_output ASSIGNING <lfs_main_output>
        INDEX lv_tabix.

        IF <lfs_main_output> IS ASSIGNED.
*            Deselect Header
          CLEAR : <lfs_main_output>-sel.
        ENDIF. " IF <lfs_main_output> IS ASSIGNED

      ENDIF. " IF lv_line_exists EQ abap_true

      CLEAR : lv_line_selected,
              lv_line_exists.

    ENDIF. " IF <lfs_output>-sel NE abap_true

  ENDLOOP. " LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)

ENDFORM.
*-----------------------------------*
*      Form  F_DESELECT_NORM_LINES
*&-----------------------------------*
* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected
*-----------------------------------*
*      <-FP_I_OUTPUT  Output table
*-----------------------------------*
FORM f_deselect_norm_lines  CHANGING fp_i_output TYPE tt_order_alv.

  DATA(li_output) = fp_i_output.

  LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                    WHERE parvw EQ 'AG'.

    DATA(lv_tabix) = sy-tabix.

*    If header not selected, ignore corresponding items
    IF <lfs_output>-sel NE abap_true.

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*       Deselect Items
        CLEAR : <lfs_main_output>-sel.

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)

    ELSE. " ELSE -> IF <lfs_output>-sel NE abap_true

*    If header selected, check corresponding items. If items are not
*    selected, deselect header

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING <lfs_main_output>
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*        Mark that line items exist in file
        DATA(lv_line_exists)  = abap_true.

*        If any of the line item is selected, mark the variable
        IF <lfs_main_output>-sel EQ abap_true.
          DATA(lv_line_selected) = abap_true.
        ENDIF. " IF <lfs_main_output>-sel EQ abap_true

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING <lfs_main_output>

*      If no line selected
      IF  lv_line_exists   EQ abap_true
      AND lv_line_selected NE abap_true.

*         Get back the header index
        lv_tabix = lv_tabix - 1.

        READ TABLE fp_i_output ASSIGNING <lfs_main_output>
        INDEX lv_tabix.

        IF <lfs_main_output> IS ASSIGNED.
*            Deselect Header
          CLEAR : <lfs_main_output>-sel.
        ENDIF. " IF <lfs_main_output> IS ASSIGNED

      ENDIF. " IF lv_line_exists EQ abap_true

      CLEAR : lv_line_selected,
              lv_line_exists.

    ENDIF. " IF <lfs_output>-sel NE abap_true

  ENDLOOP. " LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CHANGE_POS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LI_CHANGE_SUBS  text
*      <--P_LI_FINAL_CHANGE_SUBS  text
*----------------------------------------------------------------------*
FORM f_change_pos  USING    fp_li_change_subs TYPE tt_output_x
                   CHANGING fp_li_final_change_subs TYPE tt_output_x_chg.

  DATA : lst_final_change_subs TYPE ty_output_x_chg,
         lst_change_subs       TYPE ty_output_x.

  LOOP AT  fp_li_change_subs INTO lst_change_subs.

    MOVE-CORRESPONDING lst_change_subs TO lst_final_change_subs.
    APPEND lst_final_change_subs TO fp_li_final_change_subs.
    CLEAR lst_final_change_subs.
  ENDLOOP. " LOOP AT fp_li_change_subs INTO lst_change_subs

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_REW_CONTRACT_CREATEFROMDATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_rew_qref_contract_create .

*====================================================================*
*       Local Types Declaration
*====================================================================*
  TYPES :
*           BEGIN OF lty_srid,
*            srid TYPE ihrez,  " Your Reference
*          END OF lty_srid,

    BEGIN OF lty_vbeln_quot,
      vbeln TYPE vbeln, " Sales and Distribution Document Number
      posnr TYPE posnr, " Item number of the SD document
      ihrez TYPE ihrez, " Your Reference
      knumv TYPE knumv, " Number of the document condition
**** BOC for PT
*            qvbeln TYPE vbeln,
*            qauart TYPE auart,
*            vkorg TYPE vkorg,
*            vtweg TYPE vtweg,
*            spart TYPE spart,
**** EOC for PT
    END OF lty_vbeln_quot.

*====================================================================*
*       Local Internal Table
*====================================================================*
  DATA: li_return             TYPE STANDARD TABLE OF bapiret2,   " Return messages
        li_contract_itm       TYPE STANDARD TABLE OF bapisditm,  " Item data
        li_contract_items_inx TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
*--------------------------------------------------------------------*
        li_contract_partn     TYPE STANDARD TABLE OF bapiparnr,             " Contract partner
        li_contract_data      TYPE STANDARD TABLE OF bapictr                " Communciation Fields: SD Contract Data
        INITIAL SIZE 0,                                                     " Contract Data
        li_contract_data_inx  TYPE STANDARD TABLE OF bapictrx               " Communication fields: SD Contract Data Checkbox
        INITIAL SIZE 0,
        li_contract_cond      TYPE STANDARD TABLE OF bapicond,              " Contract conditions
        li_extensionin        TYPE STANDARD TABLE OF bapiparex,             " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_text               TYPE STANDARD TABLE OF bapisdtext,            " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_text1              TYPE STANDARD TABLE OF bapisdtext,            " Communication fields: SD texts
        li_lines1             TYPE STANDARD TABLE OF tline  INITIAL SIZE 0, " SAPscript: Text Lines
        li_srid               TYPE STANDARD TABLE OF ty_srid,
        li_vbeln_quot         TYPE STANDARD TABLE OF lty_vbeln_quot INITIAL SIZE 0,
*--------------------------------------------------------------------*
*** ------ Internal table for FM calling --------------------------***
        li_vbak_keys          TYPE shp_sales_key_t,                             "Document numbers to be selected
        li_xvbak_all          TYPE vbak_t,                                      "Sales Document: Header Data
        li_xvbap_all          TYPE va_vbapvb_t,                                 "Sales Document: Item Data
        li_yvbap_all          TYPE va_vbapvb_t,                                 "Sales Document: Item Data
        li_xvbep_all          TYPE va_vbepvb_t,                                 "Sales Document: Schedule Line Data
        li_yvbep_all          TYPE va_vbepvb_t,                                 "Sales Document: Schedule Line Data
        li_xvbkd_all          TYPE va_vbkdvb_t,                                 "Sales Document: Business Data
        li_yvbkd_all          TYPE va_vbkdvb_t,                                 "Sales Document: Business Data
        li_xvbpa_all          TYPE va_vbpavb_t,                                 "Sales Document: Partner
        li_yvbpa_all          TYPE va_vbpavb_t,                                 "Sales Document: Partner
        li_xsadr_all          TYPE shp_sadrvb_t,                                "Address Details
        li_ysadr_all          TYPE shp_sadrvb_t,                                "Address Details
        li_xvbuk_all          TYPE va_vbukvb_t,                                 "Sales Document: Header Status and Administrative Data
        li_yvbuk_all          TYPE va_vbukvb_t,                                 "Sales Document: Header Status and Administrative Data
        li_xvbup_all          TYPE va_vbupvb_t,                                 "Sales Document: Item Status
        li_yvbup_all          TYPE va_vbupvb_t,                                 "Sales Document: Item Status
        li_xkomv_all          TYPE va_komv_t,                                   "Conditions (Transaction Data)
        li_xvbfa_org          TYPE v45i_vbfa_tabl,                              "Sales Document Flow
        li_xvbfa_all          TYPE va_vbfavb_t,                                 "Sales Document Flow
        li_yvbfa_all          TYPE va_vbfavb_t,                                 "Sales Document Flow
        li_xfpla_all          TYPE va_fplavb_t,                                 "Billing Plan
        li_yfpla_all          TYPE va_fplavb_t,                                 "Billing Plan
        li_xfplt_all          TYPE va_fpltvb_t,                                 "Billing Plan: Dates
        li_yfplt_all          TYPE va_fpltvb_t,                                 "Billing Plan: Dates
        li_xvblb_all          TYPE va_vblbvb_t,                                 "Sales document: Release order data
        li_yvblb_all          TYPE va_vblbvb_t,                                 "Sales document: Release order data
        li_xvbpf_all          TYPE va_vbapf_t,                                  "Order Item Flow: Dynamic Division
        li_yvbpf_all          TYPE va_vbapf_t,                                  "Order Item Flow: Dynamic Division

        li_order              TYPE mds_sales_key_tab,
        li_header_all         TYPE STANDARD TABLE OF bapisdhd INITIAL SIZE 0,   " BAPI Structure of VBAK with English Field Names
        li_item_all           TYPE STANDARD TABLE OF bapisdit INITIAL SIZE 0,   " Structure of VBAP with English Field Names
        li_vbkd_all           TYPE STANDARD TABLE OF bapisdbusi INITIAL SIZE 0, " BAPI Structure of VBKD with English Field Names
        li_vbep_all           TYPE STANDARD TABLE OF bapisdhedu INITIAL SIZE 0, " Struture of VBEP with English Field Names
        li_vbpa_all           TYPE STANDARD TABLE OF bapisdpart INITIAL SIZE 0, " BAPI Structure of VBPA with English Field Names
        li_adrc_all           TYPE STANDARD TABLE OF bapisdcoad INITIAL SIZE 0, " BAPI Structure of SADRVB with English Field Names
        li_vbuk_all           TYPE STANDARD TABLE OF bapisdhdst INITIAL SIZE 0, " BAPI Structure of VBUK with English Field Names
        li_vbfa_all           TYPE STANDARD TABLE OF bapisdflow INITIAL SIZE 0, " BAPI Structure of VBFA with English Field Names
        li_veda_all           TYPE STANDARD TABLE OF bapisdcntr INITIAL SIZE 0, " BAPI Structure of VEDA with English Field Names
        li_konv_all           TYPE STANDARD TABLE OF bapisdcond INITIAL SIZE 0, " BAPI Structure of KOMV with English Field Names
        li_texth_all          TYPE STANDARD TABLE OF bapisdtehd INITIAL SIZE 0, " BAPI Structure of THEAD with English Field Names

        li_header_delta       TYPE STANDARD TABLE OF bapisdhd INITIAL SIZE 0,   " BAPI Structure of VBAK with English Field Names
        li_item_delta         TYPE STANDARD TABLE OF bapisdit INITIAL SIZE 0,   " Structure of VBAP with English Field Names
        li_vbkd_delta         TYPE STANDARD TABLE OF bapisdbusi INITIAL SIZE 0, " BAPI Structure of VBKD with English Field Names
        li_vbep_delta         TYPE STANDARD TABLE OF bapisdhedu INITIAL SIZE 0, " Struture of VBEP with English Field Names
        li_vbpa_delta         TYPE STANDARD TABLE OF bapisdpart INITIAL SIZE 0, " BAPI Structure of VBPA with English Field Names
        li_adrc_delta         TYPE STANDARD TABLE OF bapisdcoad INITIAL SIZE 0, " BAPI Structure of SADRVB with English Field Names
        li_vbuk_delta         TYPE STANDARD TABLE OF bapisdhdst INITIAL SIZE 0, " BAPI Structure of VBUK with English Field Names
        li_vbfa_delta         TYPE STANDARD TABLE OF bapisdflow INITIAL SIZE 0, " BAPI Structure of VBFA with English Field Names
        li_veda_delta         TYPE STANDARD TABLE OF bapisdcntr INITIAL SIZE 0, " BAPI Structure of VEDA with English Field Names
        li_konv_delta         TYPE STANDARD TABLE OF bapisdcond INITIAL SIZE 0, " BAPI Structure of KOMV with English Field Names
        li_texth_delta        TYPE STANDARD TABLE OF bapisdtehd INITIAL SIZE 0, " BAPI Structure of THEAD with English Field Names
*====================================================================*
*       Local Work-area
*====================================================================*
        lst_contract_hdrin    TYPE bapisdhd1,  " Header data
        lst_text              TYPE bapisdtext, " Communication fields: SD texts
        lst_text1             TYPE bapisdtext, " Communication fields: SD texts
        lst_header1           TYPE thead,      " SAPscript: Text Header
        lst_lines1            TYPE tline,      " SAPscript: Text Lines
        lst_contract_hrdinx   TYPE bapisdhd1x, " Header data extended for promo code
        lst_contract_itm      TYPE bapisditm,  " Item data
        lst_bape_vbak         TYPE bape_vbak,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbap         TYPE bape_vbap,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbapx        TYPE bape_vbapx, " BAPI Interface for Customer Enhancements to Table VBAK
        lst_extensionin       TYPE bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        lst_bape_vbakx        TYPE bape_vbakx, " BAPI Interface for Customer Enhancements to Table VBAKX
        lst_contract_partn    TYPE bapiparnr,  " Contract partner
        lst_contract_cond     TYPE bapicond,   " Contract conditions
        lst_contract_data     TYPE bapictr,    " Contract Data
        li_bom_items          TYPE STANDARD TABLE OF ty_bom_items,
        lst_contract_data_inx TYPE bapictrx,   " Communication fields: SD Contract Data Checkbox
        lst_output_dummy      TYPE ty_output_x,
        lst_return            TYPE bapiret2,   " For status of contract creation
        lst_srid              TYPE ty_srid,
        lst_create_contract   TYPE ty_output_x,
        lst_vbeln_quot        TYPE lty_vbeln_quot,


*----------------------------------------------------------*
**** ----------- Local structure for FM -------------------*
        lst_sls_view          TYPE order_view, " View for Mass Selection of Sales Orders
        lst_vbak_keytab       TYPE sales_key,  " Structure for Mass Accesses to SD Documents
        lst_vbeln_quot1       TYPE lty_vbeln_quot,
        lst_view              TYPE order_view, " View for Mass Selection of Sales Orders
        lst_header_delta      TYPE bapisdhd,   " BAPI Structure of VBAK with English Field Names
        lst_veda_delta        TYPE bapisdcntr, " BAPI Structure of VEDA with English Field Names
        lst_vbpa_delta        TYPE bapisdpart, " BAPI Structure of VBPA with English Field Names
*====================================================================*
*       Local Variable
*====================================================================*
        lv_salesdocin         TYPE bapivbeln-vbeln. "for export field

*================================
**** Field Symbols
*=================================
  FIELD-SYMBOLS : <lst_contract_data> TYPE  bapictr,  " Communciation Fields: SD Contract Data
                  <lst_contract_cond> TYPE  bapicond. " Contract conditions

*====================================================================*
*       Local Constants
*====================================================================*

  CONSTANTS:lc_bape_vbak  TYPE char9  VALUE 'BAPE_VBAK',  " Bape_vbak of type CHAR9
            lc_bape_vbap  TYPE char9  VALUE 'BAPE_VBAP',  " Bape_vbak of type CHAR9
            lc_posnr      TYPE posnr  VALUE '000000',     " Item number of the SD document
            lc_bape_vbakx TYPE char10 VALUE 'BAPE_VBAKX', " Bape_vbak of type CHAR9
            lc_bape_vbapx TYPE char10 VALUE 'BAPE_VBAPX', " Bape_vbak of type CHAR9
            lc_b          TYPE vbtyp  VALUE 'B',          " SD document category
            lc_ag         TYPE parvw  VALUE 'AG',         " Partner Function
            lc_vbbp       TYPE char4  VALUE 'VBBP'.       " Vbbp of type CHAR4

*  LOOP AT i_output_x INTO DATA(lst_output_x) WHERE sel = c_x.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* Get Increment of item number in the SD document
  DATA(li_output) = i_output_x.

* Sort by Order Type
  SORT li_output BY auart.

  DELETE li_output WHERE auart IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING auart.

  SELECT auart,	 " Sales Document Type
         incpo   " Increment of item number in the SD document
    FROM tvak    " Sales Document Types
    INTO TABLE @DATA(li_tvak)
    FOR ALL ENTRIES IN @li_output
    WHERE auart EQ @li_output-auart.
  IF sy-subrc IS INITIAL.
    SORT li_tvak BY auart.
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = i_output_x.

*--------------------------------------------------------------------*
* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected
*--------------------------------------------------------------------*
  PERFORM f_deselect_lines_wr CHANGING i_output_x.
*--------------------------------------------------------------------*
  DATA(li_create_contract) = i_output_x.
  DELETE li_create_contract WHERE sel NE abap_true.

  IF li_create_contract IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_create_contract IS INITIAL

*  LOOP AT li_create_contract INTO lst_create_contract.
*    IF lst_create_contract-srid IS NOT INITIAL.
*      MOVE-CORRESPONDING lst_create_contract TO lst_srid.
*      APPEND lst_srid TO li_srid.
*      CLEAR lst_srid.
*    ENDIF. " IF lst_create_contract-srid IS NOT INITIAL
*  ENDLOOP. " LOOP AT li_create_contract INTO lst_create_contract

  li_srid[] = i_srid.
*--------------------------------------------------------------------*
  SORT li_srid BY srid.
  DELETE ADJACENT DUPLICATES FROM li_srid COMPARING srid.
*--------------------------------------------------------------------*
  IF li_srid IS NOT INITIAL.
*** Selecting Data to fetch Quotation Number
    SELECT vbkd~vbeln, " Sales and Distribution Document Number
           vbkd~posnr,
           vbkd~ihrez, " Your Reference
*** BOC for FM
           vbak~knumv
*** EOC for FM
**** BOC for PT
*           vbak~vbeln AS qvbeln,
*           vbak~auart AS qauart,
*           vbak~vkorg,
*           vbak~vtweg,
*           vbak~spart
**** EOC for PT
      FROM vbkd INNER JOIN vbak
      ON vbkd~vbeln EQ vbak~vbeln
      INTO TABLE @li_vbeln_quot
      FOR ALL ENTRIES IN @li_srid
      WHERE vbkd~ihrez EQ @li_srid-srid
      AND vbak~vbtyp EQ @lc_b.

    IF sy-subrc = 0.
      SORT li_vbeln_quot BY vbeln posnr.
    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF li_srid IS NOT INITIAL

*** BOC for FM

  IF li_vbeln_quot IS NOT INITIAL.
*    SORT li_vbeln_quot BY vbeln.
*    DELETE ADJACENT DUPLICATES FROM li_vbeln_quot.
*    LOOP AT li_vbeln_quot INTO lst_vbeln_quot1.
*      MOVE-CORRESPONDING lst_vbeln_quot1 TO lst_vbak_keytab.
*      APPEND lst_vbak_keytab TO li_vbak_keys.
*      CLEAR lst_vbak_keytab.
*    ENDLOOP. " LOOP AT li_vbeln_quot INTO lst_vbeln_quot1

    MOVE-CORRESPONDING li_vbeln_quot TO li_order.

*    SORT li_vbak_keys.
*    DELETE ADJACENT DUPLICATES FROM li_vbak_keys.

    SORT li_order.
    DELETE ADJACENT DUPLICATES FROM li_order.
  ENDIF. " IF li_vbeln_quot IS NOT INITIAL

** View for Mass Selection of Sales Orders
*  lst_sls_view-header     = abap_true.
*  lst_sls_view-item       = abap_true.
*  lst_sls_view-sdschedule = abap_true.
*  lst_sls_view-business   = abap_true.
*  lst_sls_view-partner    = abap_true.
*  lst_sls_view-address    = abap_true.
*  lst_sls_view-status_h   = abap_true.
*  lst_sls_view-status_i   = abap_true.
*  lst_sls_view-sdcond     = abap_true.
*  lst_sls_view-sdcond_add = abap_true.
*  lst_sls_view-contract   = abap_true.
*  lst_sls_view-text       = abap_true.
*  lst_sls_view-flow       = abap_true.
*  lst_sls_view-billplan   = abap_true.
*  lst_sls_view-configure  = abap_true.
*  lst_sls_view-credcard   = abap_true.

*    Populating BAPI_VIEW
  lst_view-header = abap_true.
  lst_view-item = abap_true.
  lst_view-sdschedule = abap_true.
  lst_view-business = abap_true.
  lst_view-partner = abap_true.
  lst_view-address = abap_true.
  lst_view-status_h = abap_true.
  lst_view-sdcond   = abap_true.
  lst_view-contract = abap_true.
  lst_view-text     = abap_true.
  lst_view-flow = abap_true.

**     Prefetch Sales Document Details
*      CALL FUNCTION 'SD_SALES_DOCUMENT_PREFETCH'
*        EXPORTING
*          i_sales_view  = lst_sls_view                          "View for Mass Selection of Sales Orders
*        TABLES
*          i_vbak_keytab = li_vbak_keys                          "Document numbers to be selected
*          fxvbak        = li_xvbak_all                          "Sales Document: Header Data
*          fxvbap        = li_xvbap_all                          "Sales Document: Item Data
*          fxvbep        = li_xvbep_all                          "Sales Document: Schedule Line Data
*          fxvbkd        = li_xvbkd_all                          "Sales Document: Business Data
*          fxvbpa        = li_xvbpa_all                          "Sales Document: Partner
*          fxsadr        = li_xsadr_all                          "Address Details
*          fxvbuk        = li_xvbuk_all                          "Sales Document: Header Status and Administrative Data
*          fxvbup        = li_xvbup_all                          "Sales Document: Item Status
*          fxkomv        = li_xkomv_all                          "Conditions (Transaction Data)
*          fxvbfa        = li_xvbfa_org                          "Sales Document Flow
*          fxfpla        = li_xfpla_all                          "Billing Plan
*          fxfplt        = li_xfplt_all.                         "Billing Plan: Dates

*  BAPI to get details of sales order
  CALL FUNCTION 'BAPISDORDER_GETDETAILEDLIST'
    EXPORTING
      i_bapi_view             = lst_view
    TABLES
      sales_documents         = li_order
      order_headers_out       = li_header_all "
      order_items_out         = li_item_all "
      order_schedules_out     = li_vbep_all "
      order_business_out      = li_vbkd_all "
      order_partners_out      = li_vbpa_all "
      order_conditions_out    = li_konv_all "
      order_address_out       = li_adrc_all
      order_statusheaders_out = li_vbuk_all
      order_flows_out         = li_vbfa_all
      order_contracts_out     = li_veda_all "
      order_textheaders_out   = li_texth_all. "

*** EOC for FM

*   li_xvbpa_delta[] = li_xvbpa_all[].
*   DELETE li_xvbpa_delta WHERE doc_number NE <Quote#>.
*   MOVE-CORRESPONDING li_xvbpa_delta TO li_partners.
*   MODIFY li_partners from lst_partners TRANSPORTING doc_number
*    WHERE doc_number IS NOT INITIAL.
  IF li_vbeln_quot IS NOT INITIAL.
*** Selecting Data from VBAK table
    SELECT vbak~vbeln AS qvbeln,
           vbak~auart AS qauart,
           vkorg,
           vtweg,
           spart " Division
      FROM vbak  " Sales Document: Header Data
      INTO TABLE @DATA(li_vbak)
      FOR ALL ENTRIES IN @li_vbeln_quot
      WHERE vbak~vbeln EQ @li_vbeln_quot-vbeln.

    IF sy-subrc = 0.
      SORT li_vbak BY qvbeln.
    ENDIF. " IF sy-subrc = 0

  ENDIF. " IF li_vbeln_quot IS NOT INITIAL


  IF li_vbeln_quot IS NOT INITIAL.
*** Selecting Data from VBAP table
    SELECT vbap~vbeln AS qvbeln,
           vbap~posnr,
           vbap~matnr,
           vbap~uepos,
           vbap~kwmeng,
           vbap~vrkme " Target quantity UoM
      FROM vbap       " Sales Document: Item Data
      INTO TABLE @DATA(li_vbap)
      FOR ALL ENTRIES IN @li_vbeln_quot
      WHERE vbap~vbeln EQ @li_vbeln_quot-vbeln
      AND   vbap~posnr EQ @li_vbeln_quot-posnr.

    IF sy-subrc = 0.
      SORT li_vbap BY qvbeln posnr.
*      DELETE li_vbap WHERE uepos IS NOT INITIAL.
    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF li_vbeln_quot IS NOT INITIAL

  IF li_vbeln_quot IS NOT INITIAL.
*** Selecting Data from VBPA table
    SELECT vbpa~vbeln AS qvbeln,
           vbpa~posnr,
           vbpa~parvw,
           vbpa~kunnr " Customer Number
      FROM vbpa       " Sales Document: Partner
      INTO TABLE @DATA(li_vbpa)
      FOR ALL ENTRIES IN @li_vbeln_quot
      WHERE vbpa~vbeln EQ @li_vbeln_quot-vbeln
      AND vbpa~parvw EQ @lc_ag.

    IF sy-subrc = 0.
      SORT li_vbpa BY qvbeln.
    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF li_vbeln_quot IS NOT INITIAL
*--------------------------------------------------------------------*
  DELETE ADJACENT DUPLICATES FROM li_create_contract COMPARING srid.
*------------Process data for BAPI processing------------------------*
  LOOP AT li_create_contract INTO DATA(lst_output_x).
    DATA(lv_index) = sy-tabix.

    CLEAR lst_output_dummy.
    lst_output_dummy = lst_output_x.

*   Whenever we see new header entry, we refresh the tables
    IF lst_output_dummy-auart  EQ c_rew.
      CLEAR: lst_output_x.
      CLEAR: li_contract_itm,
             li_contract_partn,
             li_contract_cond,
             li_contract_data,
             li_contract_data_inx,
             lst_contract_hdrin,
             li_extensionin,
             li_text,
             lst_contract_hrdinx,
             lst_contract_data,
             lst_contract_data_inx,
             lv_salesdocin,
             li_return.

      DATA(lv_index1) = sy-tabix + 1.
    ENDIF. " IF lst_output_dummy-auart EQ c_rew
    READ TABLE li_create_contract INTO DATA(lst_output_1)
    INDEX lv_index1.
    IF sy-subrc EQ 0.
      READ TABLE li_vbeln_quot INTO DATA(lst_vbkd)
                         WITH KEY ihrez = lst_output_1-srid.
      IF sy-subrc EQ 0.
*          No code req
      ENDIF. " IF sy-subrc EQ 0
    ENDIF. " IF sy-subrc EQ 0

*  Populate the Header records
    IF lst_output_dummy-auart IS NOT INITIAL.

*====================================================================*
* Populate Header structure
*====================================================================*
      IF lst_contract_hdrin IS INITIAL.

*** BOC for FM
*        READ TABLE li_vbak INTO DATA(lst_vbak)
*                           WITH KEY qvbeln = lst_vbkd-vbeln.
*        IF sy-subrc EQ 0.
*          lst_contract_hdrin-refobjtype = lst_vbak-qauart.
*          lst_contract_hdrin-sales_org  = lst_vbak-vkorg.
*          lst_contract_hdrin-distr_chan = lst_vbak-vtweg.
*          lst_contract_hdrin-division   = lst_vbak-spart.
*        ENDIF. " IF sy-subrc EQ 0

        li_header_delta[] = li_header_all[].
        DELETE li_header_delta WHERE doc_number NE lst_vbkd-vbeln.

        READ TABLE li_header_delta INTO lst_header_delta INDEX 1.

        CLEAR: lst_header_delta-doc_number, lst_header_delta-rec_date,
        lst_header_delta-rec_time, lst_header_delta-created_by,
        lst_header_delta-sd_doc_cat, lst_header_delta-ref_doc.

        MOVE-CORRESPONDING lst_header_delta TO lst_contract_hdrin.


*        READ TABLE li_xvbak_all INTO DATA(lst_vbak)
*                                WITH KEY vbeln = lst_vbkd-vbeln.
*        IF sy-subrc = 0.
*          lst_contract_hdrin-refobjtype = lst_vbak-auart.
*          lst_contract_hdrin-sales_org  = lst_vbak-vkorg.
*          lst_contract_hdrin-distr_chan = lst_vbak-vtweg.
*          lst_contract_hdrin-division   = lst_vbak-spart.
*        ENDIF. " IF sy-subrc = 0
*** EOC for FM

        lst_contract_hdrin-doc_type   = lst_output_dummy-auart.
        lst_contract_hdrin-sales_off  = lst_output_dummy-vkbur.
        lst_contract_hdrin-purch_no_c = lst_output_dummy-bstnk.
        lst_contract_hdrin-po_method  = lst_output_dummy-bsark.
        lst_contract_hdrin-dlv_block  = lst_output_dummy-lifsk.
        lst_contract_hdrin-bill_block = lst_output_dummy-faksk.
        lst_contract_hdrin-ref_doc_l  = lst_output_dummy-xblnr.
        lst_contract_hdrin-cstcndgrp4 = lst_output_dummy-kdkg4.
        lst_contract_hdrin-cstcndgrp5 = lst_output_dummy-kdkg5.
        lst_contract_hdrin-pymt_meth  = lst_output_dummy-zlsch.

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-guebg
          IMPORTING
            date_internal            = lst_contract_hdrin-ct_valid_f
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-ct_valid_f.
        ENDIF. " IF sy-subrc IS NOT INITIAL

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-gueen
          IMPORTING
            date_internal            = lst_contract_hdrin-ct_valid_t
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-ct_valid_t.
        ENDIF. " IF sy-subrc IS NOT INITIAL

*** Moving all contract data
        li_veda_delta[] = li_veda_all[].
        DELETE li_veda_delta WHERE doc_number NE lst_vbkd-vbeln.

        LOOP AT li_veda_delta INTO lst_veda_delta.
          lst_contract_data-itm_number = lst_veda_delta-itm_number.
          lst_contract_data-con_st_dat = lst_veda_delta-contstadat.
          lst_contract_data-con_en_dat = lst_veda_delta-contenddat.
          APPEND lst_contract_data TO li_contract_data.
          CLEAR lst_contract_data.
        ENDLOOP. " LOOP AT li_veda_delta INTO lst_veda_delta
*        MOVE-CORRESPONDING li_veda_delta TO li_contract_data.
*        MODIFY li_contract_data FROM lst_contract_data TRANSPORTING
*        doc_number WHERE doc_number IS NOT INITIAL.
****

*        lst_contract_data-itm_number = lc_posnr.
        READ TABLE li_contract_data ASSIGNING <lst_contract_data>
        WITH KEY itm_number = lc_posnr.

        IF sy-subrc = 0.

          IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL.
*          lst_contract_data-con_st_dat = lst_contract_hdrin-ct_valid_f.
            <lst_contract_data>-con_st_dat = lst_contract_hdrin-ct_valid_f.
          ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL

          IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL.
*          lst_contract_data-con_en_dat = lst_contract_hdrin-ct_valid_t.
            <lst_contract_data>-con_en_dat = lst_contract_hdrin-ct_valid_t.
          ENDIF. " IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL

          UNASSIGN <lst_contract_data>.
*        APPEND lst_contract_data TO li_contract_data.
*        CLEAR  lst_contract_data.
*        APPEND lst_contract_data TO li_contract_data.

        ENDIF. " IF sy-subrc = 0

*====================================================================*
*     Header INX structure population for Header
*====================================================================*
        CLEAR lst_contract_hrdinx.

        lst_contract_hrdinx-doc_type     = abap_true.
        lst_contract_hrdinx-sales_org    = abap_true.
        lst_contract_hrdinx-distr_chan   = abap_true.
        lst_contract_hrdinx-division     = abap_true.
*IF .
*
*ENDIF.
        IF lst_contract_hdrin-sales_off IS NOT INITIAL.
          lst_contract_hrdinx-sales_off    = abap_true.
        ENDIF. " IF lst_contract_hdrin-sales_off IS NOT INITIAL

        IF lst_contract_hdrin-purch_no_c IS NOT INITIAL.
          lst_contract_hrdinx-purch_no_c   = abap_true.
        ENDIF. " IF lst_contract_hdrin-purch_no_c IS NOT INITIAL

        IF lst_contract_hdrin-dlv_block IS NOT INITIAL.
          lst_contract_hrdinx-dlv_block    = abap_true.
        ENDIF. " IF lst_contract_hdrin-dlv_block IS NOT INITIAL

        IF lst_contract_hdrin-bill_block IS NOT INITIAL.
          lst_contract_hrdinx-bill_block   = abap_true.
        ENDIF. " IF lst_contract_hdrin-bill_block IS NOT INITIAL

        IF lst_contract_hdrin-po_method IS NOT INITIAL.
          lst_contract_hrdinx-po_method    = abap_true.
        ENDIF. " IF lst_contract_hdrin-po_method IS NOT INITIAL

        IF lst_contract_hdrin-ref_doc_l IS NOT INITIAL.
          lst_contract_hrdinx-ref_doc_l    = abap_true.
        ENDIF. " IF lst_contract_hdrin-ref_doc_l IS NOT INITIAL


        IF lst_contract_hdrin-ct_valid_t  IS NOT INITIAL.
          lst_contract_hrdinx-ct_valid_t = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL
          lst_contract_hrdinx-ct_valid_t = abap_false.
        ENDIF. " IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL

        IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL.
          lst_contract_hrdinx-ct_valid_f = abap_true.
        ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL
          lst_contract_hrdinx-ct_valid_f = abap_false.
        ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL

        IF lst_contract_hdrin-cstcndgrp4 IS NOT INITIAL.
          lst_contract_hrdinx-cstcndgrp4  = abap_true.
        ENDIF. " IF lst_contract_hdrin-cstcndgrp4 IS NOT INITIAL

        IF lst_contract_hdrin-cstcndgrp5 IS NOT INITIAL.
          lst_contract_hrdinx-cstcndgrp5 = abap_true.
        ENDIF. " IF lst_contract_hdrin-cstcndgrp5 IS NOT INITIAL

        lst_contract_data_inx-itm_number = lc_posnr.
        lst_contract_data_inx-con_st_dat = abap_true.
        lst_contract_data_inx-con_st_rul = abap_true.
        lst_contract_data_inx-con_en_dat = abap_true.
        lst_contract_data_inx-con_en_rul = abap_true.

        APPEND lst_contract_data_inx TO li_contract_data_inx.
        CLEAR lst_contract_data_inx.
*====================================================================*
* Populate the conditions table
*====================================================================*
*** BOC for FM
        li_konv_delta[] = li_konv_all[].
        DELETE li_konv_delta[] WHERE cond_type IS INITIAL.
        DELETE li_konv_delta[] WHERE sd_doc NE lst_vbkd-vbeln.
        MOVE-CORRESPONDING li_konv_delta[] TO li_contract_cond.

        READ TABLE li_contract_cond ASSIGNING <lst_contract_cond> WITH KEY
        itm_number = lc_posnr.

        IF sy-subrc = 0.

          IF lst_output_dummy-kschl IS NOT INITIAL.
            <lst_contract_cond>-cond_type = lst_output_dummy-kschl.
          ENDIF. " IF lst_output_dummy-kschl IS NOT INITIAL

          IF lst_output_dummy-kbetr IS NOT INITIAL.
            <lst_contract_cond>-cond_value = lst_output_dummy-kbetr / 10.
          ENDIF. " IF lst_output_dummy-kbetr IS NOT INITIAL

          UNASSIGN <lst_contract_cond>.

        ENDIF. " IF sy-subrc = 0


*        lst_contract_cond-itm_number = lc_posnr.
*        lst_contract_cond-cond_type  = lst_output_dummy-kschl.
*        lst_contract_cond-cond_value  = lst_output_dummy-kbetr / 10.
*        APPEND lst_contract_cond TO li_contract_cond.
*        CLEAR lst_contract_cond.

*** EOC for FM

*====================================================================*
*      BAPI TEXT
*====================================================================*
*** BOC for FM
        li_texth_delta[] = li_texth_all[].
        DELETE li_texth_delta WHERE sd_doc NE lst_vbkd-vbeln.
        MOVE-CORRESPONDING li_texth_delta TO li_text.
        MODIFY li_text FROM lst_text TRANSPORTING doc_number
        WHERE doc_number IS NOT INITIAL.
*** EOC for FM
        lst_text-itm_number = lc_posnr.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = lst_output_dummy-stxh.

        APPEND lst_text TO li_text.
        CLEAR  lst_text.

*** BOC for FM
        li_vbpa_delta[] = li_vbpa_all.
        DELETE li_vbpa_delta WHERE sd_doc NE lst_vbkd-vbeln.
        MOVE-CORRESPONDING li_vbpa_delta TO li_contract_partn.
*      MODIFY li_contract_partn FROM lst_contract_partn TRANSPORTING
*      sd_doc WHERE sd_doc IS NOT INITIAL.
*** EOC for FM
**** Inserting Partner Information
*
*        READ TABLE li_vbpa INTO DATA(lst_vbpa)
*                           WITH KEY qvbeln = lst_vbkd-vbeln
*                                    posnr = lc_posnr.
*        IF sy-subrc EQ 0.
*          lst_contract_partn-partn_role = lst_vbpa-parvw.
*          lst_contract_partn-partn_numb = lst_vbpa-kunnr.
*          APPEND lst_contract_partn TO li_contract_partn.
*          CLEAR lst_contract_partn.
*        ENDIF. " IF sy-subrc EQ 0
*
**     Get Increment of item number in the SD document
*        IF lst_output_dummy-auart IS NOT INITIAL.
*          DATA(lst_tvak) = li_tvak[ auart = lst_output_dummy-auart ].
*        ENDIF. " IF lst_output_dummy-auart IS NOT INITIAL

      ELSE. " ELSE -> IF lst_contract_hdrin IS INITIAL
*====================================================================*
*     Populating Partner Table
*====================================================================*
*        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
*          EXPORTING
*            input  = lst_output_dummy-parvw
*          IMPORTING
*            output = lst_output_dummy-parvw.
*
*        lst_contract_partn-partn_role = lst_output_dummy-parvw.
*
*        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*          EXPORTING
*            input  = lst_output_dummy-customer
*          IMPORTING
*            output = lst_contract_partn-partn_numb.
*
*        lst_contract_partn-itm_number = lc_posnr.
*
*        APPEND lst_contract_partn TO li_contract_partn.
*        CLEAR lst_contract_partn.
**** ----------------- Do Nothing -------------------
      ENDIF. " IF lst_contract_hdrin IS INITIAL

    ELSE. " ELSE -> IF lst_output_dummy-auart IS NOT INITIAL

*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*        EXPORTING
*          input  = lst_output_dummy-posnr
*        IMPORTING
*          output = lst_output_dummy-posnr.
*
*      READ TABLE li_contract_itm WITH KEY itm_number =
*      lst_output_dummy-posnr TRANSPORTING NO FIELDS.
*      IF sy-subrc IS NOT INITIAL.
*====================================================================*
*    Check BOM to determine line item numbers
*====================================================================*
*        READ TABLE li_mvke ASSIGNING FIELD-SYMBOL(<lfs_mvke>)
*        WITH KEY matnr = lst_output_dummy-matnr        " Material Number
*                 vkorg = lst_contract_hdrin-sales_org  " Sales Organization
*                 vtweg = lst_contract_hdrin-distr_chan " Distribution Channel
*                 BINARY SEARCH.
*        lst_contract_hdrin-division   = lst_output_dummy-spart.
*        IF sy-subrc IS INITIAL.
*          IF <lfs_mvke>-dwerk IS NOT INITIAL.
*            PERFORM f_get_bom USING    lst_output_dummy-matnr
*                                       <lfs_mvke>-dwerk
*                                       lst_output_dummy-zmeng
*                                       lv_index
*                                       lst_tvak-incpo
*                              CHANGING li_create_contract
*                                       li_bom_items.
*          ENDIF. " IF <lfs_mvke>-dwerk IS NOT INITIAL
*        ENDIF. " IF sy-subrc IS INITIAL

*   If not the Sold to lines, they are the ship to Lines ( PARVW = 'WE')  in an order
*   Which can be multiple and is considered as the ITEM lines of the Order
*====================================================================*
* First populate item table
*====================================================================*
      READ TABLE li_vbeln_quot INTO DATA(lst_vbkd_line)
                         WITH KEY ihrez = lst_output_dummy-srid.
      IF sy-subrc EQ 0.
        READ TABLE li_vbap INTO DATA(lst_vbap)
                   WITH KEY qvbeln = lst_vbkd_line-vbeln
                            posnr  = lst_vbkd_line-posnr.
        IF sy-subrc EQ 0.
          IF lst_vbap-uepos IS INITIAL.
            lst_contract_itm-material     = lst_vbap-matnr.
            lst_contract_itm-target_qty   = lst_vbap-kwmeng.
            lst_contract_itm-target_qu    = lst_vbap-vrkme.
            lst_contract_itm-ref_doc      = lst_vbap-qvbeln.
            lst_contract_itm-ref_doc_it   = lst_vbap-posnr.
            lst_contract_itm-ref_doc_ca   = lc_b.
            lst_contract_itm-itm_number   = lst_output_dummy-posnr.
            lst_contract_itm-ref_1        = lst_output_dummy-srid.
            lst_contract_itm-reason_rej   = lst_output_dummy-abgru.
            lst_contract_itm-ref_1_s      = lst_output_dummy-ihrez.
            lst_contract_itm-cstcndgrp4   = lst_output_dummy-kdkg4.
            lst_contract_itm-cstcndgrp5   = lst_output_dummy-kdkg5.
            APPEND lst_contract_itm TO li_contract_itm.
            CLEAR lst_contract_itm.

          ENDIF. " IF lst_vbap-uepos IS INITIAL
        ENDIF. " IF sy-subrc EQ 0

*====================================================================*
* Populate the conditions table
*====================================================================*
        lst_contract_cond-itm_number = lst_output_dummy-posnr.
        lst_contract_cond-cond_type  = lst_output_dummy-kschl.
        lst_contract_cond-cond_value = lst_output_dummy-kbetr / 10.
        APPEND lst_contract_cond TO li_contract_cond.
        CLEAR lst_contract_cond.
      ENDIF. " IF sy-subrc EQ 0


*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_text-itm_number = lst_output_dummy-posnr.
      lst_text-text_id    = v_tdid.
      lst_text-langu      = sy-langu.
      lst_text-format_col = c_format.
      lst_text-text_line  = lst_output_dummy-stxh.

      APPEND lst_text TO li_text.

*====================================================================*
*     Populate Item Date
*====================================================================*
      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-guebg
        IMPORTING
          date_internal            = lst_contract_data-con_st_dat
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_contract_data-con_st_dat.
      ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-gueen
          IMPORTING
            date_internal            = lst_contract_data-con_en_dat
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_data-con_en_dat.
        ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL
          lst_contract_data_inx-con_en_dat = abap_true.
          lst_contract_data_inx-con_en_rul = abap_true.
        ENDIF. " IF sy-subrc IS NOT INITIAL

        lst_contract_data-itm_number = lst_output_dummy-posnr.
        APPEND lst_contract_data TO li_contract_data.

        lst_contract_data_inx-itm_number = lst_output_dummy-posnr.
        lst_contract_data_inx-con_st_dat = abap_true.
        lst_contract_data_inx-con_st_rul = abap_true.
        APPEND lst_contract_data_inx TO li_contract_data_inx.
      ENDIF. " IF sy-subrc IS NOT INITIAL
*
*        IF li_bom_items IS NOT INITIAL.
*          LOOP AT li_bom_items ASSIGNING FIELD-SYMBOL(<lfs_bom>).
*
*            lst_text-itm_number = <lfs_bom>-old_posnr + lst_tvak-incpo.
*            lst_text-text_id    = v_tdid.
*            lst_text-langu      = sy-langu.
*            lst_text-format_col = c_format.
*            lst_text-text_line  = lst_output_dummy-stxh.
*
*            APPEND lst_text TO li_text1.
*            CLEAR  lst_text.
*
*          ENDLOOP. " LOOP AT li_bom_items ASSIGNING FIELD-SYMBOL(<lfs_bom>)
*          REFRESH : li_bom_items.
*        ENDIF. " IF li_bom_items IS NOT INITIAL

*====================================================================*
*     Populate partner details
*====================================================================*

*        CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
*          EXPORTING
*            input  = lst_output_dummy-parvw
*          IMPORTING
*            output = lst_output_dummy-parvw.
*
*
*        lst_contract_partn-partn_role = lst_output_dummy-parvw.
*
*        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*          EXPORTING
*            input  = lst_output_dummy-kunnr
*          IMPORTING
*            output = lst_contract_partn-partn_numb.
*
*        lst_contract_partn-itm_number = lst_output_dummy-posnr.
*        APPEND lst_contract_partn TO li_contract_partn.
*        CLEAR lst_contract_partn.


    ENDIF. " IF lst_output_dummy-auart IS NOT INITIAL
*   Before a new header record/ last entry - Create contract
    IF lv_index EQ lines( li_create_contract ).
      DATA(lv_create_contract) = abap_true.
    ELSE. " ELSE -> IF lv_index EQ lines( li_create_contract )
      IF li_create_contract[ ( lv_index + 1 ) ]-auart EQ c_rew.
        lv_create_contract = abap_true.
      ENDIF. " IF li_create_contract[ ( lv_index + 1 ) ]-auart EQ c_rew
    ENDIF. " IF lv_index EQ lines( li_create_contract )

    IF lv_create_contract EQ abap_true.
      CLEAR lv_create_contract.
*====================================================================*
*     Call Bapi
*====================================================================*
      CALL FUNCTION 'BAPI_CONTRACT_CREATEFROMDATA' ##FM_SUBRC_OK
        EXPORTING
          contract_header_in     = lst_contract_hdrin
          contract_header_inx    = lst_contract_hrdinx
        IMPORTING
          salesdocument          = lv_salesdocin
        TABLES
          return                 = li_return
          contract_items_in      = li_contract_itm
          contract_partners      = li_contract_partn
          contract_conditions_in = li_contract_cond
          contract_data_in       = li_contract_data
          contract_data_inx      = li_contract_data_inx
          contract_text          = li_text.
*          extensionin            = li_extensionin.

      IF NOT li_return IS INITIAL.
        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc IS INITIAL.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: lst_return,
                 st_err_msg.
        ELSE. " ELSE -> IF sy-subrc IS INITIAL

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' .

          READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
          IF sy-subrc IS INITIAL.
            st_err_msg-wbeln = lv_salesdocin.
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return,
                   st_err_msg.
          ENDIF. " IF sy-subrc IS INITIAL
          IF li_text1 IS NOT INITIAL. " BOM item text internal table

            LOOP AT li_text1 INTO lst_text1. " loop on BOM item text
*** concatenating contract number with line item number
              CONCATENATE lv_salesdocin lst_text1-itm_number INTO lst_header1-tdname.

              lst_header1-tdspras = sy-langu.
              lst_header1-tdobject  = lc_vbbp.
              lst_header1-tdid      = lst_text1-text_id.

              lst_lines1-tdline = lst_text1-text_line.
              lst_lines1-tdformat = lst_text1-format_col.
              APPEND lst_lines1 TO li_lines1. " appending text
              CLEAR lst_lines1.

*** Calling SAVE_TEXT FM to update text
*              CALL FUNCTION 'SAVE_TEXT'
*                EXPORTING
*                  client          = sy-mandt
*                  header          = lst_header1
*                  savemode_direct = abap_true
*                TABLES
*                  lines           = li_lines1
*                EXCEPTIONS
*                  id              = 1
*                  language        = 2
*                  name            = 3
*                  object          = 4
*                  OTHERS          = 5.
*
*              IF sy-subrc = 0.
*                REFRESH li_lines1.
*                CLEAR : lst_lines1, lst_header1.
*              ENDIF. " IF sy-subrc = 0
            ENDLOOP. " LOOP AT li_text1 INTO lst_text1

          ENDIF. " IF li_text1 IS NOT INITIAL
        ENDIF. " IF sy-subrc IS INITIAL
      ENDIF. " IF NOT li_return IS INITIAL

    ENDIF. " IF lv_create_contract EQ abap_true
  ENDLOOP  . " LOOP AT li_create_contract INTO DATA(lst_output_x)

*** For Displaying the LOG
  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DESELECT_LINES_WR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_I_OUTPUT_X  text
*----------------------------------------------------------------------*
FORM f_deselect_lines_wr  CHANGING fp_i_output TYPE tt_output_x.
  DATA: lst_srid  TYPE ty_srid.

  DATA(li_output) = fp_i_output.
  DATA : lv_posnr TYPE posnr. " Item number of the SD document

  LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                    WHERE bsark NE space
                      AND auart NE space .
    DATA(lv_tabix) = sy-tabix.

*    If header not selected, ignore corresponding items
    IF <lfs_output>-sel NE abap_true.
      lv_tabix = lv_tabix + 1.
      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)
                          FROM lv_tabix.
        IF <lfs_main_output>-auart NE space.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-auart NE space
*       Deselect Items
        CLEAR : <lfs_main_output>-sel.
      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)
    ELSE. " ELSE -> IF <lfs_output>-sel NE abap_true
*    If header selected, check corresponding items. If items are not
*    selected, deselect header
      lv_tabix = lv_tabix + 1.
      CLEAR : lv_posnr.
      LOOP AT fp_i_output ASSIGNING <lfs_main_output>
                          FROM lv_tabix.
        IF <lfs_main_output>-auart NE space.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-auart NE space
*        Mark that line items exist in file
        DATA(lv_line_exists)  = abap_true.

*** Populating SRID
        IF <lfs_main_output>-srid IS NOT INITIAL.
          WRITE <lfs_main_output>-srid TO lst_srid-srid.
          APPEND lst_srid TO i_srid.
          CLEAR lst_srid.
        ENDIF. " IF <lfs_main_output>-srid IS NOT INITIAL

*        If any of the line item is selected, mark the variable
        IF <lfs_main_output>-sel EQ abap_true.
          DATA(lv_line_selected) = abap_true.
        ENDIF. " IF <lfs_main_output>-sel EQ abap_true
        IF lv_posnr IS INITIAL.
          lv_posnr = c_00010.
          <lfs_main_output>-posnr = lv_posnr.
        ELSE. " ELSE -> IF lv_posnr IS INITIAL
          lv_posnr = lv_posnr + 10.
          <lfs_main_output>-posnr = lv_posnr.
        ENDIF. " IF lv_posnr IS INITIAL
      ENDLOOP. " LOOP AT fp_i_output ASSIGNING <lfs_main_output>
*      If no line selected
      IF  lv_line_exists   EQ abap_true
      AND lv_line_selected NE abap_true.

*         Get back the header index
        lv_tabix = lv_tabix - 1.

        READ TABLE fp_i_output ASSIGNING <lfs_main_output>
        INDEX lv_tabix.

        IF <lfs_main_output> IS ASSIGNED.
*            Deselect Header
          CLEAR : <lfs_main_output>-sel.
        ENDIF. " IF <lfs_main_output> IS ASSIGNED

      ENDIF. " IF lv_line_exists EQ abap_true

      CLEAR : lv_line_selected,
              lv_line_exists.
    ENDIF. " IF <lfs_output>-sel NE abap_true
  ENDLOOP. " LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_REW_QREF_CONTRACT_COPY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_rew_qref_contract_copy .

*====================================================================*
*       Local Types Declaration
*====================================================================*
  TYPES :
*           BEGIN OF lty_srid,
*            srid TYPE ihrez,  " Your Reference
*          END OF lty_srid,

    BEGIN OF lty_vbeln_quot,
      vbeln TYPE vbeln, " Sales and Distribution Document Number
      posnr TYPE posnr, " Item number of the SD document
      ihrez TYPE ihrez, " Your Reference
*      knumv TYPE knumv, " Number of the document condition
      vkorg TYPE vkorg, " Sales Organization
      vtweg TYPE vtweg, " Distribution Channel
      spart TYPE spart, " Division
    END OF lty_vbeln_quot.

*====================================================================*
*       Local Internal Table Declaration
*====================================================================*

  DATA : li_order              TYPE mds_sales_key_tab,
         li_return             TYPE STANDARD TABLE OF bapiret2, " Return Parameter
         li_vbeln_quot         TYPE STANDARD TABLE OF lty_vbeln_quot INITIAL SIZE 0,
**** BOC CFSLIT
         li_vbeln_quot_temp    TYPE STANDARD TABLE OF lty_vbeln_quot INITIAL SIZE 0,
         li_vbeln_quot_temp2   TYPE STANDARD TABLE OF lty_vbeln_quot INITIAL SIZE 0,
         lst_vbeln_quot_temp   TYPE lty_vbeln_quot,
**** EOC CFSLIT
         li_srid               TYPE STANDARD TABLE OF ty_srid INITIAL SIZE 0,
         li_contract_itm       TYPE STANDARD TABLE OF bapisditm,  " Item data
         li_contract_items_inx TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
         li_partner            TYPE STANDARD TABLE OF bapiparnrc, " Partner
         li_contract_cond      TYPE STANDARD TABLE OF bapicond,   " Contract conditions
         li_contract_condx     TYPE STANDARD TABLE OF bapicondx,  " Communication Fields for Maintaining Conditions in the Order
         li_contract_data      TYPE STANDARD TABLE OF bapictr     " Communciation Fields: SD Contract Data
                                 INITIAL SIZE 0,
*        li_cond_class         TYPE STANDARD TABLE OF lty_cond_class
*        INITIAL SIZE 0,                                          " Contract Data
         li_extensionin        TYPE STANDARD TABLE OF bapiparex, " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
*        li_konv               TYPE STANDARD TABLE OF lty_konv
*        INITIAL SIZE 0,
         li_contract_data_inx  TYPE STANDARD TABLE OF bapictrx " Communication fields: SD Contract Data Checkbox
                                 INITIAL SIZE 0,
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
         li_text               TYPE STANDARD TABLE OF bapisdtext, " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
         li_final_change_subs  TYPE tt_output_x_chg,
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
         li_return1            TYPE STANDARD TABLE OF bapiret2. " Return Parameter

*====================================================================*
*       Local Constants
*====================================================================*
  CONSTANTS: lc_zrew  TYPE auart VALUE 'ZREW',       " Sales Document Type
             lc_devid TYPE zdevid     VALUE 'E101',  " Development ID
             lc_faksk TYPE rvari_vnam VALUE 'FAKSK', " ABAP: Name of Variant Variable
             lc_i     TYPE tvarv_sign VALUE 'I',     " ABAP: ID: I/E (include/exclude values)
             lc_eq    TYPE tvarv_opti VALUE 'EQ',    " ABAP: Selection option (EQ/BT/CP/...)
             lc_b     TYPE vbtyp  VALUE 'B',         " SD document category
             lc_ag    TYPE char2  VALUE 'AG'.        " Ag of type CHAR2

*====================================================================*
*       Local Data Declaration
*====================================================================*
  DATA : lv_rewdoc     TYPE bapivbeln-vbeln, " Sales Document
         lv_salesdocin TYPE bapivbeln-vbeln, "for export field
         lv_faksk      TYPE faksk.           " Billing block in SD document

*====================================================================*
*       Local Work-area
*====================================================================*
  DATA: lst_return            TYPE bapiret2,   " For status of contract creation
        lst_output_dummy      TYPE ty_output_x,
        lst_bape_vbak         TYPE bape_vbak,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbap         TYPE bape_vbap,  " BAPI Interface for Customer Enhancements to Table VBAP
        lst_bape_vbapx        TYPE bape_vbapx, " BAPI Interface for Customer Enhancements to Table VBAPX
        lst_bape_vbakx        TYPE bape_vbakx, " BAPI Interface for Customer Enhancements to Table VBAKX
        lst_extensionin       TYPE bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        lst_contract_hdrin    TYPE bapisdh1,   " Header data
        lst_contract_hrdinx   TYPE bapisdh1x,  " Header data extended for promo code
        lst_contract_itm      TYPE bapisditm,  " Item data
        lst_contract_itmx     TYPE bapisditmx, " Item data
        lst_contract_cond     TYPE bapicond,   " Contract conditions
        lst_partner           TYPE bapiparnrc, " Partner
*        lst_output_dummy      TYPE ty_output_x_chg,
        lst_return1           TYPE bapiret2, " For status of contract creation
        lst_contract_data     TYPE bapictr,  " Contract Data
        lst_contract_data_inx TYPE bapictrx, " Communication fields: SD Contract Data Checkbox
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
        lst_text              TYPE bapisdtext, " Communication fields: SD texts
        lv_refdoc             TYPE vbeln .    "NPOLINA ERPM16504  ED2K918499
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017

*  LOOP AT i_output_x INTO DATA(lst_output_x) WHERE sel = c_x.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

*** Select data from ZCACONSTANT Table
  SELECT  devid ,          " Development ID
          param1,          " ABAP: Name of Variant Variable
          param2,          " ABAP: Name of Variant Variable
          srno,            " ABAP: Current selection number
          sign,            " ABAP: ID: I/E (include/exclude values)
          opti,            " ABAP: Selection option (EQ/BT/CP/...)
          low,             " Lower Value of Selection Condition
          high             " Upper Value of Selection Condition
          FROM zcaconstant " Wiley Application Constant Table
          INTO TABLE @DATA(li_constant)
          WHERE devid    EQ @lc_devid
          AND   param1   EQ @lc_faksk
          AND   activate EQ @abap_true.
  IF sy-subrc IS INITIAL.

    READ TABLE li_constant INTO DATA(lst_constant) INDEX 1.
    lv_faksk = lst_constant-low.
  ENDIF. " IF sy-subrc IS INITIAL

* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA(li_output_x) = i_output_x.
  DATA : lv_waerk TYPE waerk,
         lv_kbetr TYPE kbetr.
  LOOP AT li_output_x ASSIGNING FIELD-SYMBOL(<lst_output>).
    IF sy-tabix EQ 1.
      lv_waerk = <lst_output>-waerk.
    ENDIF.
    CLEAR : lv_kbetr.
    lv_kbetr = <lst_output>-kbetr.
    PERFORM f_curr_conv_to_intrnl USING <lst_output>-customer "ED2K921132
                                        <lst_output>-parvw
                                        <lst_output>-vkorg
                                        <lst_output>-vtweg
                                        <lst_output>-spart
                                        <lst_output>-vbeln
                                  CHANGING lv_waerk
                                           lv_kbetr.
    <lst_output>-kbetr = lv_kbetr.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <lst_output>-zlogno
      IMPORTING
        output = <lst_output>-zlogno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDLOOP.
  FREE : lv_waerk, lv_kbetr.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341

* Get Increment of item number in the SD document
  DATA(li_output) = li_output_x.

* Sort by Order Type
  SORT li_output BY auart.

  DELETE li_output WHERE auart IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING auart.

  SELECT auart,	 " Sales Document Type
         incpo   " Increment of item number in the SD document
    FROM tvak    " Sales Document Types
    INTO TABLE @DATA(li_tvak)
    FOR ALL ENTRIES IN @li_output
    WHERE auart EQ @li_output-auart.
  IF sy-subrc IS INITIAL.
    SORT li_tvak BY auart.
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = li_output_x.

*--------------------------------------------------------------------*
* Deselect item lines if corresponding header is not selected
* In similar way, deselect header lines if corresponding item line is
* not selected
*--------------------------------------------------------------------*
  PERFORM f_deselect_lines_wr CHANGING li_output_x.
*--------------------------------------------------------------------*
  DATA(li_create_contract) = li_output_x.
  DELETE li_create_contract WHERE sel NE abap_true.

  IF li_create_contract IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_create_contract IS INITIAL


  li_srid[] = i_srid.
*--------------------------------------------------------------------*
  SORT li_srid BY srid.
  DELETE ADJACENT DUPLICATES FROM li_srid COMPARING srid.
*--------------------------------------------------------------------*
  IF li_srid IS NOT INITIAL.
*** Selecting Data to fetch Quotation Number
    SELECT vbkd~vbeln, " Sales and Distribution Document Number
           vbkd~posnr,
           vbkd~ihrez, " Your Reference
           vbak~vkorg,
           vbak~vtweg,
           vbak~spart  " Division
      FROM vbkd INNER JOIN vbak
      ON vbkd~vbeln EQ vbak~vbeln
      INTO TABLE @li_vbeln_quot
      FOR ALL ENTRIES IN @li_srid
          WHERE vbkd~ihrez EQ @li_srid-srid
            AND vbak~vbtyp EQ @lc_b.
    IF sy-subrc = 0.
      SORT li_vbeln_quot BY vbeln posnr.
      IF li_vbeln_quot IS NOT INITIAL.
*** Selecting Data from VBAK table
        SELECT vbak~vbeln AS qvbeln,
               vbak~auart AS qauart,
               vkorg,
               vtweg,
               spart " Division
          FROM vbak  " Sales Document: Header Data
          INTO TABLE @DATA(li_vbak)
          FOR ALL ENTRIES IN @li_vbeln_quot
          WHERE vbak~vbeln EQ @li_vbeln_quot-vbeln.

        IF sy-subrc = 0.
          SORT li_vbak BY qvbeln.
        ENDIF. " IF sy-subrc = 0

*** Selecting Data from VBAP table
        SELECT vbap~vbeln AS qvbeln,
               vbap~posnr,
               vbap~matnr,
               vbap~uepos,
               vbap~kwmeng,
               vbap~vrkme " Target quantity UoM
          FROM vbap       " Sales Document: Item Data
          INTO TABLE @DATA(li_vbap)
          FOR ALL ENTRIES IN @li_vbeln_quot
          WHERE vbap~vbeln EQ @li_vbeln_quot-vbeln.

        IF sy-subrc = 0.
          SORT li_vbap BY qvbeln posnr.
*      DELETE li_vbap WHERE uepos IS NOT INITIAL.
        ENDIF. " IF sy-subrc = 0

*** Selecting Data from VBPA table
        SELECT vbpa~vbeln AS qvbeln,
               vbpa~posnr,
               vbpa~parvw,
               vbpa~kunnr " Customer Number
          FROM vbpa       " Sales Document: Partner
          INTO TABLE @DATA(li_vbpa)
          FOR ALL ENTRIES IN @li_vbeln_quot
          WHERE vbpa~vbeln EQ @li_vbeln_quot-vbeln
          AND vbpa~parvw EQ @lc_ag.

        IF sy-subrc = 0.
          SORT li_vbpa BY qvbeln.
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF li_vbeln_quot IS NOT INITIAL
    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF li_srid IS NOT INITIAL

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  IF p_devid = c_e101 AND li_create_contract[] IS NOT INITIAL.
    SELECT * FROM ze225_staging INTO TABLE i_e101_stage
      FOR ALL ENTRIES IN li_create_contract
      WHERE zuid_upld EQ li_create_contract-zoid
        AND zoid EQ li_create_contract-identifier
        AND zlogno EQ li_create_contract-zlogno.
    IF sy-subrc EQ 0.
      SORT i_e101_stage.
    ENDIF.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267


* SOC by NPOLINA DM1913 28/June/2019 ED2K915483
  DATA(li_orders) = li_create_contract.
  DELETE li_orders WHERE vbeln IS INITIAL .
  IF li_orders[] IS NOT INITIAL.
    SELECT vbeln, auart,augru FROM vbak INTO TABLE @DATA(li_ordreason)
      FOR ALL ENTRIES IN @li_orders
      WHERE vbeln = @li_orders-vbeln.
*        AND augru = @v_augru.
    IF sy-subrc EQ 0.
      SORT li_ordreason[] BY vbeln.
    ENDIF.
  ENDIF.
* EOC by NPOLINA DM1913 28/June/2019 ED2K915483

* SOC by NPOLINA ERPM16504 15/June/2020  ED2K918499
  IF li_orders[] IS NOT INITIAL.
    SELECT vbeln, posnr,bstkd FROM vbkd INTO TABLE @DATA(li_vbkdpo2)
      FOR ALL ENTRIES IN @li_orders
      WHERE vbeln = @li_orders-vbeln.
    IF sy-subrc EQ 0.
      SORT li_vbkdpo2[] BY vbeln posnr.
    ENDIF.
  ENDIF.
* EOC by NPOLINA ERPM16504 15/June/2020  ED2K918499
*----------Main loop-------------------------------------------------*
  LOOP AT li_create_contract INTO DATA(lst_output_x).
    DATA(lv_index) = sy-tabix.
    CLEAR lst_output_dummy.
    lst_output_dummy = lst_output_x.

*   Whenever we see new header entry, we refresh the tables
    IF lst_output_dummy-auart  EQ c_rew.
      CLEAR: lst_output_x.
      CLEAR: li_return,
             li_return1,
             li_contract_itm,
             li_contract_items_inx,
             li_partner,
             li_contract_cond,
             li_text,
             li_return,
             lv_salesdocin,
             li_contract_data,
             li_contract_data_inx,
             lst_contract_hdrin,
             lst_contract_hrdinx,
             lst_contract_data,
             lst_contract_data_inx,
*** BOC CFSLIT
             li_vbeln_quot_temp2,
             li_vbeln_quot_temp,
*** EOC CFSLIT
             li_extensionin,
             lv_refdoc.             "NPOLINA ERPM16504  ED2K918499
      DATA(lv_index1) = sy-tabix + 1.
    ENDIF. " IF lst_output_dummy-auart EQ c_rew
*----------------Read next line for ref id---------------------------*
    IF lst_output_dummy-auart EQ c_rew. " header information
      READ TABLE li_create_contract INTO DATA(lst_output_1)
      INDEX lv_index1.
      IF sy-subrc EQ 0 AND lst_output_1-auart IS INITIAL.
        READ TABLE li_vbeln_quot INTO DATA(lst_vbkd)
                           WITH KEY ihrez = lst_output_1-srid.
        IF sy-subrc EQ 0.
          lst_output_dummy-vbeln = lst_vbkd-vbeln.
        ENDIF. " IF sy-subrc EQ 0
      ENDIF. " IF sy-subrc EQ 0 AND lst_output_1-auart IS INITIAL
*--------------------------------------------------------------------*
*====================================================================*
* Populate Header structure
*====================================================================*
      lst_contract_hdrin-sales_org  = lst_vbkd-vkorg.
      lst_contract_hdrin-distr_chan = lst_vbkd-vtweg.
      lst_contract_hdrin-division   = lst_vbkd-spart.
      lst_contract_hdrin-sales_off  = lst_output_dummy-vkbur.
      lst_contract_hdrin-purch_no_c = lst_output_dummy-bstnk.

* SOC by NPOLINA ERPM-16504 ED2K918499
      IF  lst_output_dummy-bstnk IS INITIAL  AND lst_output_dummy-vbeln IS NOT INITIAL.
        lv_refdoc = lst_output_dummy-vbeln.
        READ TABLE li_vbkdpo2 INTO DATA(ls_vbkdpoh2) WITH KEY vbeln = lst_output_dummy-vbeln
                                                         posnr = lst_output_dummy-posnr BINARY SEARCH.
        IF sy-subrc EQ 0.
          lst_contract_hdrin-purch_no_c = ls_vbkdpoh2-bstkd.
        ENDIF.
      ENDIF.
* EOC by NPOLINA ERPM-16504 ED2K918499
      lst_contract_hdrin-dlv_block  = lst_output_dummy-lifsk.
      lst_contract_hdrin-bill_block = lst_output_dummy-faksk.

*      lst_contract_hdrin-cstcndgrp3 = lst_output_dummy-kdkg3.
      lst_contract_hdrin-ref_doc_l  = lst_output_dummy-xblnr.
      lst_contract_hdrin-pymt_meth  = lst_output_dummy-zlsch.
      lst_contract_hdrin-po_method  = lst_output_dummy-bsark.
      lst_contract_hdrin-cstcndgrp4 = lst_output_dummy-kdkg4.
      lst_contract_hdrin-cstcndgrp5 = lst_output_dummy-kdkg5.

* SOC by NPOLINA 28/June/2019 DM1913 ED2K915483
* Check Source and Target Order types  match with ZCACONSTANT
      IF lst_output_dummy-vbeln IS NOT INITIAL.
        READ TABLE li_ordreason ASSIGNING FIELD-SYMBOL(<lfs_reason>) WITH KEY vbeln = lst_output_dummy-vbeln
                                                                     BINARY SEARCH.
        IF <lfs_reason> IS ASSIGNED .
          IF <lfs_reason>-augru = v_augru.
            READ TABLE i_const ASSIGNING FIELD-SYMBOL(<lfs_cons>) WITH KEY devid = c_devid_e209
                                                                                 param1 = c_auart
                                                                                 low = <lfs_reason>-auart
                                                                                 high = lst_output_dummy-auart.
            IF sy-subrc EQ 0.
              CLEAR :lst_contract_hdrin-ord_reason.
              lst_contract_hrdinx-ord_reason = abap_true.
            ELSE.
              lst_contract_hdrin-ord_reason = <lfs_reason>-augru.
              lst_contract_hrdinx-ord_reason = abap_true.
            ENDIF.
          ELSE.
            lst_contract_hdrin-ord_reason = <lfs_reason>-augru.
            lst_contract_hrdinx-ord_reason = abap_true.
          ENDIF.
        ENDIF.
      ENDIF.
* EOC by NPOLINA 28/June/2019 DM1913 ED2K915483
*** BOC by SAYANDAS on 10-Nov-2017 for ERP-4890
      IF  lst_output_dummy-guebg IS NOT INITIAL. " check added

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-guebg
          IMPORTING
            date_internal            = lst_contract_hdrin-ct_valid_f
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-ct_valid_f.
        ENDIF. " IF sy-subrc IS NOT INITIAL
      ENDIF. " IF lst_output_dummy-guebg IS NOT INITIAL

      IF lst_output_dummy-gueen IS NOT INITIAL.

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-gueen
          IMPORTING
            date_internal            = lst_contract_hdrin-ct_valid_t
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-ct_valid_t.
        ENDIF. " IF sy-subrc IS NOT INITIAL
      ENDIF. " IF lst_output_dummy-gueen IS NOT INITIAL
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
      IF lst_output_dummy-fkdat IS NOT INITIAL.

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-fkdat
          IMPORTING
            date_internal            = lst_contract_hdrin-bill_date
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_hdrin-bill_date.
        ENDIF. " IF sy-subrc IS NOT INITIAL
      ENDIF. " IF lst_output_dummy-fkdat IS NOT INITIAL
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
      IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL.
        lst_contract_data-con_st_dat = lst_contract_hdrin-ct_valid_f.
      ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL

      IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL.
        lst_contract_data-con_en_dat = lst_contract_hdrin-ct_valid_t.
      ENDIF. " IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL


*** EOC by SAYANDAS on 10-Nov-2017 for ERP-4890
      APPEND lst_contract_data TO li_contract_data.
      CLEAR lst_contract_data.

      CLEAR lst_contract_hrdinx.
      lst_contract_hrdinx-updateflag = c_u.

      IF lst_contract_hdrin-sales_org IS NOT INITIAL.
        lst_contract_hrdinx-sales_org = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-sales_org IS NOT INITIAL
        lst_contract_hrdinx-sales_org = abap_false.
      ENDIF. " IF lst_contract_hdrin-sales_org IS NOT INITIAL

      IF lst_contract_hdrin-distr_chan IS NOT INITIAL.
        lst_contract_hrdinx-distr_chan = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-distr_chan IS NOT INITIAL
        lst_contract_hrdinx-distr_chan = abap_false.
      ENDIF. " IF lst_contract_hdrin-distr_chan IS NOT INITIAL

      IF lst_contract_hdrin-division  IS NOT INITIAL.
        lst_contract_hrdinx-division = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-division IS NOT INITIAL
        lst_contract_hrdinx-division = abap_false.
      ENDIF. " IF lst_contract_hdrin-division IS NOT INITIAL

* SOC by NPOLINA DM1913 E209 ED2K915483
      IF lst_contract_hdrin-ord_reason IS NOT INITIAL.
        lst_contract_hrdinx-ord_reason = abap_true.
      ENDIF.
* EOC by NPOLINA DM1913 E209 ED2K915483
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      IF lst_contract_hdrin-sales_off IS NOT INITIAL.
        lst_contract_hrdinx-sales_off = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-sales_off IS NOT INITIAL
        lst_contract_hrdinx-sales_off = abap_false.
      ENDIF. " IF lst_contract_hdrin-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

      IF lst_contract_hdrin-purch_no_c IS NOT INITIAL.
        lst_contract_hrdinx-purch_no_c = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-purch_no_c IS NOT INITIAL
        lst_contract_hrdinx-purch_no_c = abap_true.
      ENDIF. " IF lst_contract_hdrin-purch_no_c IS NOT INITIAL

      lst_contract_hrdinx-dlv_block = abap_true.

      lst_contract_hrdinx-bill_block = abap_true.

      IF lst_contract_hdrin-ref_doc_l IS NOT INITIAL.
        lst_contract_hrdinx-ref_doc_l = abap_true.
      ENDIF. " IF lst_contract_hdrin-ref_doc_l IS NOT INITIAL
      IF lst_contract_hdrin-pymt_meth IS NOT INITIAL.
        lst_contract_hrdinx-pymt_meth = abap_true.
      ENDIF. " IF lst_contract_hdrin-pymt_meth IS NOT INITIAL
      IF lst_contract_hdrin-po_method IS NOT INITIAL.
        lst_contract_hrdinx-po_method = abap_true.
      ENDIF. " IF lst_contract_hdrin-po_method IS NOT INITIAL
      IF lst_contract_hdrin-cstcndgrp4 IS NOT INITIAL.
        lst_contract_hrdinx-cstcndgrp4 = abap_true.
      ENDIF. " IF lst_contract_hdrin-cstcndgrp4 IS NOT INITIAL
      IF lst_contract_hdrin-cstcndgrp5 IS NOT INITIAL.
        lst_contract_hrdinx-cstcndgrp5 = abap_true.
      ENDIF. " IF lst_contract_hdrin-cstcndgrp5 IS NOT INITIAL

      IF lst_contract_hdrin-ct_valid_t  IS NOT INITIAL.
        lst_contract_hrdinx-ct_valid_t = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL
        lst_contract_hrdinx-ct_valid_t = abap_false.
      ENDIF. " IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL

      IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL.
        lst_contract_hrdinx-ct_valid_f = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL
        lst_contract_hrdinx-ct_valid_f = abap_false.
      ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
      IF lst_contract_hdrin-bill_date IS NOT INITIAL.
        lst_contract_hrdinx-bill_date = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-bill_date IS NOT INITIAL
        lst_contract_hrdinx-bill_date = abap_false.
      ENDIF. " IF lst_contract_hdrin-bill_date IS NOT INITIAL
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*** BOC by SAYANDAS on 10-Nov-2017 for ERP-4890 " check added
      IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL AND lst_contract_hdrin-ct_valid_t IS NOT INITIAL.

        lst_contract_data_inx-itm_number = abap_true.
        lst_contract_data_inx-con_st_dat = abap_true.
        lst_contract_data_inx-con_st_rul = abap_true.
        lst_contract_data_inx-con_en_dat = abap_true.
        APPEND lst_contract_data_inx TO li_contract_data_inx.

      ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL AND lst_contract_hdrin-ct_valid_t IS NOT INITIAL
*** EOC by SAYANDAS on 10-Nov-2017 for ERP-4890

*====================================================================*
*      BAPI TEXT
*====================================================================*
      IF lst_output_dummy-stxh IS NOT INITIAL.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = lst_output_dummy-stxh.

        APPEND lst_text TO li_text.
        CLEAR lst_text.
      ENDIF. " IF lst_output_dummy-stxh IS NOT INITIAL

*-----------Item Data preparation for -------------------------------*
    ELSEIF lst_output_dummy-srid IS NOT INITIAL. " item information
*====================================================================*
* First populate item table
*====================================================================*
      CLEAR lst_contract_itm.
*** BOC CFSLIT
      LOOP AT li_vbeln_quot INTO DATA(lst_vbeln_quot2).
        IF lst_vbeln_quot2-ihrez = lst_output_dummy-srid.
          lst_vbeln_quot_temp = lst_vbeln_quot2.
          APPEND lst_vbeln_quot_temp TO li_vbeln_quot_temp2.
          CLEAR lst_vbeln_quot_temp.
        ENDIF. " IF lst_vbeln_quot2-ihrez = lst_output_dummy-srid
      ENDLOOP. " LOOP AT li_vbeln_quot INTO DATA(lst_vbeln_quot2)
*** EOC CFSLIT
*      READ TABLE li_vbeln_quot INTO DATA(lst_qoute) WITH KEY ihrez = lst_output_dummy-srid."commented by SAYANDAS
      READ TABLE li_vbeln_quot_temp2 INTO DATA(lst_qoute) WITH KEY ihrez = lst_output_dummy-srid.
**** BOC CFSLIT
      DATA(lv_tabix_quote) = sy-tabix.
*      DATA (li_vbeln_quot_temp) = li_vbeln_quot.
      li_vbeln_quot_temp[] = li_vbeln_quot_temp2[].

      SORT li_vbeln_quot_temp BY ihrez.
      DELETE ADJACENT DUPLICATES FROM li_vbeln_quot_temp COMPARING ihrez.
      DESCRIBE TABLE li_vbeln_quot_temp LINES DATA(lv_line_quot).
      IF lv_line_quot EQ '1'. " BOM ITEM
        CLEAR lst_qoute-ihrez.
        MODIFY li_vbeln_quot_temp2 FROM lst_qoute INDEX lv_tabix_quote TRANSPORTING ihrez.
        DELETE li_vbeln_quot_temp2 WHERE ihrez IS INITIAL.
      ENDIF. " IF lv_line_quot EQ '1'
**** EOC CFSLIT
      IF sy-subrc EQ 0.
        lst_output_dummy-posnr = lst_qoute-posnr.
        READ TABLE li_vbap INTO DATA(lst_vbap) WITH KEY qvbeln = lst_qoute-vbeln
                                                        posnr  = lst_output_dummy-posnr.
*                                                        posnr  = lst_qoute-posnr.
        IF sy-subrc EQ 0.
          DATA(lv_tabix_vbap) = sy-tabix.
          lst_contract_itm-material    = lst_vbap-matnr.
          CLEAR: lst_vbap-posnr.
          MODIFY li_vbap FROM lst_vbap INDEX lv_tabix_vbap
                 TRANSPORTING posnr.
        ENDIF. " IF sy-subrc EQ 0
        lst_output_dummy-vbeln       = lst_qoute-vbeln.
      ENDIF. " IF sy-subrc EQ 0
      lst_contract_itm-itm_number  = lst_output_dummy-posnr.
      lst_contract_itm-ref_1_s     = lst_output_dummy-ihrez.
      lst_contract_itm-reason_rej  = lst_output_dummy-abgru.
*      lst_contract_itm-cstcndgrp3  = lst_output_dummy-kdkg3.
      lst_contract_itm-cstcndgrp4  = lst_output_dummy-kdkg4.
      lst_contract_itm-cstcndgrp5  = lst_output_dummy-kdkg5.

* SOC by NPOLINA ERPM-16504 ED2K918499
      IF  lst_output_dummy-bstnk IS INITIAL  AND lv_refdoc IS NOT INITIAL.
        READ TABLE li_vbkdpo2 INTO DATA(ls_vbkdpoi2) WITH KEY vbeln = lv_refdoc
                                                         posnr = lst_output_dummy-posnr BINARY SEARCH.
        IF sy-subrc EQ 0.
          lst_contract_itm-purch_no_c = ls_vbkdpoi2-bstkd.
        ENDIF.
      ENDIF.
* EOC by NPOLINA ERPM-16504 ED2K918499
      APPEND lst_contract_itm TO li_contract_itm.

*====================================================================*
*      BAPI TEXT
*====================================================================*
      IF lst_output_dummy-stxh IS NOT INITIAL.
        lst_text-itm_number = lst_output_dummy-posnr.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = lst_output_dummy-stxh.

        APPEND lst_text TO li_text.
        CLEAR lst_text.
      ENDIF. " IF lst_output_dummy-stxh IS NOT INITIAL

      CLEAR lst_contract_itmx.
      lst_contract_itmx-itm_number = lst_output_dummy-posnr.
      lst_contract_itmx-updateflag = abap_true.

*      IF lst_contract_itm-itm_number IS NOT INITIAL.
*        lst_contract_itmx-itm_number = abap_true.
*      ELSE. " ELSE -> IF lst_contract_itm-itm_number IS NOT INITIAL
*        lst_contract_itmx-itm_number = abap_false.
*      ENDIF. " IF lst_contract_itm-itm_number IS NOT INITIAL

* SOC by NPOLINA ERPM-16504 ED2K918499
      IF lst_contract_itm-purch_no_c IS NOT INITIAL.
        lst_contract_itmx-purch_no_c = abap_true.
      ENDIF.
* EOC by NPOLINA ERPM-16504 ED2K918499
      IF lst_contract_itm-material IS NOT INITIAL.
        lst_contract_itmx-material = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-material IS NOT INITIAL
        lst_contract_itmx-material = abap_false.
      ENDIF. " IF lst_contract_itm-material IS NOT INITIAL

      IF lst_contract_itm-target_qty IS NOT INITIAL.
        lst_contract_itmx-target_qty = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-target_qty IS NOT INITIAL
        lst_contract_itmx-target_qty = abap_false.
      ENDIF. " IF lst_contract_itm-target_qty IS NOT INITIAL

      IF lst_contract_itm-item_categ IS NOT INITIAL.
        lst_contract_itmx-item_categ = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-item_categ IS NOT INITIAL
        lst_contract_itmx-item_categ = abap_false.
      ENDIF. " IF lst_contract_itm-item_categ IS NOT INITIAL

      IF lst_contract_itm-hg_lv_item IS NOT INITIAL.
        lst_contract_itmx-hg_lv_item = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-hg_lv_item IS NOT INITIAL
        lst_contract_itmx-hg_lv_item = abap_false.
      ENDIF. " IF lst_contract_itm-hg_lv_item IS NOT INITIAL

      lst_contract_itmx-reason_rej = abap_true.
      IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL.
        lst_contract_itmx-cstcndgrp3 = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL
        lst_contract_itmx-cstcndgrp3 = abap_false.
      ENDIF. " IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_contract_itm-ref_1_s IS NOT INITIAL.
        lst_contract_itmx-ref_1_s = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-ref_1_s IS NOT INITIAL
        lst_contract_itmx-ref_1_s = abap_false.
      ENDIF. " IF lst_contract_itm-ref_1_s IS NOT INITIAL
      IF lst_contract_itm-cstcndgrp4 IS NOT INITIAL.
        lst_contract_itmx-cstcndgrp4 = abap_true.
      ENDIF. " IF lst_contract_itm-cstcndgrp4 IS NOT INITIAL
      IF lst_contract_itm-cstcndgrp5 IS NOT INITIAL.
        lst_contract_itmx-cstcndgrp5 = abap_true.
      ENDIF. " IF lst_contract_itm-cstcndgrp5 IS NOT INITIAL
      APPEND lst_contract_itmx TO li_contract_items_inx.
      CLEAR  lst_contract_itmx. "UPDATEFLAG.
*====================================================================*
* Populate the conditions table
*====================================================================*
      IF lst_output_dummy-kschl IS NOT INITIAL AND
         lst_output_dummy-kbetr IS NOT INITIAL.
        lst_contract_cond-itm_number = lst_output_dummy-posnr.
        lst_contract_cond-cond_type  = lst_output_dummy-kschl.
        lst_contract_cond-cond_value = lst_output_dummy-kbetr.
        lst_contract_cond-cond_value = lst_contract_cond-cond_value / 10.

        APPEND lst_contract_cond TO li_contract_cond.
        CLEAR lst_contract_cond.
      ENDIF. " IF lst_output_dummy-kschl IS NOT INITIAL AND

*====================================================================*
*     Populate Item Date
*====================================================================*
      IF lst_output_dummy-guebg IS NOT INITIAL.

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-guebg
          IMPORTING
            date_internal            = lst_contract_data-con_st_dat
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_data-con_st_dat.
        ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL

          CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
            EXPORTING
              date_external            = lst_output_dummy-gueen
            IMPORTING
              date_internal            = lst_contract_data-con_en_dat
            EXCEPTIONS
              date_external_is_invalid = 1.
          IF sy-subrc IS NOT INITIAL.
            CLEAR lst_contract_data-con_en_dat.
          ENDIF. " IF sy-subrc IS NOT INITIAL
        ENDIF. " IF sy-subrc IS NOT INITIAL
        lst_contract_data-itm_number = lst_output_dummy-posnr.
        APPEND lst_contract_data TO li_contract_data.

        lst_contract_data_inx-itm_number = lst_output_dummy-posnr.
        lst_contract_data_inx-con_st_dat = abap_true.
        lst_contract_data_inx-con_st_rul = abap_true.
        lst_contract_data_inx-con_en_dat = abap_true.
        APPEND lst_contract_data_inx TO li_contract_data_inx.

      ENDIF. " IF lst_output_dummy-guebg IS NOT INITIAL
    ENDIF. " IF lst_output_dummy-auart EQ c_rew
*--------------------------------------------------------------------*
    IF lv_index EQ lines( li_create_contract ).
      DATA(lv_create_contract) = abap_true.
    ELSE. " ELSE -> IF lv_index EQ lines( li_create_contract )
      IF li_create_contract[ ( lv_index + 1 ) ]-auart EQ c_rew.
        lv_create_contract = abap_true.
      ENDIF. " IF li_create_contract[ ( lv_index + 1 ) ]-auart EQ c_rew
    ENDIF. " IF lv_index EQ lines( li_create_contract )

    IF lv_create_contract EQ abap_true.
      LOOP AT li_vbap INTO lst_vbap WHERE qvbeln EQ lst_output_dummy-vbeln
                                      AND posnr  IS NOT INITIAL
                                      AND uepos  IS INITIAL.
        CLEAR: lst_contract_itm.
        lst_contract_itm-itm_number  = lst_vbap-posnr.
        lst_contract_itm-material    = lst_vbap-matnr.
        APPEND lst_contract_itm TO li_contract_itm.

        CLEAR: lst_contract_itmx.
        lst_contract_itmx-itm_number = lst_vbap-posnr.
        lst_contract_itmx-updateflag = abap_true.
        APPEND lst_contract_itmx TO li_contract_items_inx.

        CLEAR: lst_text.
        lst_text-itm_number = lst_vbap-posnr.
        lst_text-text_id    = v_tdid.
        lst_text-langu      = sy-langu.
        lst_text-format_col = c_format.
        lst_text-text_line  = 'Sub Ref ID not considered'(001).
        APPEND lst_text TO li_text.

        CLEAR: lst_text,
               lst_contract_itm,
               lst_contract_itmx.
      ENDLOOP. " LOOP AT li_vbap INTO lst_vbap WHERE qvbeln EQ lst_output_dummy-vbeln
      IF sy-subrc EQ 0.
        IF lst_contract_hdrin-bill_block IS INITIAL.
          lst_contract_hdrin-bill_block  = lv_faksk.
          lst_contract_hrdinx-bill_block = abap_true.
        ENDIF. " IF lst_contract_hdrin-bill_block IS INITIAL
      ENDIF. " IF sy-subrc EQ 0

      CLEAR lv_create_contract.
      CALL FUNCTION 'BAPI_SALESDOCUMENT_COPY'
        EXPORTING
          salesdocument    = lst_output_dummy-vbeln
          documenttype     = lc_zrew
*         TESTRUN          = ' '
        IMPORTING
          salesdocument_ex = lv_rewdoc
        TABLES
          return           = li_return.

*      IF li_return IS NOT INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      IF li_return IS NOT INITIAL.
        IF p_devid = c_e101.
          CLEAR:v_err.
          i_return[] = li_return[].
          PERFORM f_update_log_staging_e101 USING lst_output_dummy-log_handle
                                                  lv_salesdocin lst_output_dummy-zlogno.
        ENDIF. "IF p_devid = c_e101.
      ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
      READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
      IF sy-subrc IS INITIAL.
        st_err_msg-msgid = lst_return-id.
        st_err_msg-msgty = lst_return-type.
        st_err_msg-msgno = lst_return-number.
        st_err_msg-msgv1 = lst_return-message_v1.
        st_err_msg-msgv2 = lst_return-message_v2.
        st_err_msg-msgv3 = lst_return-message_v3.
        st_err_msg-msgv4 = lst_return-message_v4.
        APPEND st_err_msg TO i_err_msg.

        CLEAR: lst_return,
               st_err_msg.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      ELSE. " ELSE -> IF sy-subrc IS INITIAL
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
        IF lv_rewdoc IS NOT INITIAL.
          st_err_msg-wbeln = lv_rewdoc.
          st_err_msg-msgid = 'ZQTC_R2'.
          st_err_msg-msgty = 'S'.
          st_err_msg-msgno = '232'.
          APPEND st_err_msg TO i_err_msg.
          CLEAR: lst_return,
                 st_err_msg.
*          ENDIF. " IF sy-subrc IS INITIAL
*          PERFORM test.
          lst_text-doc_number = lv_rewdoc.
          MODIFY li_text FROM lst_text TRANSPORTING doc_number
           WHERE doc_number IS INITIAL.
          CLEAR: lst_text.
          WRITE lv_rewdoc TO lv_salesdocin.
*--------------------------------------------------------------------*
*            LOOP AT li_contract_itm INTO data(lst_contract_itm)
*--------------------------------------------------------------------*
          CALL FUNCTION 'BAPI_CUSTOMERCONTRACT_CHANGE'
            EXPORTING
              salesdocument       = lv_salesdocin
              contract_header_in  = lst_contract_hdrin
              contract_header_inx = lst_contract_hrdinx
              behave_when_error   = 'P'
            TABLES
              return              = li_return
              contract_item_in    = li_contract_itm
              contract_item_inx   = li_contract_items_inx
              partnerchanges      = li_partner
              conditions_in       = li_contract_cond
              conditions_inx      = li_contract_condx
              contract_text       = li_text
              contract_data_in    = li_contract_data
              contract_data_inx   = li_contract_data_inx
              extensionin         = li_extensionin.

          IF NOT li_return IS INITIAL.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            IF p_devid = c_e101.
              CLEAR:v_err.
              i_return[] = li_return[].
              PERFORM f_update_log_staging_e101 USING lst_output_dummy-log_handle
                                                      lv_salesdocin lst_output_dummy-zlogno.
            ENDIF. "IF p_devid = c_e101.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
            IF sy-subrc = 0.
              st_err_msg-wbeln = lv_salesdocin.
              st_err_msg-msgid = lst_return-id.
              st_err_msg-msgty = lst_return-type.
              st_err_msg-msgno = lst_return-number.
              st_err_msg-msgv1 = lst_return-message_v1.
              st_err_msg-msgv2 = lst_return-message_v2.
              st_err_msg-msgv3 = lst_return-message_v3.
              st_err_msg-msgv4 = lst_return-message_v4.
              APPEND st_err_msg TO i_err_msg.
              CLEAR: lst_return, st_err_msg.

              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            ELSE. " ELSE -> IF sy-subrc = 0
              READ TABLE li_return INTO lst_return WITH KEY type = 'A'. " Return into lst_ of type
              IF sy-subrc IS INITIAL.
                st_err_msg-wbeln = lv_salesdocin.
                st_err_msg-msgid = lst_return-id.
                st_err_msg-msgty = lst_return-type.
                st_err_msg-msgno = lst_return-number.
                st_err_msg-msgv1 = lst_return-message_v1.
                st_err_msg-msgv2 = lst_return-message_v2.
                st_err_msg-msgv3 = lst_return-message_v3.
                st_err_msg-msgv4 = lst_return-message_v4.
                APPEND st_err_msg TO i_err_msg.
                CLEAR: lst_return, st_err_msg.
                CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
              ELSE. " ELSE -> IF sy-subrc IS INITIAL
                CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                  EXPORTING
                    wait = 'X'.
                READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
                IF sy-subrc IS INITIAL.
                  st_err_msg-wbeln = lv_salesdocin.
                  st_err_msg-msgid = lst_return-id.
                  st_err_msg-msgty = lst_return-type.
                  st_err_msg-msgno = lst_return-number.
                  st_err_msg-msgv1 = lst_return-message_v1.
                  st_err_msg-msgv2 = lst_return-message_v2.
                  st_err_msg-msgv3 = lst_return-message_v3.
                  st_err_msg-msgv4 = lst_return-message_v4.
                  APPEND st_err_msg TO i_err_msg.
                  CLEAR: lst_return, st_err_msg.
                ENDIF. " IF sy-subrc IS INITIAL
              ENDIF. " IF sy-subrc IS INITIAL
            ENDIF. " IF sy-subrc = 0
          ENDIF. " IF NOT li_return IS INITIAL
        ENDIF. " IF lv_rewdoc IS NOT INITIAL



      ENDIF. " IF sy-subrc IS INITIAL
*      ENDIF. " IF li_return IS NOT INITIAL
    ELSE. " ELSE -> IF lv_create_contract EQ abap_true
      MODIFY li_create_contract FROM lst_output_dummy INDEX lv_index TRANSPORTING vbeln.
    ENDIF. " IF lv_create_contract EQ abap_true
    CLEAR : lst_output_dummy.
  ENDLOOP. " LOOP AT li_create_contract INTO DATA(lst_output_x)
*  IF li_vbeln_quot IS NOT INITIAL.
*    MOVE-CORRESPONDING li_vbeln_quot TO li_order.
*    SORT li_order.
*    DELETE ADJACENT DUPLICATES FROM li_order.
*  ENDIF. " IF li_vbeln_quot IS NOT INITIAL
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
  PERFORM f_send_email_move_file.
***EOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*** Change BAPI and SAVE text before displaying LOG
*** For Displaying the LOG
  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  TEST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM test .
  TYPES:
    BEGIN OF lty_cond_class,
      kappl TYPE kappl,  " Application
      kschl TYPE kscha,  " Condition Type
      krech TYPE krech,  " Condition Class
    END OF lty_cond_class,

    BEGIN OF lty_konv,
      knumv	TYPE knumv,	                                                                                                                                                                                                     " Number of the document condition
      kposn	TYPE kposn,  " Condition item number
      stunr	TYPE stunr,  " Step number
      zaehk	TYPE dzaehk, " Condition counter
      kschl	TYPE kscha,	                                                                                                                                                                                                                       " Condition type
      vbeln TYPE vbeln,  " Sales Doc Number
    END OF lty_konv.

**=======================================================
**   Table Type
**=======================================================
*TYPES: tt_output_chg TYPE STANDARD TABLE OF ty_output_x_chg.

*====================================================================*
*       Local Internal Table
*====================================================================*
  DATA: li_return             TYPE STANDARD TABLE OF bapiret2,   " Return messages
        li_contract_itm       TYPE STANDARD TABLE OF bapisditm,  " Item data
        li_contract_items_inx TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
        li_partner            TYPE STANDARD TABLE OF bapiparnrc, " Partner
        li_contract_cond      TYPE STANDARD TABLE OF bapicond,   " Contract conditions
        li_contract_condx     TYPE STANDARD TABLE OF bapicondx,  " Communication Fields for Maintaining Conditions in the Order
        li_contract_data      TYPE STANDARD TABLE OF bapictr     " Communciation Fields: SD Contract Data
        INITIAL SIZE 0,
        li_cond_class         TYPE STANDARD TABLE OF lty_cond_class
        INITIAL SIZE 0,                                          " Contract Data
        li_extensionin        TYPE STANDARD TABLE OF bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_konv               TYPE STANDARD TABLE OF lty_konv
        INITIAL SIZE 0,
        li_contract_data_inx  TYPE STANDARD TABLE OF bapictrx    " Communication fields: SD Contract Data Checkbox
        INITIAL SIZE 0,
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
        li_text               TYPE STANDARD TABLE OF bapisdtext, " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        li_final_change_subs  TYPE tt_output_x_chg,
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
*====================================================================*
*       Local Work-area
*====================================================================*
        lst_bape_vbak         TYPE bape_vbak,  " BAPI Interface for Customer Enhancements to Table VBAK
        lst_bape_vbap         TYPE bape_vbap,  " BAPI Interface for Customer Enhancements to Table VBAP
        lst_bape_vbapx        TYPE bape_vbapx, " BAPI Interface for Customer Enhancements to Table VBAPX
        lst_bape_vbakx        TYPE bape_vbakx, " BAPI Interface for Customer Enhancements to Table VBAKX
        lst_extensionin       TYPE bapiparex,  " Ref. structure for BAPI parameter ExtensionIn/ExtensionOut
        lst_contract_hdrin    TYPE bapisdh1,   " Header data
        lst_contract_hrdinx   TYPE bapisdh1x,  " Header data extended for promo code
        lst_contract_itm      TYPE bapisditm,  " Item data
        lst_contract_itmx     TYPE bapisditmx, " Item data
        lst_contract_cond     TYPE bapicond,   " Contract conditions
        lst_partner           TYPE bapiparnrc, " Partner
        lst_output_dummy      TYPE ty_output_x_chg,
        lst_return            TYPE bapiret2,   " For status of contract creation
        lst_contract_data     TYPE bapictr,    " Contract Data
        lst_contract_data_inx TYPE bapictrx,   " Communication fields: SD Contract Data Checkbox
*** BOC by SAYANDAS for ERP-3104 on 19th July 2017
        lst_text              TYPE bapisdtext, " Communication fields: SD texts
*** EOC by SAYANDAS for ERP-3104 on 19th July 2017
*====================================================================*
*       Local Variable
*====================================================================*
        lv_salesdocin         TYPE bapivbeln-vbeln. "for export fieldop

*====================================================================*
*       Local Constants
*====================================================================*
  CONSTANTS:lc_posnr      TYPE posnr  VALUE '000000',     " Item number of the SD document
            lc_bape_vbap  TYPE char9  VALUE 'BAPE_VBAP',  " Bape_vbak of type CHAR9
            lc_bape_vbapx TYPE char10 VALUE 'BAPE_VBAPX', " Bape_vbak of type CHAR9
            lc_bape_vbak  TYPE char9  VALUE 'BAPE_VBAK',  " Bape_vbak of type CHAR9
            lc_bape_vbakx TYPE char10 VALUE 'BAPE_VBAKX'. " Bape_vbak of type CHAR9

* First arrange the data in bapi compatible form
  SORT i_output_x BY vbeln
                     posnr.

  LOOP AT li_final_change_subs INTO DATA(lst_output_x).
    CLEAR lst_output_dummy.
    lst_output_dummy = lst_output_x.
    AT NEW vbeln.
      CLEAR: li_return,
             li_contract_itm,
             li_contract_items_inx,
             li_partner,
             li_contract_cond,
             li_text,
             li_return,
             lv_salesdocin,
             li_contract_data,
             li_contract_data_inx,
             lst_contract_hdrin,
             lst_contract_hrdinx,
             lst_contract_data,
             lst_contract_data_inx,
             li_extensionin.
    ENDAT.
*  There will always be one Sold to party(Parve = 'AG') in an order
*  Populate the Header records
    IF ( lst_output_dummy-parvw  EQ c_ag
    AND  lst_output_dummy-posnr  EQ space ).

      lv_salesdocin  = lst_output_dummy-vbeln.
*====================================================================*
* Populate Header structure
*====================================================================*
      lst_contract_hdrin-sales_org  = lst_output_dummy-vkorg.
      lst_contract_hdrin-distr_chan = lst_output_dummy-vtweg.
      lst_contract_hdrin-division   = lst_output_dummy-spart.
      lst_contract_hdrin-sales_off  = lst_output_dummy-vkbur.
      lst_contract_hdrin-purch_no_c = lst_output_dummy-bstnk.
      lst_contract_hdrin-dlv_block  = lst_output_dummy-lifsk.
      lst_contract_hdrin-bill_block = lst_output_dummy-faksk.
      lst_contract_hdrin-cstcndgrp3 = lst_output_dummy-kdkg3.
      lst_contract_hdrin-ref_doc_l  = lst_output_dummy-xblnr.
      lst_contract_hdrin-pymt_meth  = lst_output_dummy-zlsch.
      lst_contract_hdrin-cstcndgrp4 = lst_output_dummy-kdkg4.
      lst_contract_hdrin-cstcndgrp5 = lst_output_dummy-kdkg5.
      lst_contract_hdrin-ref_1_s     = lst_output_dummy-ihrez.
*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_text-itm_number = lc_posnr.
      lst_text-text_id    = v_tdid.
      lst_text-langu      = sy-langu.
      lst_text-format_col = c_format.
      lst_text-text_line  = lst_output_dummy-stxh.

      APPEND lst_text TO li_text.
      CLEAR  lst_text.

      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-guebg
        IMPORTING
          date_internal            = lst_contract_hdrin-ct_valid_f
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_contract_hdrin-ct_valid_f.
      ENDIF. " IF sy-subrc IS NOT INITIAL

      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-gueen
        IMPORTING
          date_internal            = lst_contract_hdrin-ct_valid_t
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_contract_hdrin-ct_valid_t.
      ENDIF. " IF sy-subrc IS NOT INITIAL

      lst_contract_data-con_st_dat = lst_contract_hdrin-ct_valid_f.
      lst_contract_data-con_en_dat = lst_contract_hdrin-ct_valid_t.
      APPEND lst_contract_data TO li_contract_data.

      CLEAR lst_contract_hrdinx.
      lst_contract_hrdinx-updateflag = c_u.

      IF lst_contract_hdrin-sales_org IS NOT INITIAL.
        lst_contract_hrdinx-sales_org = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-sales_org IS NOT INITIAL
        lst_contract_hrdinx-sales_org = abap_false.
      ENDIF. " IF lst_contract_hdrin-sales_org IS NOT INITIAL

      IF lst_contract_hdrin-distr_chan IS NOT INITIAL.
        lst_contract_hrdinx-distr_chan = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-distr_chan IS NOT INITIAL
        lst_contract_hrdinx-distr_chan = abap_false.
      ENDIF. " IF lst_contract_hdrin-distr_chan IS NOT INITIAL

      IF lst_contract_hdrin-division  IS NOT INITIAL.
        lst_contract_hrdinx-division = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-division IS NOT INITIAL
        lst_contract_hrdinx-division = abap_false.
      ENDIF. " IF lst_contract_hdrin-division IS NOT INITIAL

*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      IF lst_contract_hdrin-sales_off IS NOT INITIAL.
        lst_contract_hrdinx-sales_off = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-sales_off IS NOT INITIAL
        lst_contract_hrdinx-sales_off = abap_false.
      ENDIF. " IF lst_contract_hdrin-sales_off IS NOT INITIAL
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365

      IF lst_contract_hdrin-purch_no_c IS NOT INITIAL.
        lst_contract_hrdinx-purch_no_c = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-purch_no_c IS NOT INITIAL
        lst_contract_hrdinx-purch_no_c = abap_true.
      ENDIF. " IF lst_contract_hdrin-purch_no_c IS NOT INITIAL

*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL.
        lst_contract_hrdinx-cstcndgrp3 = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL
        lst_contract_hrdinx-cstcndgrp3 = abap_false.
      ENDIF. " IF lst_contract_hdrin-cstcndgrp3 IS NOT INITIAL

      lst_contract_hrdinx-dlv_block = abap_true.
      lst_contract_hrdinx-bill_block = abap_true.

      IF lst_contract_hdrin-ct_valid_t  IS NOT INITIAL.
        lst_contract_hrdinx-ct_valid_t = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL
        lst_contract_hrdinx-ct_valid_t = abap_false.
      ENDIF. " IF lst_contract_hdrin-ct_valid_t IS NOT INITIAL

      IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL.
        lst_contract_hrdinx-ct_valid_f = abap_true.
      ELSE. " ELSE -> IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL
        lst_contract_hrdinx-ct_valid_f = abap_false.
      ENDIF. " IF lst_contract_hdrin-ct_valid_f IS NOT INITIAL

      lst_contract_data_inx-itm_number = abap_true.
      lst_contract_data_inx-con_st_dat = abap_true.
      lst_contract_data_inx-con_st_rul = abap_true.
      lst_contract_data_inx-con_en_dat = abap_true.
      APPEND lst_contract_data_inx TO li_contract_data_inx.

    ELSEIF lst_output_dummy-parvw EQ c_we.

*   If not the Sold to lines, they are the ship to Lines ( PARVW = 'WE')  in an order
*   Which can be multiple and is considered as the ITEM lines of the Order
*====================================================================*
* First populate item table
*====================================================================*
      CLEAR lst_contract_itm.
      lst_contract_itm-itm_number  = lst_output_dummy-posnr.
      lst_contract_itm-material    = lst_output_dummy-matnr.
*      lst_contract_itm-hg_lv_item  = lc_posnr.
      lst_contract_itm-reason_rej  = lst_output_dummy-abgru.
      lst_contract_itm-ref_1_s     = lst_output_dummy-ihrez.
*      lst_contract_itm-cstcndgrp3  = lst_output_dummy-kdkg3.

      APPEND lst_contract_itm TO li_contract_itm.

*====================================================================*
*      BAPI TEXT
*====================================================================*
      lst_text-itm_number = lst_output_dummy-posnr.
      lst_text-text_id    = v_tdid.
      lst_text-langu      = sy-langu.
      lst_text-format_col = c_format.
      lst_text-text_line  = lst_output_dummy-stxh.

      APPEND lst_text TO li_text.
      CLEAR lst_text.

      CLEAR lst_contract_itmx.
      lst_contract_itmx-updateflag = abap_true.

      IF lst_contract_itm-itm_number IS NOT INITIAL.
        lst_contract_itmx-itm_number = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-itm_number IS NOT INITIAL
        lst_contract_itmx-itm_number = abap_false.
      ENDIF. " IF lst_contract_itm-itm_number IS NOT INITIAL

      IF lst_contract_itm-material IS NOT INITIAL.
        lst_contract_itmx-material = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-material IS NOT INITIAL
        lst_contract_itmx-material = abap_false.
      ENDIF. " IF lst_contract_itm-material IS NOT INITIAL

      IF lst_contract_itm-target_qty IS NOT INITIAL.
        lst_contract_itmx-target_qty = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-target_qty IS NOT INITIAL
        lst_contract_itmx-target_qty = abap_false.
      ENDIF. " IF lst_contract_itm-target_qty IS NOT INITIAL

      IF lst_contract_itm-item_categ IS NOT INITIAL.
        lst_contract_itmx-item_categ = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-item_categ IS NOT INITIAL
        lst_contract_itmx-item_categ = abap_false.
      ENDIF. " IF lst_contract_itm-item_categ IS NOT INITIAL

      IF lst_contract_itm-hg_lv_item IS NOT INITIAL.
        lst_contract_itmx-hg_lv_item = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-hg_lv_item IS NOT INITIAL
        lst_contract_itmx-hg_lv_item = abap_false.
      ENDIF. " IF lst_contract_itm-hg_lv_item IS NOT INITIAL

      lst_contract_itmx-reason_rej = abap_true.
      IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL.
        lst_contract_itmx-cstcndgrp3 = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL
        lst_contract_itmx-cstcndgrp3 = abap_false.
      ENDIF. " IF lst_contract_itm-cstcndgrp3 IS NOT INITIAL
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      IF lst_contract_itm-ref_1_s IS NOT INITIAL.
        lst_contract_itmx-ref_1_s = abap_true.
      ELSE. " ELSE -> IF lst_contract_itm-ref_1_s IS NOT INITIAL
        lst_contract_itmx-ref_1_s = abap_false.
      ENDIF. " IF lst_contract_itm-ref_1_s IS NOT INITIAL

      APPEND lst_contract_itmx TO li_contract_items_inx.
      CLEAR  lst_contract_itmx. "UPDATEFLAG.
*====================================================================*
* Populate the conditions table
*====================================================================*
      lst_contract_cond-itm_number = lst_output_dummy-posnr.
      lst_contract_cond-cond_type  = lst_output_dummy-kschl.

*      READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
*      WITH KEY kschl = lst_output_dummy-kschl
*      BINARY SEARCH.
*      IF sy-subrc IS INITIAL.
*        IF <lfs_cond>-krech NE 'A'.
      lst_contract_cond-cond_value = lst_output_dummy-kbetr / 10.
*        ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
*          lst_contract_cond-cond_value = lst_output_dummy-kbetr.
*        ENDIF. " IF <lfs_cond>-krech NE 'A'
*      ENDIF. " IF sy-subrc IS INITIAL

*      READ TABLE li_konv ASSIGNING FIELD-SYMBOL(<lfs_konv>)
*      WITH KEY vbeln = lst_output_dummy-vbeln
*               kposn = lst_output_dummy-posnr
*               kschl = lst_output_dummy-kschl
*               BINARY SEARCH.
*      IF sy-subrc IS INITIAL.
*        lst_contract_cond-cond_st_no = <lfs_konv>-stunr.
*        lst_contract_cond-cond_count = <lfs_konv>-zaehk.
*
**       Change existing condition in line item level
*        APPEND INITIAL LINE TO li_contract_condx ASSIGNING
*        FIELD-SYMBOL(<lfs_contract_condx>).
*        IF <lfs_contract_condx> IS ASSIGNED.
*          <lfs_contract_condx>-itm_number = lst_output_dummy-posnr.
*          <lfs_contract_condx>-cond_st_no = <lfs_konv>-stunr.
*          <lfs_contract_condx>-cond_count = <lfs_konv>-zaehk.
*          <lfs_contract_condx>-cond_type  = lst_output_dummy-kschl.
*          <lfs_contract_condx>-cond_value = abap_true.
*          <lfs_contract_condx>-updateflag = 'U'.
*        ENDIF. " IF <lfs_contract_condx> IS ASSIGNED
*      ENDIF. " IF sy-subrc IS INITIAL

      APPEND lst_contract_cond TO li_contract_cond.
      CLEAR lst_contract_cond.

*====================================================================*
*     Populate Item Date
*====================================================================*
      CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
        EXPORTING
          date_external            = lst_output_dummy-guebg
        IMPORTING
          date_internal            = lst_contract_data-con_st_dat
        EXCEPTIONS
          date_external_is_invalid = 1.
      IF sy-subrc IS NOT INITIAL.
        CLEAR lst_contract_data-con_st_dat.
      ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL

        CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
          EXPORTING
            date_external            = lst_output_dummy-gueen
          IMPORTING
            date_internal            = lst_contract_data-con_en_dat
          EXCEPTIONS
            date_external_is_invalid = 1.
        IF sy-subrc IS NOT INITIAL.
          CLEAR lst_contract_data-con_en_dat.
        ENDIF. " IF sy-subrc IS NOT INITIAL

        lst_contract_data-itm_number = lst_output_dummy-posnr.
        APPEND lst_contract_data TO li_contract_data.

        lst_contract_data_inx-itm_number = abap_true.
        lst_contract_data_inx-con_st_dat = abap_true.
        lst_contract_data_inx-con_st_rul = abap_true.
        lst_contract_data_inx-con_en_dat = abap_true.
        APPEND lst_contract_data_inx TO li_contract_data_inx.
      ENDIF. " IF sy-subrc IS NOT INITIAL
    ENDIF. " IF ( lst_output_dummy-parvw EQ c_ag

    AT END OF vbeln.
      CALL FUNCTION 'BAPI_CUSTOMERCONTRACT_CHANGE'
        EXPORTING
          salesdocument       = lv_salesdocin
          contract_header_in  = lst_contract_hdrin
          contract_header_inx = lst_contract_hrdinx
          behave_when_error   = 'P'
        TABLES
          return              = li_return
          contract_item_in    = li_contract_itm
          contract_item_inx   = li_contract_items_inx
          partnerchanges      = li_partner
          conditions_in       = li_contract_cond
          conditions_inx      = li_contract_condx
          contract_text       = li_text
          contract_data_in    = li_contract_data
          contract_data_inx   = li_contract_data_inx
          extensionin         = li_extensionin.

      IF NOT li_return IS INITIAL.
        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc = 0.
          st_err_msg-wbeln = lv_salesdocin.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.
          CLEAR: lst_return, st_err_msg.

          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE. " ELSE -> IF sy-subrc = 0
          READ TABLE li_return INTO lst_return WITH KEY type = 'A'. " Return into lst_ of type
          IF sy-subrc IS INITIAL.
            st_err_msg-wbeln = lv_salesdocin.
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return, st_err_msg.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          ELSE. " ELSE -> IF sy-subrc IS INITIAL
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.
            READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
            IF sy-subrc IS INITIAL.
              st_err_msg-wbeln = lv_salesdocin.
              st_err_msg-msgid = lst_return-id.
              st_err_msg-msgty = lst_return-type.
              st_err_msg-msgno = lst_return-number.
              st_err_msg-msgv1 = lst_return-message_v1.
              st_err_msg-msgv2 = lst_return-message_v2.
              st_err_msg-msgv3 = lst_return-message_v3.
              st_err_msg-msgv4 = lst_return-message_v4.
              APPEND st_err_msg TO i_err_msg.
              CLEAR: lst_return, st_err_msg.
            ENDIF. " IF sy-subrc IS INITIAL
          ENDIF. " IF sy-subrc IS INITIAL
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF NOT li_return IS INITIAL

    ENDAT.
  ENDLOOP. " LOOP AT li_final_change_subs INTO DATA(lst_output_x)

  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CHANGE_POS_CMR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LI_CHANGE_CREDIT_MEMO  text
*      <--P_LI_CHANGE_CREDIT_MEMO_CHG  text
*----------------------------------------------------------------------*
FORM f_change_pos_cmr  USING    fp_li_change_credit_memo TYPE tt_crdt_memo_enh
                       CHANGING fp_li_change_credit_memo_chg TYPE tt_crdt_memo_enh_chg.

  DATA: lst_change_credit_memo_chg TYPE ty_crdt_memo_enh_chg,
        lst_change_credit_memo     TYPE ty_crdt_memo_enh.

  LOOP AT fp_li_change_credit_memo INTO lst_change_credit_memo.

    MOVE-CORRESPONDING lst_change_credit_memo TO lst_change_credit_memo_chg.
    APPEND lst_change_credit_memo_chg TO fp_li_change_credit_memo_chg.
    CLEAR lst_change_credit_memo_chg.
  ENDLOOP. " LOOP AT fp_li_change_credit_memo INTO lst_change_credit_memo

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CHANGE_POS_RORD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LI_CHANGE_REG_ORD  text
*      <--P_LI_CHANGE_REG_ORD_CHG  text
*----------------------------------------------------------------------*
FORM f_change_pos_rord  USING    fp_li_change_reg_ord TYPE tt_order_alv
                        CHANGING fp_li_change_reg_ord_chg TYPE tt_order_alv_chg.

  DATA: lst_change_reg_ord_chg TYPE ty_ord_alv_chg,
        lst_change_reg_ord     TYPE ty_ord_alv.

  LOOP AT fp_li_change_reg_ord INTO lst_change_reg_ord.

    MOVE-CORRESPONDING lst_change_reg_ord TO lst_change_reg_ord_chg.
    APPEND lst_change_reg_ord_chg TO fp_li_change_reg_ord_chg.
    CLEAR lst_change_reg_ord_chg.
  ENDLOOP. " LOOP AT fp_li_change_reg_ord INTO lst_change_reg_ord

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CONVERT_CRME_CRT_EXCEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_FILE  text
*      <--P_I_FINAL_CRME_CRT  text
*----------------------------------------------------------------------*
FORM f_convert_crme_crt_excel  USING fp_p_file              TYPE localfile " Local file for upload/download
                            CHANGING fp_i_final_crme_crt    TYPE tt_crdt_memo_crt.

  DATA : li_excel        TYPE STANDARD TABLE OF alsmex_tabline INITIAL SIZE 0, " Rows for Table with Excel Data
         lst_excel_dummy TYPE                   alsmex_tabline,                " Rows for Table with Excel Data
         lst_excel       TYPE                   alsmex_tabline,                " Rows for Table with Excel Data
         lst_cred_mem    TYPE                   ty_crdt_memo_crt.

  DATA: lv_fkimg TYPE char17. " Fkimg of type CHAR17
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  DATA: lv_begin_row TYPE I,
        lv_begin_col TYPE I,
        lv_end_row   TYPE I,
        lv_end_col   TYPE I.
  DATA: lvf_skip_row TYPE char1.

  PERFORM f_get_row_column CHANGING lv_begin_row
                                    lv_begin_col
                                    lv_end_row
                                    lv_end_col.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267


  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = fp_p_file
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      i_begin_col             = 1
*      i_begin_row             = 2
**     i_end_col               = 27
*      i_end_col               = 29   " NPOLINA ERP7763 ED2K913722
*      i_end_row               = 65000
      i_begin_col             = lv_begin_col
      i_begin_row             = lv_begin_row
      i_end_col               = lv_end_col
      i_end_row               = lv_end_row
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    TABLES
      intern                  = li_excel
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc EQ 0.
    IF NOT li_excel[] IS INITIAL.
      LOOP AT li_excel INTO lst_excel.
        lst_excel_dummy = lst_excel.
        IF lst_excel_dummy-value(1) EQ text-sqt.
          lst_excel_dummy-value(1) = space.
          SHIFT lst_excel_dummy-value LEFT DELETING LEADING space.
        ENDIF. " IF lst_excel_dummy-value(1) EQ text-sqt

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        AT NEW row.
          CLEAR lvf_skip_row.
*         If row starts with Order, Identifier, Mandatory or Optional Skip the Row
          IF lst_excel_dummy-value IN ir_row_txt.
            lvf_skip_row = abap_true.
          ENDIF.
*         If using OLD template - Validate and display message
          IF lst_excel_dummy-row = 1 AND lvf_skip_row = abap_false.
            MESSAGE i000 WITH 'Please use the New Template'(164).
            LEAVE LIST-PROCESSING.
          ENDIF.
        ENDAT.
        IF lvf_skip_row  IS NOT INITIAL.
          CONTINUE.
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

        AT NEW col.

          CASE lst_excel_dummy-col.

            WHEN 1.
              IF NOT lst_cred_mem IS INITIAL.
                APPEND lst_cred_mem TO fp_i_final_crme_crt.
                CLEAR  lst_cred_mem.
              ENDIF. " IF NOT lst_cred_mem IS INITIAL

              IF lst_excel_dummy-value(10) IS NOT INITIAL.
                lst_cred_mem-customer = lst_excel_dummy-value(10).
                CLEAR lst_excel_dummy.
                IF lst_cred_mem-customer IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-customer
                    IMPORTING
                      output = lst_cred_mem-customer.
                ENDIF. " IF lst_cred_mem-customer IS NOT INITIAL
              ENDIF. " IF lst_excel_dummy-value(10) IS NOT INITIAL

            WHEN 2.
              lst_cred_mem-parvw  = lst_excel_dummy-value(2).
              IF lst_cred_mem-parvw IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-parvw
                  IMPORTING
                    output = lst_cred_mem-parvw.

                CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-parvw
                  IMPORTING
                    output = lst_cred_mem-parvw.

              ENDIF. " IF lst_cred_mem-parvw IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 3.
              IF lst_excel_dummy-value(10) IS NOT INITIAL.
                lst_cred_mem-partner = lst_excel_dummy-value(10).
                CLEAR lst_excel_dummy.
                IF lst_cred_mem-partner IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-partner
                    IMPORTING
                      output = lst_cred_mem-partner.
                ENDIF. " IF lst_cred_mem-partner IS NOT INITIAL
              ENDIF. " IF lst_excel_dummy-value(10) IS NOT INITIAL

            WHEN 4.

              lst_cred_mem-vkorg = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.

            WHEN 5.
              lst_cred_mem-vtweg = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.

            WHEN 6.
              lst_cred_mem-spart = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.

            WHEN 7.
              lst_cred_mem-auart = lst_excel_dummy-value(4).
              IF lst_cred_mem-auart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_AUART_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-auart
                  IMPORTING
                    output = lst_cred_mem-auart.

              ENDIF. " IF lst_cred_mem-auart IS NOT INITIAL
              CLEAR lst_excel_dummy.
            WHEN 8.
              lst_cred_mem-xblnr = lst_excel_dummy-value(16).
              CLEAR  lst_excel_dummy.

            WHEN 9.
              lst_cred_mem-zlsch =  lst_excel_dummy-value(1).
              CLEAR  lst_excel_dummy.
            WHEN 10.
              lst_cred_mem-augru = lst_excel_dummy-value(3).

              CLEAR lst_excel_dummy.

            WHEN 11.
              lst_cred_mem-vbeln = lst_excel_dummy-value(10).
              IF lst_cred_mem-vbeln IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-vbeln
                  IMPORTING
                    output = lst_cred_mem-vbeln.

              ENDIF. " IF lst_cred_mem-vbeln IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 12.

              IF lst_excel_dummy-value(6) IS NOT INITIAL.
                WRITE lst_excel_dummy-value(6) TO lst_cred_mem-posnr.
                IF lst_cred_mem-posnr IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-posnr
                    IMPORTING
                      output = lst_cred_mem-posnr.
                ENDIF. " IF lst_cred_mem-posnr IS NOT INITIAL

              ENDIF. " IF lst_excel_dummy-value(6) IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 13.
              IF lst_excel_dummy-value(18) IS NOT INITIAL.
                lst_cred_mem-matnr = lst_excel_dummy-value(18).

                IF lst_cred_mem-matnr IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                    EXPORTING
                      input  = lst_cred_mem-matnr
                    IMPORTING
                      output = lst_cred_mem-matnr.
                ENDIF. " IF lst_cred_mem-matnr IS NOT INITIAL
              ENDIF. " IF lst_excel_dummy-value(18) IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 14.                  "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-plant = lst_excel_dummy-value(4).
              CLEAR  lst_excel_dummy.

            WHEN 15. "14                 "  NPOLINA ERP7763 ED2K913722

              CLEAR lv_fkimg.
              WRITE  lst_excel_dummy-value(13) TO lv_fkimg.
              TRY.
                  lst_cred_mem-fkimg  = lv_fkimg.
                CATCH cx_root.
*                 Message: Quantity & is not in the correct format
                  MESSAGE i131(o3) WITH lst_excel_dummy-value. " Quantity & is not in the correct format
                  LEAVE LIST-PROCESSING.
              ENDTRY.
              CLEAR lst_excel_dummy.
            WHEN 16. " 15.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-stxh = lst_excel_dummy-value(50).

            WHEN 17. "16.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-kschl = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.

            WHEN 18. "17.                 "  NPOLINA ERP7763 ED2K913722
              TRY.
                  lst_cred_mem-kbetr = lst_excel_dummy-value(11).
                CATCH cx_root.
*                 Message: Amount & format is incorrect
                  MESSAGE i406(aw) WITH lst_excel_dummy-value. " Amount & format is incorrect
                  LEAVE LIST-PROCESSING.
              ENDTRY.
              CLEAR lst_excel_dummy.
            WHEN 19. "18.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-kschl2 = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.

            WHEN 20. "19.                 "  NPOLINA ERP7763 ED2K913722
              TRY.
                  lst_cred_mem-kbetr2 = lst_excel_dummy-value(11).
                CATCH cx_root.
*                 Message: Amount & format is incorrect
                  MESSAGE i406(aw) WITH lst_excel_dummy-value. " Amount & format is incorrect
                  LEAVE LIST-PROCESSING.
              ENDTRY.
              CLEAR lst_excel_dummy.

            WHEN 21. "20.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-kschl3 = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.

            WHEN 22. "21.                 "  NPOLINA ERP7763 ED2K913722
              TRY.
                  lst_cred_mem-kbetr3 = lst_excel_dummy-value(11).
                CATCH cx_root.
*                 Message: Amount & format is incorrect
                  MESSAGE i406(aw) WITH lst_excel_dummy-value. " Amount & format is incorrect
                  LEAVE LIST-PROCESSING.
              ENDTRY.
              CLEAR lst_excel_dummy.
            WHEN 23. "22.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-ihrez = lst_excel_dummy-value(12).

              CLEAR lst_excel_dummy.
            WHEN 24. "23.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-kdkg3 = lst_excel_dummy-value(2).

              CLEAR lst_excel_dummy.
            WHEN 25. "24.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-vkbur = lst_excel_dummy-value(4).
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_cred_mem-vkbur
                IMPORTING
                  output = lst_cred_mem-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.
            WHEN 26. "25.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-bstnk = lst_excel_dummy-value(20).
              IF lst_cred_mem-bstnk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_cred_mem-bstnk
                  IMPORTING
                    output = lst_cred_mem-bstnk.
              ENDIF. " IF lst_cred_mem-bstnk IS NOT INITIAL
              CLEAR lst_excel_dummy.
            WHEN 27. "26.                 "  NPOLINA ERP7763 ED2K913722
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*              lst_cred_mem-bsark = lst_excel_dummy-value(20).
              lst_cred_mem-bsark = lst_excel_dummy-value(4).
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_cred_mem-bsark
                IMPORTING
                  output = lst_cred_mem-bsark.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.
            WHEN 28. "27.                 "  NPOLINA ERP7763 ED2K913722
              lst_cred_mem-pstyv = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.
* SOC by NPOLINA ERP7763  ED2K914144
            WHEN 29.                 "  For ZSCR orders
              lst_cred_mem-tax = lst_excel_dummy-value(11).
              CLEAR lst_excel_dummy.
* EOC by NPOLINA ERP7763  ED2K914144
          ENDCASE.
        ENDAT.
      ENDLOOP. " LOOP AT li_excel INTO lst_excel

* For last row population
      APPEND lst_cred_mem TO fp_i_final_crme_crt.
      CLEAR  lst_cred_mem.
    ENDIF. " IF NOT li_excel[] IS INITIAL
  ENDIF. " IF sy-subrc EQ 0
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DESELECT_CRDT_LINES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_FP_I_CRE_CRED_MEMO  text
*----------------------------------------------------------------------*
FORM f_deselect_crdt_lines  CHANGING fp_i_output TYPE tt_crdt_memo_crt.

  DATA(li_output) = fp_i_output.

  LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                    WHERE parvw EQ 'AG'.

    DATA(lv_tabix) = sy-tabix.

*    If header not selected, ignore corresponding items
    IF <lfs_output>-sel NE abap_true.

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*       Deselect Items
        CLEAR : <lfs_main_output>-sel.

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)

    ELSE. " ELSE -> IF <lfs_output>-sel NE abap_true

*    If header selected, check corresponding items. If items are not
*    selected, deselect header

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING <lfs_main_output>
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*        Mark that line items exist in file
        DATA(lv_line_exists)  = abap_true.

*        If any of the line item is selected, mark the variable
        IF <lfs_main_output>-sel EQ abap_true.
          DATA(lv_line_selected) = abap_true.
        ENDIF. " IF <lfs_main_output>-sel EQ abap_true

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING <lfs_main_output>

*      If no line selected
      IF  lv_line_exists   EQ abap_true
      AND lv_line_selected NE abap_true.

*         Get back the header index
        lv_tabix = lv_tabix - 1.

        READ TABLE fp_i_output ASSIGNING <lfs_main_output>
        INDEX lv_tabix.

        IF <lfs_main_output> IS ASSIGNED.
*            Deselect Header
          CLEAR : <lfs_main_output>-sel.
        ENDIF. " IF <lfs_main_output> IS ASSIGNED

      ENDIF. " IF lv_line_exists EQ abap_true

      CLEAR : lv_line_selected,
              lv_line_exists.

    ENDIF. " IF <lfs_output>-sel NE abap_true

  ENDLOOP. " LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_APPEND_COND_TYP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LST_CRED_MEMO_DUMMY  text
*      <--P_LI_SALES_COND  text
*      <--P_LI_SALES_CONDX  text
*----------------------------------------------------------------------*
* To populate condition types and condition values
FORM f_append_cond_typ  USING    fp_posnr TYPE posnr " Item number of the SD document
                                 fp_kschl TYPE kschl " Condition Type
                                 fp_kbetr TYPE kbetr " Rate (condition amount or percentage)
                        CHANGING fp_li_cond_class TYPE tt_cond_class
                                 fp_li_sales_cond TYPE tt_bapicond
                                 fp_li_sales_condx TYPE tt_bapicondx.

  DATA  : lst_sales_cond  TYPE bapicond,  " Communication Fields for Maintaining Conditions in the Order
          lst_sales_condx TYPE bapicondx. " Communication Fields for Maintaining Conditions in the Order

  DATA : lv_posnr(6)  TYPE c. " Posnr(6) of type Character
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = fp_posnr
    IMPORTING
      output = lv_posnr.
  IF fp_kschl IS NOT INITIAL.

    lst_sales_cond-itm_number   = lv_posnr.
    lst_sales_condx-itm_number  = lv_posnr.
    lst_sales_cond-cond_type    = fp_kschl.
    IF lst_sales_cond-cond_type IS NOT INITIAL.
      lst_sales_condx-cond_type = abap_true.
    ELSE. " ELSE -> IF lst_sales_cond-cond_type IS NOT INITIAL
      lst_sales_condx-cond_type = abap_false.
    ENDIF. " IF lst_sales_cond-cond_type IS NOT INITIAL

    READ TABLE fp_li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
                             WITH KEY kschl = fp_kschl
                             BINARY SEARCH.
    IF sy-subrc IS INITIAL.
      IF <lfs_cond>-krech NE 'A'.
        lst_sales_cond-cond_value = fp_kbetr / 10.
      ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
        lst_sales_cond-cond_value = fp_kbetr.
      ENDIF. " IF <lfs_cond>-krech NE 'A'
    ENDIF. " IF sy-subrc IS INITIAL

    IF lst_sales_condx-cond_value IS NOT INITIAL.
      lst_sales_condx-cond_value = abap_true.
    ELSE. " ELSE -> IF lst_sales_condx-cond_value IS NOT INITIAL
      lst_sales_condx-cond_value = abap_false.
    ENDIF. " IF lst_sales_condx-cond_value IS NOT INITIAL

    APPEND lst_sales_cond TO fp_li_sales_cond.
    CLEAR lst_sales_cond.

    APPEND lst_sales_condx TO fp_li_sales_condx.
    CLEAR lst_sales_condx.
  ENDIF. " IF fp_kschl IS NOT INITIAL

ENDFORM.
***BOC BY SAYANDAS for CR-7614 on 24-AUG-2018 in ED2K913189
*&---------------------------------------------------------------------*
*&      Form  F_SAVE_FILE_APP_SERVER_SUBMIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_save_file_app_server_submit USING fp_li_output_x TYPE tt_output_x.
*** Local Constant Declaration
  CONSTANTS: lc_pipe       TYPE c VALUE '|',        " Tab of type Character
             lc_semico     TYPE char1 VALUE ';',    " Semico of type CHAR1
             lc_underscore TYPE char1 VALUE '_',    " Underscore of type CHAR1
             lc_slash      TYPE char1 VALUE '/',    " Slash of type CHAR1
             lc_extn       TYPE char4 VALUE '.csv', " Extn of type CHAR4
             lc_job_name   TYPE btcjob VALUE 'ZORDER_UPD'. " Background job name
**** Local field symbol declaration
  FIELD-SYMBOLS: <lfs_final_csv> TYPE LINE OF truxs_t_text_data.
*** Local structure and internal table declaration
  DATA: lst_final_csv TYPE LINE OF truxs_t_text_data,
        lv_length     TYPE i,      " Length of type Integers
        lv_fnm        TYPE char70, " Fnm of type CHAR70
        li_final_csv  TYPE truxs_t_text_data.

  DATA: lv_job_number TYPE tbtcjob-jobcount, " Job Count
        lv_job_name   TYPE tbtcjob-jobname,  " Job Name
        lv_user       TYPE sy-uname,         " User Name
        lv_pre_chk    TYPE btcckstat.        " variable for pre. job status

* SOC NPOLINA ED1K908854 - Logic to avoid thousand separator

** Calling FM to Convert the file to CSV format
*  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
*    EXPORTING
*      i_field_seperator    = lc_semico
*    TABLES
*      i_tab_sap_data       = fp_li_output_x
*    CHANGING
*      i_tab_converted_data = li_final_csv[] " CSV file
*    EXCEPTIONS
*      conversion_failed    = 1
*      OTHERS               = 2.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF. " IF sy-subrc <> 0
*  LOOP AT li_final_csv ASSIGNING <lfs_final_csv>.
*    REPLACE ALL OCCURRENCES OF lc_semico IN <lfs_final_csv> WITH lc_pipe.
*  ENDLOOP. " LOOP AT li_final_csv ASSIGNING <lfs_final_csv>

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_deselect_lines CHANGING fp_li_output_x.
  PERFORM f_update_log_2c CHANGING fp_li_output_x
                                   i_output_x.
* Update Logs to Staging Table
  IF i_e101_stage[] IS NOT INITIAL.
    MODIFY ze225_staging FROM TABLE i_e101_stage.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  LOOP AT fp_li_output_x ASSIGNING FIELD-SYMBOL(<lfs_outpt>).
    CLEAR:lst_final_csv.

    IF <lfs_outpt>-vaktsch IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = <lfs_outpt>-vaktsch
        IMPORTING
          output = <lfs_outpt>-vaktsch.
    ENDIF.

    CONCATENATE
            <lfs_outpt>-sel
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            <lfs_outpt>-identifier
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            <lfs_outpt>-customer
            <lfs_outpt>-parvw
            <lfs_outpt>-kunnr
            <lfs_outpt>-vkorg
            <lfs_outpt>-vtweg
            <lfs_outpt>-spart
            <lfs_outpt>-guebg
            <lfs_outpt>-gueen
            <lfs_outpt>-posnr
            <lfs_outpt>-matnr
            <lfs_outpt>-plant
            <lfs_outpt>-vbeln
            <lfs_outpt>-pstyv
            <lfs_outpt>-zmeng
            <lfs_outpt>-lifsk
            <lfs_outpt>-faksk
            <lfs_outpt>-abgru
            <lfs_outpt>-bsark
            <lfs_outpt>-auart
            <lfs_outpt>-xblnr
            <lfs_outpt>-zlsch
            <lfs_outpt>-bstnk
            <lfs_outpt>-stxh
            <lfs_outpt>-kschl
            <lfs_outpt>-kbetr
            <lfs_outpt>-ihrez
            <lfs_outpt>-zzpromo
            <lfs_outpt>-kdkg4
            <lfs_outpt>-kdkg5
            <lfs_outpt>-kdkg3
            <lfs_outpt>-srid
            <lfs_outpt>-vkbur
            <lfs_outpt>-fkdat
            <lfs_outpt>-waerk
            <lfs_outpt>-zuonr
            <lfs_outpt>-inv_text   " NPOLINA INC0219123 ED1K908983
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
            <lfs_outpt>-vaktsch
            <lfs_outpt>-vasda
            <lfs_outpt>-perio
            <lfs_outpt>-autte
            <lfs_outpt>-peraf
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
            <lfs_outpt>-augru       " NPOLINA DM1913 28/June/2019 ED2K915483
            <lfs_outpt>-kdkg2       " NPOLINA ERPM4543 23/Oct/2019 ED2K916556
**---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 (SOC by NPOLINA ERPM2334)
*            <lfs_outpt>-bp_email
*            <lfs_outpt>-zlogno
*            <lfs_outpt>-msgty
*            <lfs_outpt>-msgv1
*            <lfs_outpt>-log_handle
*            <lfs_outpt>-zoid
**---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 (EOC by NPOLINA ERPM2334)
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
            <lfs_outpt>-zzconstart
            <lfs_outpt>-zzconend
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*             <lfs_outpt>-vlaufk
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
             <lfs_outpt>-vlaufz
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 (SOC by NPOLINA ERPM2334)
            <lfs_outpt>-bp_email
            <lfs_outpt>-zlogno
            <lfs_outpt>-msgty
            <lfs_outpt>-msgv1
            <lfs_outpt>-log_handle
            <lfs_outpt>-zoid
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 (EOC by NPOLINA ERPM2334)
        INTO lst_final_csv SEPARATED BY lc_pipe.

    APPEND lst_final_csv TO li_final_csv.
    CLEAR:lst_final_csv.
  ENDLOOP.

* EOC NPOLINA ED1K908854 - Logic to avoid thousand separator

*    IF li_final_csv[] IS NOT INITIAL.
*      i_final_csv[] = li_final_csv[].
*    ENDIF. " IF li_final_csv[] IS NOT INITIAL
* SOC by NPOLINA E101 Paths  ERP7614 ED2K913574
*  lv_fnm = v_fpath.
*  lv_length = strlen( lv_fnm ).
*  lv_length = lv_length - 1.
*  IF lv_fnm+lv_length(1) NE lc_slash.
*    CONCATENATE lv_fnm lc_slash INTO lv_fnm.
*  ENDIF. " IF lv_fnm+lv_length(1) NE lc_slash
  CLEAR v_fpath.

*  v_fpath = lv_fnm.

*  CONCATENATE v_fpath
**              lc_slash
*              'ZORDER_UPD'
*              lc_underscore
*              sy-uname
*              lc_underscore
*              sy-datum
*              lc_underscore
*              sy-uzeit
*              lc_extn
*              INTO
*              v_path_fname.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267
*  CONCATENATE 'ZORDER_UPD'
*              lc_underscore
*              sy-uname
*              lc_underscore
*              sy-datum
*              lc_underscore
*              sy-uzeit
*              lc_extn
*              INTO
*              v_path_fname.

  CONCATENATE 'ZORDER_UPD'
              lc_underscore
              sy-uname
              lc_underscore
              v_oid
              lc_extn
              INTO
              v_path_fname.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267

  PERFORM f_get_file_path USING v_path_fname.
* EOC by NPOLINA E101 Paths   ERP7614 ED2K913574

  OPEN DATASET v_path_fname FOR OUTPUT IN TEXT MODE ENCODING DEFAULT. " Output type
  IF sy-subrc EQ 0.
    LOOP AT li_final_csv INTO lst_final_csv.
*    CONCATENATE lst_upload_file-order lst_upload_file-part_func lst_upload_file-cust_no INTO DATA(lv_text) SEPARATED BY ','.
      TRANSFER lst_final_csv TO v_path_fname.
    ENDLOOP. " LOOP AT li_final_csv INTO lst_final_csv
    CLOSE DATASET v_path_fname.
  ENDIF.
**** Submit Program
  CLEAR lv_job_name.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267
*  CONCATENATE lc_job_name '_' sy-datum '_' sy-uzeit '_' sy-uname  INTO lv_job_name.
  CONCATENATE lc_job_name '_' v_oid '_' sy-datum INTO lv_job_name.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267

  lv_user = sy-uname.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = text-066.

  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname          = lv_job_name
    IMPORTING
      jobcount         = lv_job_number
    EXCEPTIONS
      cant_create_job  = 1
      invalid_job_data = 2
      jobname_missing  = 3
      OTHERS           = 4.
  IF sy-subrc = 0.
    v_job_name = lv_job_name.
    p_job   = lv_job_name.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*    SUBMIT zqtcr_subscrip_order_upload  WITH rb_crea  = rb_crea
*                                        WITH rb_cros  = rb_cros
*                                        WITH rb_modi  = rb_modi
*                                        WITH rb_sel_m = rb_sel_m
*                                        WITH rb_upd_m = rb_upd_m
*                                        WITH rb_crem = rb_crem
*                                        WITH rb_sel = rb_sel
*                                        WITH rb_upd = rb_upd
*                                        WITH rb_crcg = rb_crcg
*                                        WITH rb_sel1 =  rb_sel1
*                                        WITH rb_upd1 =  rb_upd1
*                                        WITH rb_or_ct =  rb_or_ct
*                                        WITH rb_or_cn = rb_or_cn
*                                        WITH rb_sel2 = rb_sel2
*                                        WITH rb_upd2 = rb_upd2
*                                        WITH s_date IN s_date
*                                        WITH s_vbeln IN s_vbeln
*                                        WITH s_bstnk  IN s_bstnk
*                                        WITH s_userid IN s_userid
*                                        WITH s_invo IN s_invo
*                                        WITH s_doc  IN s_doc
*                                        WITH s_inv  IN s_inv
*                                        WITH s_cmr  IN s_cmr
*                                        WITH s_bstnk1 IN s_bstnk1
*                                        WITH s_promo  IN s_promo
*                                        WITH s_matnr  IN s_matnr
*                                        WITH s_crd_by IN s_crd_by
*                                        WITH s_ord_dt IN s_ord_dt
*                                        WITH s_order  IN s_order
*                                        WITH s_bstnk2 IN s_bstnk2
*                                        WITH s_promo1 IN s_promo1
*                                        WITH s_matnr1 IN s_matnr1
*                                        WITH s_user1  IN s_user1
*                                        WITH p_file  = p_file
*                                        WITH p_a_file = v_path_fname
*                                        WITH p_job    = p_job
*                                        WITH p_userid = sy-uname
*                                        WITH p_v_oid  = v_oid " NPALLA ED2K924398 OTCM-47267 ++ Add
*                                        USER  'QTC_BATCH01'
*                                        VIA JOB lv_job_name NUMBER lv_job_number
*                                        AND RETURN.
    SUBMIT zqtcr_subscrip_order_upload_v1  WITH rb_crea  = rb_crea
                                        WITH rb_cros  = rb_cros
                                        WITH rb_modi  = rb_modi
                                        WITH rb_sel_m = rb_sel_m
                                        WITH rb_upd_m = rb_upd_m
                                        WITH rb_crem = rb_crem
                                        WITH rb_sel = rb_sel
                                        WITH rb_upd = rb_upd
                                        WITH rb_crcg = rb_crcg
                                        WITH rb_sel1 =  rb_sel1
                                        WITH rb_upd1 =  rb_upd1
                                        WITH rb_or_ct =  rb_or_ct
                                        WITH rb_or_cn = rb_or_cn
                                        WITH rb_sel2 = rb_sel2
                                        WITH rb_upd2 = rb_upd2
                                        WITH s_date IN s_date
                                        WITH s_vbeln IN s_vbeln
                                        WITH s_bstnk  IN s_bstnk
                                        WITH s_userid IN s_userid
                                        WITH s_invo IN s_invo
                                        WITH s_doc  IN s_doc
                                        WITH s_inv  IN s_inv
                                        WITH s_cmr  IN s_cmr
                                        WITH s_bstnk1 IN s_bstnk1
                                        WITH s_promo  IN s_promo
                                        WITH s_matnr  IN s_matnr
                                        WITH s_crd_by IN s_crd_by
                                        WITH s_ord_dt IN s_ord_dt
                                        WITH s_order  IN s_order
                                        WITH s_bstnk2 IN s_bstnk2
                                        WITH s_promo1 IN s_promo1
                                        WITH s_matnr1 IN s_matnr1
                                        WITH s_user1  IN s_user1
                                        WITH p_file  = p_file
                                        WITH p_a_file = v_path_fname
                                        WITH p_job    = p_job
                                        WITH p_userid = sy-uname
                                        WITH p_devid  = p_devid   " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        WITH p_v_oid  = v_oid     " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        USER  'QTC_BATCH01'
                                        VIA JOB lv_job_name NUMBER lv_job_number
                                        AND RETURN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
** close the background job for successor jobs
    CALL FUNCTION 'JOB_CLOSE'
      EXPORTING
        jobname              = lv_job_name
        jobcount             = lv_job_number
        predjob_checkstat    = lv_pre_chk
        sdlstrtdt            = sy-datum
        sdlstrttm            = sy-uzeit
      EXCEPTIONS
        cant_start_immediate = 01
        invalid_startdate    = 02
        jobname_missing      = 03
        job_close_failed     = 04
        job_nosteps          = 05
        job_notex            = 06
        lock_failed          = 07
        OTHERS               = 08.
    IF sy-subrc = 0.

    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF sy-subrc = 0
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_READ_FROM_APP_SUB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_read_from_app_sub .
  DATA : lv_string    TYPE string,
         lst_output_x TYPE ty_output_x.

  OPEN DATASET p_a_file FOR INPUT IN TEXT MODE ENCODING DEFAULT. " Set as Ready for Input
  IF sy-subrc NE 0.
    MESSAGE e100(zqtc_r2). " File does not transfer to Application server
    LEAVE LIST-PROCESSING.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ELSE.
*   Adding Success Messages.
    MESSAGE s303(zqtc_r2) WITH p_v_oid.  " Unique ID "&1" is assigned for this file upload.
    MESSAGE s000(zqtc_r2) WITH 'Application File'(123)
                               p_a_file+0(23) p_a_file+23(50) p_a_file+73.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDIF. " IF sy-subrc NE 0

  DO.
    READ DATASET p_a_file INTO lv_string.
    IF sy-subrc EQ 0.
      SPLIT lv_string AT '|' INTO lst_output_x-sel
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
                                  lst_output_x-identifier
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
                                  lst_output_x-customer
                                  lst_output_x-parvw
                                  lst_output_x-kunnr
                                  lst_output_x-vkorg
                                  lst_output_x-vtweg
                                  lst_output_x-spart
                                  lst_output_x-guebg
                                  lst_output_x-gueen
                                  lst_output_x-posnr
                                  lst_output_x-matnr
                                  lst_output_x-plant
                                  lst_output_x-vbeln
                                  lst_output_x-pstyv
                                  lst_output_x-zmeng
                                  lst_output_x-lifsk
                                  lst_output_x-faksk
                                  lst_output_x-abgru
                                  lst_output_x-bsark
                                  lst_output_x-auart
                                  lst_output_x-xblnr
                                  lst_output_x-zlsch
                                  lst_output_x-bstnk
                                  lst_output_x-stxh
                                  lst_output_x-kschl
                                  lst_output_x-kbetr
                                  lst_output_x-ihrez
                                  lst_output_x-zzpromo
                                  lst_output_x-kdkg4
                                  lst_output_x-kdkg5
                                  lst_output_x-kdkg3
                                  lst_output_x-srid
                                  lst_output_x-vkbur
                                  lst_output_x-fkdat
                                  lst_output_x-waerk
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
                                  lst_output_x-zuonr  "Assignment number
* EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
                                  lst_output_x-inv_text
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
                                  lst_output_x-vaktsch
                                  lst_output_x-vasda
                                  lst_output_x-perio
                                  lst_output_x-autte
                                  lst_output_x-peraf
                                  lst_output_x-augru  "NPOLINA DM1913 01/July/2019 ED2K915483
                                  lst_output_x-kdkg2  "NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* SOC by NPOLINA
**---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 (SOC by NPOLINA ERPM2334)
*                                  lst_output_x-bp_email
*                                  lst_output_x-zlogno
*                                  lst_output_x-msgty
*                                  lst_output_x-msgv1
*                                  lst_output_x-log_handle
*                                  lst_output_x-zoid
**---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 (EOC by NPOLINA ERPM2334)
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818/ED2K920083 *
                                  lst_output_x-zzconstart
                                  lst_output_x-zzconend
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818/ED2K920083
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*                                  lst_output_x-vlaufk
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
                                  lst_output_x-vlaufz
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
*ERPM2334
                                  lst_output_x-bp_email
                                  lst_output_x-zlogno
                                  lst_output_x-msgty
                                  lst_output_x-msgv1
                                  lst_output_x-log_handle
                                  lst_output_x-zoid.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*                                  lst_output_x-identifier.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_output_x-zoid
        IMPORTING
          output = lst_output_x-zoid.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_output_x-identifier
        IMPORTING
          output = lst_output_x-identifier.

* EOC by NPOLINA ERPM2334
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
      APPEND lst_output_x TO i_output_x.
      CLEAR  lst_output_x.
    ELSE. " ELSE -> IF sy-subrc EQ 0
      EXIT.
    ENDIF. " IF sy-subrc EQ 0
  ENDDO.
  CLOSE DATASET p_a_file.
*---Begin of change VDPATABALL E225 & E101 12/16/2019
  IF p_devid EQ c_e225.
    FREE:i_output_tmp.
    i_output_tmp[] = i_output_x[].
    DELETE i_output_x WHERE msgty = c_e.
    DELETE i_output_tmp WHERE msgty NE c_e.
  ENDIF.
*---End of change VDPATABALL E225 & E101 12/16/2019
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SFILE_APP_CRDT_SUBMIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LI_FINAL_CRME_CRT  text
*----------------------------------------------------------------------*
FORM f_sfile_app_crdt_submit  USING  fp_li_final_crme_crt TYPE tt_crdt_memo_crt.
*** Local Constant Declaration
  CONSTANTS: lc_pipe       TYPE c VALUE '|',        " Tab of type Character
             lc_semico     TYPE char1 VALUE ';',    " Semico of type CHAR1
             lc_underscore TYPE char1 VALUE '_',    " Underscore of type CHAR1
             lc_slash      TYPE char1 VALUE '/',    " Slash of type CHAR1
             lc_extn       TYPE char4 VALUE '.csv', " Extn of type CHAR4
             lc_job_name   TYPE btcjob VALUE 'ZORDER_UPD'. " Background job name

**** Local field symbol declaration
  FIELD-SYMBOLS: <lfs_final_csv> TYPE LINE OF truxs_t_text_data.
*** Local structure and internal table declaration
  DATA: lst_final_csv TYPE LINE OF truxs_t_text_data,
        li_final_csv  TYPE truxs_t_text_data.

  DATA: lv_job_number TYPE tbtcjob-jobcount, " Job Count
        lv_job_name   TYPE tbtcjob-jobname,  " Job Name
        lv_user       TYPE sy-uname,         " User Name
        lv_pre_chk    TYPE btcckstat.        " variable for pre. job status

* SOC NPOLINA ED1K908854 - Logic to avoid thousand separator
  DATA: lv_fkimg  TYPE char13, " Fkimg of type CHAR13
        lv_kbetr  TYPE char11, " Kbetr of type CHAR11
        lv_kbetr2 TYPE char11, " Kbetr2 of type CHAR11
        lv_kbetr3 TYPE char11, " Kbetr3 of type CHAR11
        lv_tax2   TYPE char11. " Kbetr3 of type CHAR11 NPOLINA ERP7763

** Calling FM to Convert the file to CSV format
*  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
*    EXPORTING
*      i_field_seperator    = lc_semico
*    TABLES
*      i_tab_sap_data       = fp_li_final_crme_crt
*    CHANGING
*      i_tab_converted_data = li_final_csv[] " CSV file
*    EXCEPTIONS
*      conversion_failed    = 1
*      OTHERS               = 2.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF. " IF sy-subrc <> 0
*  LOOP AT li_final_csv ASSIGNING <lfs_final_csv>.
*    REPLACE ALL OCCURRENCES OF lc_semico IN <lfs_final_csv> WITH lc_pipe.
*  ENDLOOP. " LOOP AT li_final_csv ASSIGNING <lfs_final_csv>

  LOOP AT fp_li_final_crme_crt ASSIGNING FIELD-SYMBOL(<lfs_crme>) .
    CLEAR:lst_final_csv,lv_fkimg,lv_kbetr,lv_kbetr2,lv_kbetr3,
         lv_tax2 .           " NPOLINA ERP7763
    lv_fkimg = <lfs_crme>-fkimg.
    lv_kbetr = <lfs_crme>-kbetr.
    lv_kbetr2 = <lfs_crme>-kbetr2.
    lv_kbetr3 = <lfs_crme>-kbetr3.
    lv_tax2 = <lfs_crme>-tax.     "NPOLINA ERP7763
    CONDENSE:lv_fkimg NO-GAPS,lv_kbetr NO-GAPS,lv_kbetr2 NO-GAPS,lv_kbetr3 NO-GAPS.

    CONCATENATE <lfs_crme>-sel
                <lfs_crme>-customer
                <lfs_crme>-parvw
                <lfs_crme>-partner
                <lfs_crme>-vkorg
                <lfs_crme>-vtweg
                <lfs_crme>-spart
                <lfs_crme>-auart
                <lfs_crme>-xblnr
                <lfs_crme>-zlsch
                <lfs_crme>-augru
                <lfs_crme>-vbeln
                <lfs_crme>-posnr
                <lfs_crme>-matnr
                <lfs_crme>-plant
                lv_fkimg
                <lfs_crme>-stxh
                <lfs_crme>-kschl
                lv_kbetr
                <lfs_crme>-kschl2
                lv_kbetr2
                <lfs_crme>-kschl3
                lv_kbetr3
                <lfs_crme>-ihrez
                <lfs_crme>-kdkg3
                <lfs_crme>-vkbur
                <lfs_crme>-bstnk
                <lfs_crme>-bsark
                <lfs_crme>-pstyv
                lv_tax2      "NPOLINA ERP7763
          INTO lst_final_csv SEPARATED BY lc_pipe.

    APPEND lst_final_csv TO li_final_csv.
    CLEAR:lst_final_csv.

  ENDLOOP.
* EOC NPOLINA ED1K908854 - Logic to avoid thousand separator

* SOC by NPOLINA E101 Paths ERP7614 ED2K913574
*  CONCATENATE v_fpath
*              lc_slash
*              'ZORDER_UPD'
*              lc_underscore
*              sy-uname
*              lc_underscore
*              sy-datum
*              lc_underscore
*              sy-uzeit
*              lc_extn
*              INTO
*              v_path_fname.

  CONCATENATE 'ZORDER_UPD'
              lc_underscore
              sy-uname
              lc_underscore
              sy-datum
              lc_underscore
              sy-uzeit
              lc_extn
              INTO
              v_path_fname.

  PERFORM f_get_file_path USING v_path_fname.
* EOC by NPOLINA E101 Paths   ERP7614  ED2K913574
  OPEN DATASET v_path_fname FOR OUTPUT IN TEXT MODE ENCODING DEFAULT. " Output type
  LOOP AT li_final_csv INTO lst_final_csv.
*    CONCATENATE lst_upload_file-order lst_upload_file-part_func lst_upload_file-cust_no INTO DATA(lv_text) SEPARATED BY ','.
    TRANSFER lst_final_csv TO v_path_fname.
  ENDLOOP. " LOOP AT li_final_csv INTO lst_final_csv
  CLOSE DATASET v_path_fname.

**** Submit Program
  CLEAR lv_job_name.
  CONCATENATE lc_job_name '_' sy-datum '_' sy-uzeit '_' sy-uname  INTO lv_job_name.

  lv_user = sy-uname.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = text-066.

  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname          = lv_job_name
    IMPORTING
      jobcount         = lv_job_number
    EXCEPTIONS
      cant_create_job  = 1
      invalid_job_data = 2
      jobname_missing  = 3
      OTHERS           = 4.
  IF sy-subrc = 0.
    v_job_name = lv_job_name.
    p_job   = lv_job_name.

* SOC by NPOLINA ERP7763 ED2K914078
    IF rb_ord IS NOT INITIAL.
      CLEAR:rb_ord.
      rb_upd = abap_true.
    ENDIF.
* EOC by NPOLINA ERP7763 ED2K914078
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*    SUBMIT zqtcr_subscrip_order_upload  WITH rb_crea  = rb_crea
*                                        WITH rb_cros  = rb_cros
*                                        WITH rb_modi  = rb_modi
*                                        WITH rb_sel_m = rb_sel_m
*                                        WITH rb_upd_m = rb_upd_m
*                                        WITH rb_crem = rb_crem
*                                        WITH rb_sel = rb_sel
*                                        WITH rb_upd = rb_upd
*                                        WITH rb_ord = rb_ord     " NPOLINA ERP7763 ED2K914078
*                                        WITH rb_crcg = rb_crcg
*                                        WITH rb_sel1 =  rb_sel1
*                                        WITH rb_upd1 =  rb_upd1
*                                        WITH rb_or_ct =  rb_or_ct
*                                        WITH rb_or_cn = rb_or_cn
*                                        WITH rb_sel2 = rb_sel2
*                                        WITH rb_upd2 = rb_upd2
*                                        WITH s_date IN s_date
*                                        WITH s_vbeln IN s_vbeln
*                                        WITH s_bstnk  IN s_bstnk
*                                        WITH s_userid IN s_userid
*                                        WITH s_invo IN s_invo
*                                        WITH s_doc  IN s_doc
*                                        WITH s_inv  IN s_inv
*                                        WITH s_cmr  IN s_cmr
*                                        WITH s_bstnk1 IN s_bstnk1
*                                        WITH s_promo  IN s_promo
*                                        WITH s_matnr  IN s_matnr
*                                        WITH s_crd_by IN s_crd_by
*                                        WITH s_ord_dt IN s_ord_dt
*                                        WITH s_order  IN s_order
*                                        WITH s_bstnk2 IN s_bstnk2
*                                        WITH s_promo1 IN s_promo1
*                                        WITH s_matnr1 IN s_matnr1
*                                        WITH s_user1  IN s_user1
*                                        WITH p_file  = p_file
**                                        WITH p_a_file = v_fpath       "NPOLINA ED2K913574 ERP7614
*                                        WITH p_a_file = v_path_fname   "NPOLINA ED2K913574 ERP7614
*                                        WITH p_job    = p_job
*                                        WITH p_userid = sy-uname
*                                        USER  'QTC_BATCH01'
*                                        VIA JOB lv_job_name NUMBER lv_job_number
*                                        AND RETURN.
    SUBMIT zqtcr_subscrip_order_upload_v1  WITH rb_crea  = rb_crea
                                        WITH rb_cros  = rb_cros
                                        WITH rb_modi  = rb_modi
                                        WITH rb_sel_m = rb_sel_m
                                        WITH rb_upd_m = rb_upd_m
                                        WITH rb_crem = rb_crem
                                        WITH rb_sel = rb_sel
                                        WITH rb_upd = rb_upd
                                        WITH rb_ord = rb_ord     " NPOLINA ERP7763 ED2K914078
                                        WITH rb_crcg = rb_crcg
                                        WITH rb_sel1 =  rb_sel1
                                        WITH rb_upd1 =  rb_upd1
                                        WITH rb_or_ct =  rb_or_ct
                                        WITH rb_or_cn = rb_or_cn
                                        WITH rb_sel2 = rb_sel2
                                        WITH rb_upd2 = rb_upd2
                                        WITH s_date IN s_date
                                        WITH s_vbeln IN s_vbeln
                                        WITH s_bstnk  IN s_bstnk
                                        WITH s_userid IN s_userid
                                        WITH s_invo IN s_invo
                                        WITH s_doc  IN s_doc
                                        WITH s_inv  IN s_inv
                                        WITH s_cmr  IN s_cmr
                                        WITH s_bstnk1 IN s_bstnk1
                                        WITH s_promo  IN s_promo
                                        WITH s_matnr  IN s_matnr
                                        WITH s_crd_by IN s_crd_by
                                        WITH s_ord_dt IN s_ord_dt
                                        WITH s_order  IN s_order
                                        WITH s_bstnk2 IN s_bstnk2
                                        WITH s_promo1 IN s_promo1
                                        WITH s_matnr1 IN s_matnr1
                                        WITH s_user1  IN s_user1
                                        WITH p_file  = p_file
*                                        WITH p_a_file = v_fpath       "NPOLINA ED2K913574 ERP7614
                                        WITH p_a_file = v_path_fname   "NPOLINA ED2K913574 ERP7614
                                        WITH p_job    = p_job
                                        WITH p_userid = sy-uname
                                        WITH p_devid  = p_devid   " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        WITH p_v_oid  = v_oid     " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        USER  'QTC_BATCH01'
                                        VIA JOB lv_job_name NUMBER lv_job_number
                                        AND RETURN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

** close the background job for successor jobs
    CALL FUNCTION 'JOB_CLOSE'
      EXPORTING
        jobname              = lv_job_name
        jobcount             = lv_job_number
        predjob_checkstat    = lv_pre_chk
        sdlstrtdt            = sy-datum
        sdlstrttm            = sy-uzeit
      EXCEPTIONS
        cant_start_immediate = 01
        invalid_startdate    = 02
        jobname_missing      = 03
        job_close_failed     = 04
        job_nosteps          = 05
        job_notex            = 06
        lock_failed          = 07
        OTHERS               = 08.
    IF sy-subrc = 0.

    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF sy-subrc = 0

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SFILE_APP_CRDTC_SUBMIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LI_FINAL_CRDT  text
*----------------------------------------------------------------------*
FORM f_sfile_app_crdtc_submit  USING   fp_li_final_crdt TYPE tt_crdt_memo_enh.
*** Local Constant Declaration
  CONSTANTS: lc_pipe       TYPE c VALUE '|',        " Tab of type Character
             lc_semico     TYPE char1 VALUE ';',    " Semico of type CHAR1
             lc_underscore TYPE char1 VALUE '_',    " Underscore of type CHAR1
             lc_slash      TYPE char1 VALUE '/',    " Slash of type CHAR1
             lc_extn       TYPE char4 VALUE '.csv', " Extn of type CHAR4
             lc_job_name   TYPE btcjob VALUE 'ZORDER_UPD'. " Background job name
**** Local field symbol declaration
  FIELD-SYMBOLS: <lfs_final_csv> TYPE LINE OF truxs_t_text_data.
*** Local structure and internal table declaration
  DATA: lst_final_csv TYPE LINE OF truxs_t_text_data,
        li_final_csv  TYPE truxs_t_text_data.

  DATA: lv_job_number TYPE tbtcjob-jobcount, " Job Count
        lv_job_name   TYPE tbtcjob-jobname,  " Job Name
        lv_user       TYPE sy-uname,         " User Name
        lv_pre_chk    TYPE btcckstat.        " variable for pre. job status

* SOC NPOLINA ED1K908854 - Logic to avoid thousand separator
  DATA: lv_fkimg TYPE char13, " Fkimg of type CHAR13
        lv_kbetr TYPE char11. " Kbetr of type CHAR11

** Calling FM to Convert the file to CSV format
*  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
*    EXPORTING
*      i_field_seperator    = lc_semico
*    TABLES
*      i_tab_sap_data       = fp_li_final_crdt
*    CHANGING
*      i_tab_converted_data = li_final_csv[] " CSV file
*    EXCEPTIONS
*      conversion_failed    = 1
*      OTHERS               = 2.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF. " IF sy-subrc <> 0
*  LOOP AT li_final_csv ASSIGNING <lfs_final_csv>.
*    REPLACE ALL OCCURRENCES OF lc_semico IN <lfs_final_csv> WITH lc_pipe.
*  ENDLOOP. " LOOP AT li_final_csv ASSIGNING <lfs_final_csv>

  LOOP AT fp_li_final_crdt ASSIGNING FIELD-SYMBOL(<lfs_crdt>).
    CLEAR:lst_final_csv,lv_fkimg,lv_kbetr.

    lv_fkimg = <lfs_crdt>-fkimg.
    lv_kbetr = <lfs_crdt>-kbetr.
    CONDENSE: lv_fkimg NO-GAPS,lv_kbetr NO-GAPS.
    CONCATENATE
            <lfs_crdt>-sel
            <lfs_crdt>-customer
            <lfs_crdt>-parvw
            <lfs_crdt>-partner
            <lfs_crdt>-vkorg
            <lfs_crdt>-vtweg
            <lfs_crdt>-spart
            <lfs_crdt>-auart
            <lfs_crdt>-xblnr
            <lfs_crdt>-zlsch
            <lfs_crdt>-augru
            <lfs_crdt>-vbeln
            <lfs_crdt>-posnr
            <lfs_crdt>-matnr
            <lfs_crdt>-plant
            lv_fkimg
            <lfs_crdt>-stxh
            <lfs_crdt>-kschl
            lv_kbetr
            <lfs_crdt>-ihrez
            <lfs_crdt>-kdkg3
            <lfs_crdt>-vkbur
            <lfs_crdt>-bstnk
            <lfs_crdt>-bsark
            <lfs_crdt>-pstyv
          INTO lst_final_csv SEPARATED BY lc_pipe.

    APPEND lst_final_csv TO li_final_csv.
    CLEAR:lst_final_csv,lv_fkimg,lv_kbetr.
  ENDLOOP.

* EOC NPOLINA ED1K908854 - Logic to avoid thousand separator

* SOC by NPOLINA E101 Paths  ERP7614 ED2K913574
*  CONCATENATE v_fpath
*              lc_slash
*              'ZORDER_UPD'
*              lc_underscore
*              sy-uname
*              lc_underscore
*              sy-datum
*              lc_underscore
*              sy-uzeit
*              lc_extn
*              INTO
*              v_path_fname.

  CONCATENATE 'ZORDER_UPD'
              lc_underscore
              sy-uname
              lc_underscore
              sy-datum
              lc_underscore
              sy-uzeit
              lc_extn
              INTO
              v_path_fname.

  PERFORM f_get_file_path USING  v_path_fname.
* EOC by NPOLINA E101 Paths   ERP7614  ED2K913574
  OPEN DATASET v_path_fname FOR OUTPUT IN TEXT MODE ENCODING DEFAULT. " Output type
  LOOP AT li_final_csv INTO lst_final_csv.
*    CONCATENATE lst_upload_file-order lst_upload_file-part_func lst_upload_file-cust_no INTO DATA(lv_text) SEPARATED BY ','.
    TRANSFER lst_final_csv TO v_path_fname.
  ENDLOOP. " LOOP AT li_final_csv INTO lst_final_csv
  CLOSE DATASET v_path_fname.

**** Submit Program
  CLEAR lv_job_name.
  CONCATENATE lc_job_name '_' sy-datum '_' sy-uzeit '_' sy-uname  INTO lv_job_name.

  lv_user = sy-uname.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = text-066.

  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname          = lv_job_name
    IMPORTING
      jobcount         = lv_job_number
    EXCEPTIONS
      cant_create_job  = 1
      invalid_job_data = 2
      jobname_missing  = 3
      OTHERS           = 4.
  IF sy-subrc = 0.
    v_job_name = lv_job_name.
    p_job   = lv_job_name.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*    SUBMIT zqtcr_subscrip_order_upload  WITH rb_crea  = rb_crea
*                                        WITH rb_cros  = rb_cros
*                                        WITH rb_modi  = rb_modi
*                                        WITH rb_sel_m = rb_sel_m
*                                        WITH rb_upd_m = rb_upd_m
*                                        WITH rb_crem = rb_crem
*                                        WITH rb_sel = rb_sel
*                                        WITH rb_upd = rb_upd
*                                        WITH rb_crcg = rb_crcg
*                                        WITH rb_sel1 =  rb_sel1
*                                        WITH rb_upd1 =  rb_upd1
*                                        WITH rb_or_ct =  rb_or_ct
*                                        WITH rb_or_cn = rb_or_cn
*                                        WITH rb_sel2 = rb_sel2
*                                        WITH rb_upd2 = rb_upd2
*                                        WITH s_date IN s_date
*                                        WITH s_vbeln IN s_vbeln
*                                        WITH s_bstnk  IN s_bstnk
*                                        WITH s_userid IN s_userid
*                                        WITH s_invo IN s_invo
*                                        WITH s_doc  IN s_doc
*                                        WITH s_inv  IN s_inv
*                                        WITH s_cmr  IN s_cmr
*                                        WITH s_bstnk1 IN s_bstnk1
*                                        WITH s_promo  IN s_promo
*                                        WITH s_matnr  IN s_matnr
*                                        WITH s_crd_by IN s_crd_by
*                                        WITH s_ord_dt IN s_ord_dt
*                                        WITH s_order  IN s_order
*                                        WITH s_bstnk2 IN s_bstnk2
*                                        WITH s_promo1 IN s_promo1
*                                        WITH s_matnr1 IN s_matnr1
*                                        WITH s_user1  IN s_user1
*                                        WITH p_file  = p_file
**                                        WITH p_a_file = v_fpath        "NPOLINA ED2K913574 ERP7614
*                                        WITH p_a_file = v_path_fname   "NPOLINA ED2K913574  ERP7614
*                                        WITH p_job    = p_job
*                                        WITH p_userid = sy-uname
*                                        USER  'QTC_BATCH01'
*                                        VIA JOB lv_job_name NUMBER lv_job_number
*                                        AND RETURN.
    SUBMIT zqtcr_subscrip_order_upload  WITH rb_crea  = rb_crea
                                        WITH rb_cros  = rb_cros
                                        WITH rb_modi  = rb_modi
                                        WITH rb_sel_m = rb_sel_m
                                        WITH rb_upd_m = rb_upd_m
                                        WITH rb_crem = rb_crem
                                        WITH rb_sel = rb_sel
                                        WITH rb_upd = rb_upd
                                        WITH rb_crcg = rb_crcg
                                        WITH rb_sel1 =  rb_sel1
                                        WITH rb_upd1 =  rb_upd1
                                        WITH rb_or_ct =  rb_or_ct
                                        WITH rb_or_cn = rb_or_cn
                                        WITH rb_sel2 = rb_sel2
                                        WITH rb_upd2 = rb_upd2
                                        WITH s_date IN s_date
                                        WITH s_vbeln IN s_vbeln
                                        WITH s_bstnk  IN s_bstnk
                                        WITH s_userid IN s_userid
                                        WITH s_invo IN s_invo
                                        WITH s_doc  IN s_doc
                                        WITH s_inv  IN s_inv
                                        WITH s_cmr  IN s_cmr
                                        WITH s_bstnk1 IN s_bstnk1
                                        WITH s_promo  IN s_promo
                                        WITH s_matnr  IN s_matnr
                                        WITH s_crd_by IN s_crd_by
                                        WITH s_ord_dt IN s_ord_dt
                                        WITH s_order  IN s_order
                                        WITH s_bstnk2 IN s_bstnk2
                                        WITH s_promo1 IN s_promo1
                                        WITH s_matnr1 IN s_matnr1
                                        WITH s_user1  IN s_user1
                                        WITH p_file  = p_file
*                                        WITH p_a_file = v_fpath        "NPOLINA ED2K913574 ERP7614
                                        WITH p_a_file = v_path_fname   "NPOLINA ED2K913574  ERP7614
                                        WITH p_job    = p_job
                                        WITH p_userid = sy-uname
                                        WITH p_devid  = p_devid   " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        WITH p_v_oid  = v_oid     " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        USER  'QTC_BATCH01'
                                        VIA JOB lv_job_name NUMBER lv_job_number
                                        AND RETURN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

** close the background job for successor jobs
    CALL FUNCTION 'JOB_CLOSE'
      EXPORTING
        jobname              = lv_job_name
        jobcount             = lv_job_number
        predjob_checkstat    = lv_pre_chk
        sdlstrtdt            = sy-datum
        sdlstrttm            = sy-uzeit
      EXCEPTIONS
        cant_start_immediate = 01
        invalid_startdate    = 02
        jobname_missing      = 03
        job_close_failed     = 04
        job_nosteps          = 05
        job_notex            = 06
        lock_failed          = 07
        OTHERS               = 08.
    IF sy-subrc = 0.

    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF sy-subrc = 0
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SFILE_APP_ORD_SUBMIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LI_ORD_ALV  text
*----------------------------------------------------------------------*
FORM f_sfile_app_ord_submit  USING  fp_li_ord_alv TYPE tt_order_alv.
*** Local Constant Declaration
  CONSTANTS: lc_pipe       TYPE c VALUE '|',        " Tab of type Character
             lc_semico     TYPE char1 VALUE ';',    " Semico of type CHAR1
             lc_underscore TYPE char1 VALUE '_',    " Underscore of type CHAR1
             lc_slash      TYPE char1 VALUE '/',    " Slash of type CHAR1
             lc_extn       TYPE char4 VALUE '.csv', " Extn of type CHAR4
             lc_job_name   TYPE btcjob VALUE 'ZORDER_UPD'. " Background job name

**** Local field symbol declaration
  FIELD-SYMBOLS: <lfs_final_csv> TYPE LINE OF truxs_t_text_data.
*** Local structure and internal table declaration
  DATA: lst_final_csv TYPE LINE OF truxs_t_text_data,
        li_final_csv  TYPE truxs_t_text_data.

  DATA: lv_job_number TYPE tbtcjob-jobcount, " Job Count
        lv_job_name   TYPE tbtcjob-jobname,  " Job Name
        lv_user       TYPE sy-uname,         " User Name
        lv_pre_chk    TYPE btcckstat.        " variable for pre. job status

* SOC NPOLINA ED1K908854 - Logic to avoid thousand separator

** Calling FM to Convert the file to CSV format
*  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
*    EXPORTING
*      i_field_seperator    = lc_semico
*    TABLES
*      i_tab_sap_data       = fp_li_ord_alv
*    CHANGING
*      i_tab_converted_data = li_final_csv[] " CSV file
*    EXCEPTIONS
*      conversion_failed    = 1
*      OTHERS               = 2.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF. " IF sy-subrc <> 0
*  LOOP AT li_final_csv ASSIGNING <lfs_final_csv>.
*    REPLACE ALL OCCURRENCES OF lc_semico IN <lfs_final_csv> WITH lc_pipe.
*  ENDLOOP. " LOOP AT li_final_csv ASSIGNING <lfs_final_csv>

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_deselect_norm_lines CHANGING fp_li_ord_alv.
  PERFORM f_update_log_2h CHANGING fp_li_ord_alv
                                   i_ord_alv.
* Update Logs to Staging Table
  IF i_e101_stage[] IS NOT INITIAL.
    MODIFY ze225_staging FROM TABLE i_e101_stage.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  LOOP AT fp_li_ord_alv ASSIGNING FIELD-SYMBOL(<lfs_ord>).
    CLEAR:lst_final_csv.
    CONCATENATE <lfs_ord>-sel
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
                <lfs_ord>-identifier
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
                <lfs_ord>-customer
                <lfs_ord>-parvw
                <lfs_ord>-partner
                <lfs_ord>-vkorg
                <lfs_ord>-vtweg
                <lfs_ord>-spart
                <lfs_ord>-guebg
                <lfs_ord>-gueen
                <lfs_ord>-augru
                <lfs_ord>-matnr
                <lfs_ord>-plant
                <lfs_ord>-vbeln
                <lfs_ord>-posnr
                <lfs_ord>-pstyv
                <lfs_ord>-kwmeng
                <lfs_ord>-xblnr
                <lfs_ord>-zlsch
                <lfs_ord>-lifsk
                <lfs_ord>-faksk
                <lfs_ord>-abgru
                <lfs_ord>-auart
                <lfs_ord>-bstnk
                <lfs_ord>-stxh
                <lfs_ord>-kschl
                <lfs_ord>-kbetr
                <lfs_ord>-ihrez
                <lfs_ord>-ihrez_e
                <lfs_ord>-zzpromo
                <lfs_ord>-kdkg4
                <lfs_ord>-kdkg5
                <lfs_ord>-kdkg3
                <lfs_ord>-srid
                <lfs_ord>-vkbur
* BOC by Lahiru on 10/22/2020 for OTCM-22276 with ED2K920076 * " Add as a retrofit activity
*Begin of ADD:INC0318030:ARGADEELA:21-Oct-2020:ED1K912300
                <lfs_ord>-bsark
                <lfs_ord>-kdkg2
*End of ADD:INC0318030:ARGADEELA:21-Oct-2020:ED1K912300
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
                <lfs_ord>-fkdat       "OTCM-52926
                <lfs_ord>-bp_email
                <lfs_ord>-zlogno
                <lfs_ord>-msgty
                <lfs_ord>-msgv1
                <lfs_ord>-log_handle
                <lfs_ord>-zoid
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* EOC by Lahiru on 10/22/2020 for OTCM-22276 with ED2K920076 *
         INTO lst_final_csv SEPARATED BY lc_pipe.

    APPEND lst_final_csv TO li_final_csv.
    CLEAR:lst_final_csv.
  ENDLOOP.

* EOC NPOLINA ED1K908854 - Logic to avoid thousand separator

* SOC by NPOLINA E101 Paths  ED2K913574 ERP7614
*  CONCATENATE v_fpath
*              lc_slash
*              'ZORDER_UPD'
*              lc_underscore
*              sy-uname
*              lc_underscore
*              sy-datum
*              lc_underscore
*              sy-uzeit
*              lc_extn
*              INTO
*              v_path_fname.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267
*  CONCATENATE 'ZORDER_UPD'
*              lc_underscore
*              sy-uname
*              lc_underscore
*              sy-datum
*              lc_underscore
*              sy-uzeit
*              lc_extn
*              INTO
*              v_path_fname.

  CONCATENATE 'ZORDER_UPD'
              lc_underscore
              sy-uname
              lc_underscore
              v_oid
              lc_extn
              INTO
              v_path_fname.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267

  PERFORM f_get_file_path USING  v_path_fname.
* EOC by NPOLINA E101 Paths  ED2K913574  ERP7614

  OPEN DATASET v_path_fname FOR OUTPUT IN TEXT MODE ENCODING DEFAULT. " Output type
  LOOP AT li_final_csv INTO lst_final_csv.
*    CONCATENATE lst_upload_file-order lst_upload_file-part_func lst_upload_file-cust_no INTO DATA(lv_text) SEPARATED BY ','.
    TRANSFER lst_final_csv TO v_path_fname.
  ENDLOOP. " LOOP AT li_final_csv INTO lst_final_csv
  CLOSE DATASET v_path_fname.

**** Submit Program
  CLEAR lv_job_name.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267
*  CONCATENATE lc_job_name '_' sy-datum '_' sy-uzeit '_' sy-uname  INTO lv_job_name.
  CONCATENATE lc_job_name '_' v_oid '_' sy-datum INTO lv_job_name.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267

  lv_user = sy-uname.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = text-066.

  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname          = lv_job_name
    IMPORTING
      jobcount         = lv_job_number
    EXCEPTIONS
      cant_create_job  = 1
      invalid_job_data = 2
      jobname_missing  = 3
      OTHERS           = 4.
  IF sy-subrc = 0.
    v_job_name = lv_job_name.
    p_job   = lv_job_name.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*    SUBMIT zqtcr_subscrip_order_upload  WITH rb_crea  = rb_crea
*                                        WITH rb_cros  = rb_cros
*                                        WITH rb_modi  = rb_modi
*                                        WITH rb_sel_m = rb_sel_m
*                                        WITH rb_upd_m = rb_upd_m
*                                        WITH rb_crem = rb_crem
*                                        WITH rb_sel = rb_sel
*                                        WITH rb_upd = rb_upd
*                                        WITH rb_crcg = rb_crcg
*                                        WITH rb_sel1 =  rb_sel1
*                                        WITH rb_upd1 =  rb_upd1
*                                        WITH rb_or_ct =  rb_or_ct
*                                        WITH rb_or_cn = rb_or_cn
*                                        WITH rb_sel2 = rb_sel2
*                                        WITH rb_upd2 = rb_upd2
*                                        WITH s_date IN s_date
*                                        WITH s_vbeln IN s_vbeln
*                                        WITH s_bstnk  IN s_bstnk
*                                        WITH s_userid IN s_userid
*                                        WITH s_invo IN s_invo
*                                        WITH s_doc  IN s_doc
*                                        WITH s_inv  IN s_inv
*                                        WITH s_cmr  IN s_cmr
*                                        WITH s_bstnk1 IN s_bstnk1
*                                        WITH s_promo  IN s_promo
*                                        WITH s_matnr  IN s_matnr
*                                        WITH s_crd_by IN s_crd_by
*                                        WITH s_ord_dt IN s_ord_dt
*                                        WITH s_order  IN s_order
*                                        WITH s_bstnk2 IN s_bstnk2
*                                        WITH s_promo1 IN s_promo1
*                                        WITH s_matnr1 IN s_matnr1
*                                        WITH s_user1  IN s_user1
*                                        WITH p_file  = p_file
**                                        WITH p_a_file = v_fpath      " NPOLINA  ED2K913574 ERP7614
*                                        WITH p_a_file = v_path_fname  " NPOLINA  ED2K913574 ERP7614
*                                        WITH p_job    = p_job
*                                        WITH p_userid = sy-uname
*                                        USER  'QTC_BATCH01'
*                                        VIA JOB lv_job_name NUMBER lv_job_number
*                                        AND RETURN.
    SUBMIT zqtcr_subscrip_order_upload_v1  WITH rb_crea  = rb_crea
                                        WITH rb_cros  = rb_cros
                                        WITH rb_modi  = rb_modi
                                        WITH rb_sel_m = rb_sel_m
                                        WITH rb_upd_m = rb_upd_m
                                        WITH rb_crem = rb_crem
                                        WITH rb_sel = rb_sel
                                        WITH rb_upd = rb_upd
                                        WITH rb_crcg = rb_crcg
                                        WITH rb_sel1 =  rb_sel1
                                        WITH rb_upd1 =  rb_upd1
                                        WITH rb_or_ct =  rb_or_ct
                                        WITH rb_or_cn = rb_or_cn
                                        WITH rb_sel2 = rb_sel2
                                        WITH rb_upd2 = rb_upd2
                                        WITH s_date IN s_date
                                        WITH s_vbeln IN s_vbeln
                                        WITH s_bstnk  IN s_bstnk
                                        WITH s_userid IN s_userid
                                        WITH s_invo IN s_invo
                                        WITH s_doc  IN s_doc
                                        WITH s_inv  IN s_inv
                                        WITH s_cmr  IN s_cmr
                                        WITH s_bstnk1 IN s_bstnk1
                                        WITH s_promo  IN s_promo
                                        WITH s_matnr  IN s_matnr
                                        WITH s_crd_by IN s_crd_by
                                        WITH s_ord_dt IN s_ord_dt
                                        WITH s_order  IN s_order
                                        WITH s_bstnk2 IN s_bstnk2
                                        WITH s_promo1 IN s_promo1
                                        WITH s_matnr1 IN s_matnr1
                                        WITH s_user1  IN s_user1
                                        WITH p_file  = p_file
*                                        WITH p_a_file = v_fpath      " NPOLINA  ED2K913574 ERP7614
                                        WITH p_a_file = v_path_fname  " NPOLINA  ED2K913574 ERP7614
                                        WITH p_job    = p_job
                                        WITH p_userid = sy-uname
                                        WITH p_devid  = p_devid   " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        WITH p_v_oid  = v_oid     " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        USER  'QTC_BATCH01'
                                        VIA JOB lv_job_name NUMBER lv_job_number
                                        AND RETURN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

** close the background job for successor jobs
    CALL FUNCTION 'JOB_CLOSE'
      EXPORTING
        jobname              = lv_job_name
        jobcount             = lv_job_number
        predjob_checkstat    = lv_pre_chk
        sdlstrtdt            = sy-datum
        sdlstrttm            = sy-uzeit
      EXCEPTIONS
        cant_start_immediate = 01
        invalid_startdate    = 02
        jobname_missing      = 03
        job_close_failed     = 04
        job_nosteps          = 05
        job_notex            = 06
        lock_failed          = 07
        OTHERS               = 08.
    IF sy-subrc = 0.

    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF sy-subrc = 0
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_READ_FROM_APP_CRDT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_read_from_app_crdt .
  DATA : lv_string         TYPE string,
         lv_fkimg          TYPE char13, " Fkimg of type CHAR13
         lv_kbetr          TYPE char11, " Kbetr of type CHAR11
         lv_kbetr2         TYPE char11, " Kbetr2 of type CHAR11
         lv_kbetr3         TYPE char11, " Kbetr3 of type CHAR11
         lv_tax1           TYPE char11, " Tax of type CHAR11   " NPOLINA ERP7763
         lst_crdt_memo_crt TYPE ty_crdt_memo_crt.

  OPEN DATASET p_a_file FOR INPUT IN TEXT MODE ENCODING DEFAULT. " Set as Ready for Input
  IF sy-subrc NE 0.
    MESSAGE e100(zqtc_r2). " File does not transfer to Application server
    LEAVE LIST-PROCESSING.
  ENDIF. " IF sy-subrc NE 0

  DO.
    READ DATASET p_a_file INTO lv_string.
    IF sy-subrc EQ 0.
      SPLIT lv_string AT '|' INTO lst_crdt_memo_crt-sel
                                  lst_crdt_memo_crt-customer
                                  lst_crdt_memo_crt-parvw
                                  lst_crdt_memo_crt-partner
                                  lst_crdt_memo_crt-vkorg
                                  lst_crdt_memo_crt-vtweg
                                  lst_crdt_memo_crt-spart
                                  lst_crdt_memo_crt-auart
                                  lst_crdt_memo_crt-xblnr
                                  lst_crdt_memo_crt-zlsch
                                  lst_crdt_memo_crt-augru
                                  lst_crdt_memo_crt-vbeln
                                  lst_crdt_memo_crt-posnr
                                  lst_crdt_memo_crt-matnr
                                  lst_crdt_memo_crt-plant
                                  lv_fkimg
                                  lst_crdt_memo_crt-stxh
                                  lst_crdt_memo_crt-kschl
                                  lv_kbetr
                                  lst_crdt_memo_crt-kschl2
                                  lv_kbetr2
                                  lst_crdt_memo_crt-kschl3
                                  lv_kbetr3
                                  lst_crdt_memo_crt-ihrez
                                  lst_crdt_memo_crt-kdkg3
                                  lst_crdt_memo_crt-vkbur
                                  lst_crdt_memo_crt-bstnk
                                  lst_crdt_memo_crt-bsark
                                  lst_crdt_memo_crt-pstyv
                                  lv_tax1.       " NPOLINA ERP7763

      MOVE lv_fkimg  TO lst_crdt_memo_crt-fkimg.
      MOVE lv_kbetr  TO lst_crdt_memo_crt-kbetr.
      MOVE lv_kbetr2 TO lst_crdt_memo_crt-kbetr2.
      MOVE lv_kbetr3 TO lst_crdt_memo_crt-kbetr3.
      MOVE lv_tax1 TO lst_crdt_memo_crt-tax.     " NPOLINA ERP7763

      APPEND lst_crdt_memo_crt TO i_final_crme_crt.
      CLEAR  lst_crdt_memo_crt.
    ELSE. " ELSE -> IF sy-subrc EQ 0
      EXIT.
    ENDIF. " IF sy-subrc EQ 0
  ENDDO.
  CLOSE DATASET p_a_file.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_READ_FROM_APP_CRDTCH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_read_from_app_crdtch .
  DATA : lv_string         TYPE string,
         lv_fkimg          TYPE char13, " Fkimg of type CHAR13
         lv_kbetr          TYPE char11, " Kbetr of type CHAR11
         lst_crdt_memo_enh TYPE ty_crdt_memo_enh.

  OPEN DATASET p_a_file FOR INPUT IN TEXT MODE ENCODING DEFAULT. " Set as Ready for Input
  IF sy-subrc NE 0.
    MESSAGE e100(zqtc_r2). " File does not transfer to Application server
    LEAVE LIST-PROCESSING.
  ENDIF. " IF sy-subrc NE 0

  DO.
    READ DATASET p_a_file INTO lv_string.
    IF sy-subrc EQ 0.
      SPLIT lv_string AT '|' INTO lst_crdt_memo_enh-sel
                                  lst_crdt_memo_enh-customer
                                  lst_crdt_memo_enh-parvw
                                  lst_crdt_memo_enh-partner
                                  lst_crdt_memo_enh-vkorg
                                  lst_crdt_memo_enh-vtweg
                                  lst_crdt_memo_enh-spart
                                  lst_crdt_memo_enh-auart
                                  lst_crdt_memo_enh-xblnr
                                  lst_crdt_memo_enh-zlsch
                                  lst_crdt_memo_enh-augru
                                  lst_crdt_memo_enh-vbeln
                                  lst_crdt_memo_enh-posnr
                                  lst_crdt_memo_enh-matnr
                                  lst_crdt_memo_enh-plant
                                  lv_fkimg
                                  lst_crdt_memo_enh-stxh
                                  lst_crdt_memo_enh-kschl
                                  lv_kbetr
                                  lst_crdt_memo_enh-ihrez
                                  lst_crdt_memo_enh-kdkg3
                                  lst_crdt_memo_enh-vkbur
                                  lst_crdt_memo_enh-bstnk
                                  lst_crdt_memo_enh-bsark
                                  lst_crdt_memo_enh-pstyv.

      MOVE lv_fkimg  TO lst_crdt_memo_enh-fkimg.
      MOVE lv_kbetr  TO lst_crdt_memo_enh-kbetr.

      APPEND lst_crdt_memo_enh TO i_final_crdt.
      CLEAR  lst_crdt_memo_enh.
    ELSE. " ELSE -> IF sy-subrc EQ 0
      EXIT.
    ENDIF. " IF sy-subrc EQ 0
  ENDDO.
  CLOSE DATASET p_a_file.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_READ_FROM_APP_ORD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_read_from_app_ord .
  DATA : lv_string   TYPE string,
         lst_ord_alv TYPE ty_ord_alv.

  OPEN DATASET p_a_file FOR INPUT IN TEXT MODE ENCODING DEFAULT. " Set as Ready for Input
  IF sy-subrc NE 0.
    MESSAGE e100(zqtc_r2). " File does not transfer to Application server
    LEAVE LIST-PROCESSING.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ELSE.
*   Adding Success Messages.
    MESSAGE s303(zqtc_r2) WITH p_v_oid.  " Unique ID "&1" is assigned for this file upload.
    MESSAGE s000(zqtc_r2) WITH 'Application File'(123)
                               p_a_file+0(23) p_a_file+23(50) p_a_file+73.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  ENDIF. " IF sy-subrc NE 0

  DO.
    READ DATASET p_a_file INTO lv_string.
    IF sy-subrc EQ 0.
      SPLIT lv_string AT '|' INTO lst_ord_alv-sel
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
                                  lst_ord_alv-identifier
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
                                  lst_ord_alv-customer
                                  lst_ord_alv-parvw
                                  lst_ord_alv-partner
                                  lst_ord_alv-vkorg
                                  lst_ord_alv-vtweg
                                  lst_ord_alv-spart
                                  lst_ord_alv-guebg
                                  lst_ord_alv-gueen
                                  lst_ord_alv-augru
                                  lst_ord_alv-matnr
                                  lst_ord_alv-plant
                                  lst_ord_alv-vbeln
                                  lst_ord_alv-posnr
                                  lst_ord_alv-pstyv
                                  lst_ord_alv-kwmeng
                                  lst_ord_alv-xblnr
                                  lst_ord_alv-zlsch
                                  lst_ord_alv-lifsk
                                  lst_ord_alv-faksk
                                  lst_ord_alv-abgru
                                  lst_ord_alv-auart
                                  lst_ord_alv-bstnk
                                  lst_ord_alv-stxh
                                  lst_ord_alv-kschl
                                  lst_ord_alv-kbetr
                                  lst_ord_alv-ihrez
                                  lst_ord_alv-ihrez_e
                                  lst_ord_alv-zzpromo
                                  lst_ord_alv-kdkg4
                                  lst_ord_alv-kdkg5
                                  lst_ord_alv-kdkg3
                                  lst_ord_alv-srid
                                  lst_ord_alv-vkbur
* BOC by Thilina on 09/30/2020 for OTCM-4390 with ED2K919734 *
                                  lst_ord_alv-bsark
* EOC by Thilina on 09/30/2020 for OTCM-4390 with ED2K919734 *
* BOC by Thilina on 09/23/2020 for OTCM-4390 with ED2K919600 *
                                  lst_ord_alv-kdkg2
* EOC by Thilina on 09/23/2020 for OTCM-4390 with ED2K919600 *
* SOC by NPOLINA ERPM2334
                                  lst_ord_alv-fkdat     "OTCM-52926
                                  lst_ord_alv-bp_email
                                  lst_ord_alv-zlogno
                                  lst_ord_alv-msgty
                                  lst_ord_alv-msgv1
                                  lst_ord_alv-log_handle
                                  lst_ord_alv-zoid.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*                                  lst_ord_alv-identifier.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv-zoid
        IMPORTING
          output = lst_ord_alv-zoid.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_ord_alv-identifier
        IMPORTING
          output = lst_ord_alv-identifier.

* EOC by NPOLINA ERPM2334
      APPEND lst_ord_alv TO i_ord_alv.
      CLEAR  lst_ord_alv.
    ELSE. " ELSE -> IF sy-subrc EQ 0
      EXIT.
    ENDIF. " IF sy-subrc EQ 0
  ENDDO.
  CLOSE DATASET p_a_file.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SEND_LOG_EMAIL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_send_log_email.
  DATA: lv_con_cret TYPE c  VALUE cl_abap_char_utilities=>cr_lf, " Con_cret of type Character
        lst_message TYPE solisti1.                               " SAPoffice: Single List with Column Length 255

  CONCATENATE text-067 text-068 text-069 text-070 text-071 text-072 text-073
  text-074 text-075  INTO i_attach SEPARATED BY ','.
  CONCATENATE lv_con_cret i_attach INTO i_attach.
  APPEND  i_attach.


  LOOP AT i_err_msg_list INTO DATA(lst_err_msg).
    CONCATENATE lst_err_msg-wbeln lst_err_msg-msgid lst_err_msg-msgty lst_err_msg-msgno lst_err_msg-natxt lst_err_msg-msgv1 lst_err_msg-msgv2
    lst_err_msg-msgv3 lst_err_msg-msgv4
    INTO i_attach SEPARATED BY ','.
    CONCATENATE lv_con_cret i_attach INTO i_attach.
    APPEND  i_attach.
  ENDLOOP. " LOOP AT i_err_msg_list INTO DATA(lst_err_msg)

**- Populate message body text
*  CLEAR i_message.   REFRESH i_message.
*  lst_message = text-078. "Dear Wiley Customer,Please find Attachmen
*  APPEND lst_message TO i_message.
*  CLEAR lst_message.
*  APPEND lst_message TO i_message.
*  CLEAR lst_message.

  v_job_name = p_job.

*- Populate message body text
*  CONCATENATE 'JOB NAME:' v_job_name INTO lst_message SEPARATED BY space.
*  APPEND lst_message TO i_message.
*  CLEAR lst_message.
*  APPEND lst_message TO i_message.
*  CLEAR lst_message.
*
*  lst_message = text-079. "** Please do not reply to this email, as we are unable to respond from this address
*  APPEND lst_message TO i_message.
*  CLEAR lst_message.
*  APPEND lst_message TO i_message.
*  CLEAR lst_message.

*- Send file by email as .xls speadsheet
  PERFORM f_send_csv_xls_log.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SEND_CSV_XLS_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_send_csv_xls_log .
  DATA: lst_xdocdata    LIKE sodocchgi1,                           " Data of an object which can be changed
        lst_message     TYPE  solisti1,
        lv_xcnt         TYPE i,                                    " Xcnt of type Integers
        lv_file_name    TYPE char100,                              " File_name of type CHAR100
        lst_usr21       TYPE usr21,                                " User Name/Address Key Assignment
        lst_adr6        TYPE adr6,                                 " E-Mail Addresses (Business Address Services)
        li_packing_list LIKE sopcklsti1 OCCURS 0 WITH HEADER LINE, "Itab to hold packing list for email
        li_receivers    LIKE somlreci1 OCCURS 0 WITH HEADER LINE,  "Itab to hold mail receipents
        li_attachment   LIKE solisti1 OCCURS 0 WITH HEADER LINE,   " SAPoffice: Single List with Column Length 255
        lv_n            TYPE i,                                    " N of type Integers
        lv_desc         TYPE so_obj_des.                           " Short description of contents
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
  CONCATENATE sy-sysid text-082 v_job_name 'Log' INTO lv_desc SEPARATED BY '_'.
*- Fill the document data.
  lst_xdocdata-doc_size = 1.

*- Populate the subject/generic message attributes
  lst_xdocdata-obj_langu = sy-langu.
  lst_xdocdata-obj_name  = 'SAPRPT'.
  lst_xdocdata-obj_descr = lv_desc.
*- Populate message body text
  CLEAR i_message.   REFRESH i_message.
  lst_message = text-078. "Dear Wiley Customer,Please find Attachmen
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.

*- Populate message body text
  CONCATENATE 'JOB NAME:' v_job_name INTO lst_message SEPARATED BY space.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.

  lst_message = text-089.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  lst_message = text-080.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  lst_message = text-081.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
*- Fill the document data and get size of attachment
  CLEAR lst_xdocdata.
  DESCRIBE TABLE i_attach LINES lv_xcnt.
  lst_xdocdata-doc_size =
     ( lv_xcnt - 1 ) * 255 + strlen( i_attach ).
  lst_xdocdata-obj_langu  = sy-langu.
  lst_xdocdata-obj_name   = 'SAPRPT'.
  lst_xdocdata-obj_descr  = lv_desc.
  CLEAR li_attachment[].
  li_attachment[] = i_attach[].
*  EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
*- Describe the body of the message
  CLEAR li_packing_list.
  li_packing_list-transf_bin = space.
  li_packing_list-head_start = 1.
  li_packing_list-head_num = 0.
  li_packing_list-body_start = 1.
  DESCRIBE TABLE i_message LINES li_packing_list-body_num.
  li_packing_list-doc_type = 'RAW'.
  APPEND li_packing_list.
  IF i_attach[] IS NOT INITIAL.
    lv_n = 1.
*- Create attachment notification
    li_packing_list-transf_bin = abap_true.
    li_packing_list-head_start = 1.
    li_packing_list-head_num   = 1.
    li_packing_list-body_start = lv_n.

    DESCRIBE TABLE i_attach LINES li_packing_list-body_num.
    CLEAR lv_file_name .
    CONCATENATE 'ZORDER_UPD' sy-datum sy-uzeit  INTO lv_file_name SEPARATED BY '_'.
    CONCATENATE lv_file_name '.CSV' INTO lv_file_name.
    li_packing_list-doc_type   =  'CSV'.
    li_packing_list-obj_descr  =  lv_file_name. "p_attdescription.
    li_packing_list-obj_name   =  lv_file_name. "'CMR'."p_filename.
    li_packing_list-doc_size   =  li_packing_list-body_num * 255.
    APPEND li_packing_list.
  ENDIF. " IF i_attach[] IS NOT INITIAL

  CLEAR : lst_usr21,lst_adr6.
  SELECT SINGLE * FROM usr21 INTO lst_usr21 WHERE bname = p_userid.
  IF lst_usr21 IS NOT INITIAL.
    SELECT SINGLE * FROM adr6 INTO lst_adr6 WHERE addrnumber = lst_usr21-addrnumber
                                            AND   persnumber = lst_usr21-persnumber.
  ENDIF. " IF lst_usr21 IS NOT INITIAL
*- Add the recipients email address
  CLEAR li_receivers.
  li_receivers-receiver = lst_adr6-smtp_addr.
  li_receivers-rec_type = 'U'.
  li_receivers-com_type = 'INT'.
  li_receivers-notif_del = abap_true.
  li_receivers-notif_ndel = abap_true.
  APPEND li_receivers.

  CALL FUNCTION 'SO_DOCUMENT_SEND_API1'
    EXPORTING
      document_data              = lst_xdocdata
      put_in_outbox              = abap_true
      commit_work                = abap_true
    TABLES
      packing_list               = li_packing_list
      contents_bin               = li_attachment
      contents_txt               = i_message
      receivers                  = li_receivers
    EXCEPTIONS
      too_many_receivers         = 1
      document_not_sent          = 2
      document_type_not_exist    = 3
      operation_no_authorization = 4
      parameter_error            = 5
      x_error                    = 6
      enqueue_error              = 7
      OTHERS                     = 8.
  IF sy-subrc NE 0.
    MESSAGE text-083 TYPE 'E'. "Error in sending Email
  ELSE. " ELSE -> IF sy-subrc NE 0
    MESSAGE text-084 TYPE 'S'. "Email sent with Success log file
  ENDIF. " IF sy-subrc NE 0

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SEND_EMAIL_MOVE_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_send_email_move_file .

  DATA:
    lv_dirtemp   TYPE btcxpgpar,                               " Parameters of external program (string)
    lv_path      TYPE btcxpgpar,                               " Parameters of external program (string)
    lv_directory TYPE btcxpgpar,                               " Parameters of external program (string)                          " Directory of Files
    li_exec_move TYPE STANDARD TABLE OF btcxpm INITIAL SIZE 0. " Log message from external program to calling program

  IF p_a_file IS NOT INITIAL.
    lv_path = p_a_file.
    READ TABLE i_err_msg TRANSPORTING NO FIELDS WITH KEY msgty = c_e.
    IF sy-subrc = 0.
      REPLACE ALL OCCURRENCES OF '/E101/in' IN lv_path WITH '/E101/err'.
    ELSE. " ELSE -> IF sy-subrc = 0
      REPLACE ALL OCCURRENCES OF '/E101/in' IN lv_path WITH '/E101/prc'.
    ENDIF. " IF sy-subrc = 0

    i_err_msg1 = i_err_msg.
    PERFORM transfer_add_error_msg IN PROGRAM saplwlf5
      TABLES i_err_msg1 i_err_msg_list.
    IF p_devid NE c_e225.                 "NPOLINA ERPM2334 05/Dec/2019
      PERFORM f_send_log_email.
    ELSE.
      PERFORM f_send_email_e225.
    ENDIF.                                "NPOLINA ERPM2334 05/Dec/2019
    lv_dirtemp = p_a_file.
    CONCATENATE lv_dirtemp
                lv_path
          INTO lv_directory
          SEPARATED BY space.

    CALL FUNCTION 'SXPG_COMMAND_EXECUTE'
      EXPORTING
        commandname                   = 'ZSSPMOVE'
        additional_parameters         = lv_directory
      TABLES
        exec_protocol                 = li_exec_move
      EXCEPTIONS
        no_permission                 = 1
        command_not_found             = 2
        parameters_too_long           = 3
        security_risk                 = 4
        wrong_check_call_interface    = 5
        program_start_error           = 6
        program_termination_error     = 7
        x_error                       = 8
        parameter_expected            = 9
        too_many_parameters           = 10
        illegal_command               = 11
        wrong_asynchronous_parameters = 12
        cant_enq_tbtco_entry          = 13
        jobcount_generation_error     = 14
        OTHERS                        = 15.
*    IF sy-subrc IS INITIAL.
    IF sy-subrc IS NOT INITIAL.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF. " IF sy-subrc IS INITIAL
    CLEAR: li_exec_move[],
           lv_directory,
           lv_dirtemp.
  ENDIF. " IF p_a_file IS NOT INITIAL

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SEND_NOTIFICATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_send_notification .
  DATA: lst_xdocdata    LIKE sodocchgi1,                           " Data of an object which can be changed
        lst_message     TYPE solisti1,
        lv_xcnt         TYPE i,                                    " Xcnt of type Integers
        lv_file_name    TYPE char100,                              " File_name of type CHAR100
        lst_usr21       TYPE usr21,                                " User Name/Address Key Assignment
        lst_adr6        TYPE adr6,                                 " E-Mail Addresses (Business Address Services)
        li_packing_list LIKE sopcklsti1 OCCURS 0 WITH HEADER LINE, "Itab to hold packing list for email
        li_receivers    LIKE somlreci1 OCCURS 0 WITH HEADER LINE,  "Itab to hold mail receipents
        li_attachment   LIKE solisti1 OCCURS 0 WITH HEADER LINE,   " SAPoffice: Single List with Column Length 255
        lv_n            TYPE i,                                    " N of type Integers
        lv_desc         TYPE so_obj_des.                           " Short description of contents

*  lv_desc = text-082.

  CONCATENATE sy-sysid text-082 v_job_name 'Log' INTO lv_desc SEPARATED BY '_'.
*- Fill the document data.
  lst_xdocdata-doc_size = 1.

*- Populate the subject/generic message attributes
  lst_xdocdata-obj_langu = sy-langu.
  lst_xdocdata-obj_name  = 'SAPRPT'.
  lst_xdocdata-obj_descr = lv_desc.
*- Populate message body text
  CLEAR i_message.   REFRESH i_message.
  lst_message = text-078.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.


*- Populate message body text
  CONCATENATE text-079 v_job_name INTO lst_message SEPARATED BY space.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.

  CONCATENATE text-090 p_file INTO lst_message SEPARATED BY ':'.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  CONCATENATE 'Date & Time' sy-datum sy-uzeit INTO lst_message SEPARATED BY ':'.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  lst_message = text-080.
  APPEND lst_message TO i_message.
  CLEAR lst_message.
  lst_message = text-081.
  APPEND lst_message TO i_message.
  CLEAR lst_message.

*- Describe the body of the message
  CLEAR li_packing_list.
  li_packing_list-transf_bin = space.
  li_packing_list-head_start = 1.
  li_packing_list-head_num = 0.
  li_packing_list-body_start = 1.
  DESCRIBE TABLE i_message LINES li_packing_list-body_num.
  li_packing_list-doc_type = 'RAW'.
  APPEND li_packing_list.
  CLEAR : lst_usr21,lst_adr6.
  p_userid = sy-uname.
  SELECT SINGLE * FROM usr21 INTO lst_usr21 WHERE bname = p_userid.
  IF lst_usr21 IS NOT INITIAL.
    SELECT SINGLE * FROM adr6 INTO lst_adr6 WHERE addrnumber = lst_usr21-addrnumber
                                            AND   persnumber = lst_usr21-persnumber.
    IF sy-subrc EQ 0.
*- Add the recipients email address
      CLEAR li_receivers.
      li_receivers-receiver = lst_adr6-smtp_addr.
      li_receivers-rec_type = 'U'.
      li_receivers-com_type = 'INT'.
      li_receivers-notif_del = abap_true.
      li_receivers-notif_ndel = abap_true.
      APPEND li_receivers.

      CALL FUNCTION 'SO_DOCUMENT_SEND_API1'
        EXPORTING
          document_data              = lst_xdocdata
          put_in_outbox              = abap_true
          commit_work                = abap_true
        TABLES
          packing_list               = li_packing_list
          contents_bin               = li_attachment
          contents_txt               = i_message
          receivers                  = li_receivers
        EXCEPTIONS
          too_many_receivers         = 1
          document_not_sent          = 2
          document_type_not_exist    = 3
          operation_no_authorization = 4
          parameter_error            = 5
          x_error                    = 6
          enqueue_error              = 7
          OTHERS                     = 8.
      IF sy-subrc NE 0.
        MESSAGE text-083 TYPE 'E'. "Error in sending Email
      ELSE. " ELSE -> IF sy-subrc NE 0
        MESSAGE text-084 TYPE 'S'. "Email sent with Success log file
      ENDIF. " IF sy-subrc NE 0
    ENDIF. "sy-subrc eq 0
  ENDIF. " IF lst_usr21 IS NOT INITIAL
  CLEAR : li_packing_list,li_attachment,i_message,li_receivers.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_FILE_PATH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_PATH  text
*      -->P_LV_FILENAME  text
*----------------------------------------------------------------------*
FORM f_get_file_path  USING   fp_lv_filename.
  DATA : lv_path         TYPE filepath-pathintern . "NPOLINA ERP7614 ED2K913574
  DATA:lv_path_fname TYPE string.
  CLEAR : lv_path_fname,lv_path.
  lv_path = v_e101.
*--*Read file path from transaction FILE
  CALL FUNCTION 'FILE_GET_NAME_USING_PATH'
    EXPORTING
      client                     = sy-mandt
      logical_path               = lv_path
      operating_system           = sy-opsys
      file_name                  = fp_lv_filename
      eleminate_blanks           = c_x
    IMPORTING
      file_name_with_path        = lv_path_fname
    EXCEPTIONS
      path_not_found             = 1
      missing_parameter          = 2
      operating_system_not_found = 3
      file_system_not_found      = 4
      OTHERS                     = 5.
  IF sy-subrc <> 0.
    MESSAGE s001 DISPLAY LIKE c_e.
    LEAVE LIST-PROCESSING.
* SOC by NPOLINA E101 Paths  ED2K913574  ERP7614
  ELSE.
    v_path_fname = lv_path_fname.
  ENDIF.
* EOC by NPOLINA E101 Paths  ED2K913574  ERP7614
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_file .

***BOC BY SNGUTNUPAL for CR-7763 on 29-OCT-2018 in ED2K913722
  DATA: BEGIN OF lst_header OCCURS 0,
          lv_head(50) TYPE c, " Line(50) of type Character
        END OF lst_header.

  DATA: lst_final1    TYPE ty_crdt_memo_enh_down,
        i_final_crdt2 TYPE STANDARD TABLE OF  ty_crdt_memo_enh_down.

  DATA: li_strc   TYPE REF TO cl_abap_structdescr,
        li_comp   TYPE abap_component_tab,
        lst_comp  TYPE abap_componentdescr,
        lv_fname  TYPE string, "FILE NAME
        lv_fname2 TYPE string, "FILE NAME
        lv_path   TYPE string, "FILE PATH
        lv_fpath  TYPE string, "FULL FILE PATH.
        lst_eenh  TYPE ty_excel_enhanced,
        lst_eoenh TYPE ty_excel_ord_enhanced,
        lst_crm   TYPE ty_crdt_memo_crt,
        lst_crmc  TYPE ty_crdt_memo_enh,

* Begin by AMOHAMMED on 10/29/2020 TR # ED2K920134
* BOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
*        lst_dbmc  TYPE ty_dbt_memo_crt,
        lst_dbmc  TYPE ty_dbt_memo_excel,
* EOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
* End by AMOHAMMED on 10/29/2020 TR # ED2K920134
        lv_len    TYPE i,
        lv_ext(4) TYPE c.

  FIELD-SYMBOLS: <f_str>  TYPE any.
  CONSTANTS: c_zscr TYPE auart VALUE 'ZSCR'.

  IF sy-ucomm = c_fc01.
    IF rb_crea EQ abap_true OR
       rb_cros EQ abap_true OR
       rb_modi EQ abap_true.
      ASSIGN lst_eenh TO <f_str>.
    ELSEIF rb_crem EQ abap_true.
      ASSIGN lst_crm TO <f_str>.
    ELSEIF rb_crcg EQ abap_true.
      ASSIGN lst_crmc TO <f_str>.
* Begin by AMOHAMMED on 10/29/2020 TR # ED2K920134
    ELSEIF rb_dm_cr EQ abap_true.
      ASSIGN lst_dbmc TO <f_str>.
* End by AMOHAMMED on 10/29/2020 TR # ED2K920134
    ELSEIF rb_or_ct EQ abap_true OR
           rb_or_cn  EQ abap_true.
      ASSIGN lst_eoenh TO <f_str>.
    ENDIF.

* Get the structure of the table.
    li_strc ?= cl_abap_typedescr=>describe_by_data( <f_str> ).
    li_comp = li_strc->get_components( ).

    DELETE li_comp WHERE name = 'SEL'.

    LOOP AT li_comp INTO lst_comp.

      IF lst_comp-name =  c_custo.
        lst_header-lv_head = text-009.
      ELSEIF lst_comp-name = c_parvw.
        lst_header-lv_head = text-011.
      ELSEIF lst_comp-name = c_kunnr.
        lst_header-lv_head = text-050.
      ELSEIF lst_comp-name = c_vkorg.
        lst_header-lv_head = text-025.
      ELSEIF lst_comp-name = c_vtweg.
        lst_header-lv_head = text-026.
      ELSEIF lst_comp-name = c_spart.
        lst_header-lv_head = text-027.
      ELSEIF lst_comp-name = c_guebg.
        lst_header-lv_head = text-015.
      ELSEIF lst_comp-name = c_gueen.
        lst_header-lv_head = text-016.
      ELSEIF lst_comp-name = c_posnr.
* Begin by AMOHAMMED on 10/29/2020 TR # ED2K920134
*        lst_header-lv_head = text-006.
        IF rb_dm_cr EQ abap_true.
          lst_header-lv_head = text-099.
        ELSE.
          lst_header-lv_head = text-006.
        ENDIF.
      ELSEIF lst_comp-name = c_posnr1.
        lst_header-lv_head = text-097.
* End by AMOHAMMED on 10/29/2020 TR # ED2K920134
      ELSEIF lst_comp-name = c_matnr.
        lst_header-lv_head = text-h04.
      ELSEIF lst_comp-name = c_plant.
        lst_header-lv_head = text-h10.
      ELSEIF lst_comp-name = c_vbeln.
        IF rb_crem EQ abap_true.
          lst_header-lv_head = text-t05.
          IF rb_ord EQ abap_true.           " Converted Orders
            lst_header-lv_head = text-038.
          ENDIF.
        ELSEIF rb_crcg EQ abap_true.
          lst_header-lv_head = text-t07.
* Begin by AMOHAMMED on 10/29/2020 TR # ED2K920134
        ELSEIF rb_dm_cr EQ abap_true.
          lst_header-lv_head = text-098.
* End by AMOHAMMED on 10/29/2020 TR # ED2K920134
        ELSE.
          lst_header-lv_head = text-h05.
        ENDIF.
      ELSEIF lst_comp-name = c_pstyv.
        lst_header-lv_head = text-017.
      ELSEIF lst_comp-name = c_zmeng.
        lst_header-lv_head = text-014.
      ELSEIF lst_comp-name = c_lifsk.
        lst_header-lv_head = text-020.
      ELSEIF lst_comp-name = c_faksk.
        lst_header-lv_head = text-004.
      ELSEIF lst_comp-name = c_kwmeng.
        lst_header-lv_head = text-t08.
      ELSEIF lst_comp-name = c_abgru.
        lst_header-lv_head = text-005.
      ELSEIF lst_comp-name = c_auart.
        lst_header-lv_head = text-023.
      ELSEIF lst_comp-name = c_xblnr.
        lst_header-lv_head = text-054.
      ELSEIF lst_comp-name = c_zlsch.
        lst_header-lv_head = text-061.
      ELSEIF lst_comp-name = c_bsark.
        lst_header-lv_head = text-058.
      ELSEIF lst_comp-name = c_bstn.
        lst_header-lv_head = text-024.
      ELSEIF lst_comp-name = c_stxh.
        lst_header-lv_head = text-032.
      ELSEIF lst_comp-name = c_kschl.
        IF rb_crem EQ abap_true.
          lst_header-lv_head = text-t03.
        ELSE.
          lst_header-lv_head = text-030.
        ENDIF.
      ELSEIF lst_comp-name = c_kbetr.
        IF rb_crem EQ abap_true OR rb_crcg EQ abap_true.
          lst_header-lv_head = text-t04.
        ELSE.
          lst_header-lv_head = text-031.
        ENDIF.
      ELSEIF lst_comp-name = c_ihrez.
        lst_header-lv_head = text-h06.
      ELSEIF lst_comp-name = c_ihreze.
        lst_header-lv_head = text-t09.
      ELSEIF lst_comp-name = c_zzpro.
        lst_header-lv_head = text-028.
      ELSEIF lst_comp-name = c_kdkg4.
        lst_header-lv_head = 'Free of Charge Reason code'.
      ELSEIF lst_comp-name = c_kdkg5.
        lst_header-lv_head = 'PQ Subscription Type'.
      ELSEIF lst_comp-name = c_kdkg3.
        IF rb_crem EQ abap_true.
          lst_header-lv_head = text-t06.
        ELSE.
          lst_header-lv_head = text-t06.
        ENDIF.
      ELSEIF lst_comp-name = c_srid.
        lst_header-lv_head = text-019.
      ELSEIF lst_comp-name = c_vkbur.
        lst_header-lv_head = text-063.
      ELSEIF lst_comp-name = c_fkdat.
        lst_header-lv_head = text-064.
      ELSEIF lst_comp-name = c_waerk.
        lst_header-lv_head = text-033.
      ELSEIF lst_comp-name = c_zuonr.
        lst_header-lv_head = text-035.
      ELSEIF lst_comp-name = c_invtx.
        lst_header-lv_head = text-037.
      ELSEIF lst_comp-name = c_augru.
        lst_header-lv_head = text-t01.
      ELSEIF lst_comp-name = c_fkimg.
* Begin by AMOHAMMED on 12/8/2020 TR # ED2K920719
*        lst_header-lv_head = text-t02.
        IF rb_dm_cr EQ abap_true.
          lst_header-lv_head = text-014.
        ELSE.
          lst_header-lv_head = text-t02.
        ENDIF.
      ELSEIF lst_comp-name = c_waers.
        lst_header-lv_head = text-105.
* End by AMOHAMMED on 12/8/2020 TR # ED2K920719
      ELSEIF lst_comp-name = c_kschl2.
        lst_header-lv_head = text-t03.
      ELSEIF lst_comp-name = c_kbetr2.
        lst_header-lv_head = text-t04.
      ELSEIF lst_comp-name = c_kschl3.
        lst_header-lv_head = text-t03.
      ELSEIF lst_comp-name = c_kbetr3.
        lst_header-lv_head = text-t04.
      ELSEIF lst_comp-name = c_tax.
        IF rb_ord EQ abap_true.
          lst_header-lv_head = text-040.
        ENDIF.
* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
      ELSEIF lst_comp-name = c_vaktsch.
        lst_header-lv_head = text-041.
      ELSEIF lst_comp-name = c_vasda.
        lst_header-lv_head = text-043.
      ELSEIF lst_comp-name = c_perio.
        lst_header-lv_head = text-045.
      ELSEIF lst_comp-name = c_autte.
        lst_header-lv_head = text-047.
      ELSEIF lst_comp-name = c_peraf.
        lst_header-lv_head = text-052.
* EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
* SOC by NPOLINA DM1913 28/June/2019 ED2K915483
      ELSEIF lst_comp-name = c_augru.
        IF rb_modi IS NOT INITIAL.
          lst_header-lv_head = text-t01.
        ENDIF.
* EOC by NPOLINA DM1913 28/June/2019 ED2K915483
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      ELSEIF lst_comp-name = c_kdkg2.
        lst_header-lv_head = text-056.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
      ELSEIF lst_comp-name = c_zzconstart.
        lst_header-lv_head = text-095.
      ELSEIF lst_comp-name = c_zzconend.
        lst_header-lv_head = text-096.
* EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*      ELSEIF lst_comp-name = c_vlaufk.
*        lst_header-lv_head = text-107.
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
      ELSEIF lst_comp-name =  c_vlaufz.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
*        lst_header-lv_head = text-108.
        lst_header-lv_head = text-111.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-108) according to the ED1 sequence with  ED2K924094  *
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* BOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
      ELSEIF lst_comp-name  = c_accref.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-109) according to the ED1 sequence with  ED2K924094  *
*        lst_header-lv_head  = text-109.
        lst_header-lv_head  = text-112.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-109) according to the ED1 sequence with  ED2K924094  *
      ELSEIF lst_comp-name  = c_identifier.
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-110) according to the ED1 sequence with  ED2K924094  *
        lst_header-lv_head  = text-113.
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-110) according to the ED1 sequence with  ED2K924094  *
* EOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
      ELSE.
        lst_header-lv_head = lst_comp-name.
      ENDIF.
      APPEND lst_header.
    ENDLOOP.

    IF lst_header[] IS NOT INITIAL.
      IF rb_crem EQ abap_true AND rb_ord EQ abap_true.
        FREE:i_final_crdt2[].
        lst_final1-auart = c_zscr.
        APPEND lst_final1 TO i_final_crdt2.
      ENDIF.

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
      IF rb_dm_cr = abap_true.
        PERFORM f_build_dbt_sample_data.
      ENDIF.
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *

      CALL METHOD cl_gui_frontend_services=>file_save_dialog
        EXPORTING
          default_extension = 'XLS'
          window_title      = 'Save dialog'
        CHANGING
          filename          = lv_fname
          path              = lv_path
          fullpath          = lv_fpath.
      IF sy-subrc <> 0.
        MESSAGE e000 WITH text-005.
      ENDIF.

      IF lv_fpath IS NOT INITIAL.
        lv_len = strlen( lv_fpath ).
        lv_len = lv_len - 4.
        lv_ext = lv_fpath+lv_len(4).
        CONCATENATE lv_fpath(lv_len) sy-datum sy-uzeit INTO lv_fpath SEPARATED BY '_' IN CHARACTER MODE.
        CONCATENATE lv_fpath lv_ext INTO lv_fpath IN CHARACTER MODE.

        IF rb_crem EQ abap_true AND rb_ord EQ abap_true.

          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              filename              = lv_fpath
              filetype              = 'ASC'
              write_field_separator = '|'
              header                = '00'
*             wk1_t_size            = 12
            TABLES
              data_tab              = i_final_crdt2[]
              fieldnames            = lst_header
            EXCEPTIONS
              OTHERS                = 22.
          IF sy-subrc <> 0.
            MESSAGE e000 WITH text-007.
          ENDIF. " IF sy-subrc <> 0

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
        ELSEIF rb_dm_cr = abap_true.

          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              filename              = lv_fpath
              filetype              = 'ASC'
              write_field_separator = '|'
              header                = '00'
*             wk1_t_size            = 12
            TABLES
              data_tab              = i_dbt_memo_excel[]
              fieldnames            = lst_header
            EXCEPTIONS
              OTHERS                = 22.
          IF sy-subrc <> 0.
            MESSAGE e000 WITH text-007.
          ENDIF. " IF sy-subrc <> 0
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
        ELSE.

          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              filename              = lv_fpath
              filetype              = 'ASC'
              write_field_separator = '|'
              header                = '00'
              wk1_t_size            = 15
            TABLES
              data_tab              = i_final[]
              fieldnames            = lst_header
            EXCEPTIONS
              OTHERS                = 22.
          IF sy-subrc <> 0.
            MESSAGE e000 WITH text-007.
          ENDIF. " IF sy-subrc <> 0
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
***EOC BY SNGUTNUPAL for CR-7763 on 29-OCT-2018 in ED2K913722
ENDFORM.

* SOC by NPOLINA ERP7763 ED2K913722 on 10-Dec-2018
*&---------------------------------------------------------------------*
*&      Form  F_ZSCR_CREDIT_MEMO_FINAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_C_ZSCR  text
*      <--P_I_FINAL_CRDT  text
*----------------------------------------------------------------------*
FORM f_zscr_credit_memo_final  USING    c_zsub TYPE auart
                               CHANGING fp_final_crdt TYPE tt_crdt_memo_enh.
  DATA : lc_posnr      TYPE posnr  VALUE '000000'. " Item number of the SD document

  DATA : lst_cred_memo TYPE ty_cred_memo.

  SELECT a~vbeln,
         a~auart,
         a~augru,
         a~vkorg,
         a~vtweg,
         a~spart,
         a~vkbur,
         a~bstnk,
         a~vgbel,
         a~ihrez,
         a~xblnr,
         a~zzpromo,
         b~posnr,
         b~matnr,
         b~pstyv,
         b~zmeng, " Target quantity in sales units
         c~posnr AS line_num,
         c~parvw, " Partner Function
         c~kunnr  " Customer Number

        INTO TABLE @DATA(li_cred_memo_temp)
        FROM vbak AS a
        INNER JOIN vbap AS b
        ON ( a~vbeln EQ b~vbeln )
        INNER JOIN vbpa AS c
        ON ( b~vbeln EQ c~vbeln
        AND ( b~posnr = c~posnr
           OR c~posnr = @lc_posnr ) )
           UP TO @p_count ROWS
        WHERE   a~erdat   IN @s_cdate
        AND     a~auart  EQ @c_zsub
        AND     a~vbeln   IN @s_cvbeln
        AND     a~vkbur   EQ @p_cvkbur
        .
*------------------------------------------------------------------
  IF sy-subrc IS INITIAL AND li_cred_memo_temp IS NOT INITIAL.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
    SORT li_cred_memo_temp BY vbeln posnr parvw line_num.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
*       No Actions
    SELECT vbeln,
           posnr,
           zlsch,
           bstkd,
           bsark,
           kdkg3 " Customer condition group 3
      INTO TABLE @DATA(li_vbkd)
      FROM vbkd  " Sales Document: Business Data
      FOR ALL ENTRIES IN @li_cred_memo_temp
      WHERE vbeln = @li_cred_memo_temp-vbeln
      AND  ( posnr = @li_cred_memo_temp-posnr
         OR  posnr = @lc_posnr ).
    IF sy-subrc = 0.
      SORT li_vbkd BY vbeln posnr.
    ENDIF. " IF sy-subrc = 0

    DATA : lst_cred_memo_temp LIKE LINE OF li_cred_memo_temp,
           lst_vbkd           LIKE LINE OF li_vbkd.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
    DATA(li_cred_memo_temp_copy) = li_cred_memo_temp.
    DATA: lst_cred_memo_temp_copy LIKE LINE OF li_cred_memo_temp.
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157

    LOOP AT li_cred_memo_temp INTO lst_cred_memo_temp.
*** BOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
      IF lst_cred_memo_temp-parvw = c_we.
        DATA(lv_tabix) = sy-tabix.
        lv_tabix = lv_tabix + 1.
        READ TABLE li_cred_memo_temp_copy INTO lst_cred_memo_temp_copy INDEX lv_tabix.
        IF sy-subrc = 0.
          IF ( lst_cred_memo_temp-vbeln = lst_cred_memo_temp_copy-vbeln )
          AND ( lst_cred_memo_temp-posnr = lst_cred_memo_temp_copy-posnr )
          AND ( lst_cred_memo_temp-parvw = lst_cred_memo_temp_copy-parvw )
          AND ( lst_cred_memo_temp-line_num NE lst_cred_memo_temp_copy-line_num )
          AND  lst_cred_memo_temp_copy-line_num NE lc_posnr.
            CONTINUE.
          ENDIF. " IF ( lst_cred_memo_temp-vbeln = lst_cred_memo_temp_copy-vbeln )
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF lst_cred_memo_temp-parvw = c_we
*** EOC BY SAYANDAS on 20-MAR-2018 for ERP-7157
      lst_cred_memo-vbeln = lst_cred_memo_temp-vbeln.
      lst_cred_memo-auart = c_zscr. "lst_cred_memo_temp-auart.
      lst_cred_memo-augru = lst_cred_memo_temp-augru.
      lst_cred_memo-vkorg = lst_cred_memo_temp-vkorg.
      lst_cred_memo-vtweg = lst_cred_memo_temp-vtweg.
      lst_cred_memo-spart = lst_cred_memo_temp-spart.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_cred_memo-vkbur = lst_cred_memo_temp-vkbur.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
      lst_cred_memo-bstnk = lst_cred_memo_temp-bstnk.
      lst_cred_memo-vgbel = lst_cred_memo_temp-vgbel.
      lst_cred_memo-ihrez = lst_cred_memo_temp-ihrez.
*   BOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_cred_memo-xblnr = lst_cred_memo_temp-xblnr.
*   EOC CR#498: 02-JUL-2017 : SAYANDAS: ED2K907081
      lst_cred_memo-zzpromo = lst_cred_memo_temp-zzpromo.
      lst_cred_memo-posnr = lst_cred_memo_temp-posnr.
      lst_cred_memo-matnr = lst_cred_memo_temp-matnr.
      lst_cred_memo-pstyv = lst_cred_memo_temp-pstyv.
      lst_cred_memo-zmeng = lst_cred_memo_temp-zmeng. " Target quantity in sales units
      lst_cred_memo-parvw = lst_cred_memo_temp-parvw. " Partner Function
      lst_cred_memo-kunnr = lst_cred_memo_temp-kunnr. " Customer Number

      READ TABLE  li_vbkd INTO lst_vbkd WITH KEY vbeln = lst_cred_memo_temp-vbeln
                                                 posnr = lst_cred_memo_temp-posnr
                                                 BINARY SEARCH.
      IF sy-subrc = 0.

        lst_cred_memo-zlsch = lst_vbkd-zlsch.
        lst_cred_memo-bstkd = lst_vbkd-bstkd.
        lst_cred_memo-bsark = lst_vbkd-bsark.
        lst_cred_memo-kdkg3 = lst_vbkd-kdkg3.

      ENDIF. " IF sy-subrc = 0

      APPEND lst_cred_memo TO i_cred_memo.
      CLEAR : lst_cred_memo, lst_cred_memo_temp, lst_vbkd.
    ENDLOOP. " LOOP AT li_cred_memo_temp INTO lst_cred_memo_temp
  ENDIF. " IF sy-subrc IS INITIAL AND li_cred_memo_temp IS NOT INITIAL


  SORT i_cred_memo    BY vbeln posnr parvw kunnr.
  PERFORM f_merge_into_final_alv USING i_cred_memo
                             CHANGING  fp_final_crdt.

ENDFORM.
* EOC by NPOLINA ERP7763 ED2K913722 on 10-Dec-2018
*&---------------------------------------------------------------------*
*&      Form  F_UPDATE_BILLPLAN_ZSBP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_update_billplan_zsbp  USING fp_vbeln       TYPE vbeln
                                   fp_fplnr       TYPE fplnr
                                   fp_perio       TYPE perio_fp
                                   fp_autte       TYPE autte
                                   fp_peraf       TYPE peraf_fp .
  FREE:i_bdcdata[],
       i_messtab[].
  PERFORM: f_bdc_dynpro      USING 'SAPMV45A' '0102',
           f_bdc_field       USING 'BDC_CURSOR'
                                 'VBAK-VBELN',
           f_bdc_field       USING 'BDC_OKCODE'
                                 '/00',
           f_bdc_field       USING 'VBAK-VBELN'
                                 fp_vbeln,
           f_bdc_dynpro      USING 'SAPMV45A' '4001',
           f_bdc_field       USING 'BDC_OKCODE'
                                 '=HEAD',

           f_bdc_field       USING 'BDC_CURSOR'
                                 'RV45A-MABNR(01)',
           f_bdc_dynpro      USING 'SAPMV45A' '4002',
           f_bdc_field       USING 'BDC_OKCODE'
                                 '=T\06',
           f_bdc_field       USING 'BDC_CURSOR'
                                 'VBAK-AUDAT',
           f_bdc_dynpro      USING 'SAPLV60F' '4001',
           f_bdc_field       USING 'BDC_OKCODE'
                                 '/00',
           f_bdc_field       USING 'BDC_CURSOR'
                                 'FPLA-PERIO'.
  IF fp_perio IS NOT INITIAL.
    PERFORM: f_bdc_field       USING 'FPLA-PERIO'
                                   fp_perio.
  ENDIF.

  IF fp_autte IS NOT INITIAL.
    PERFORM: f_bdc_field       USING 'FPLA-AUTTE'
                                   fp_autte.
  ENDIF.

  IF fp_peraf IS NOT INITIAL.
    PERFORM: f_bdc_field       USING 'FPLA-PERAF'
                                   fp_peraf.
  ENDIF.
  PERFORM: f_bdc_dynpro      USING 'SAPLV60F' '4001',
           f_bdc_field       USING 'BDC_OKCODE'
                                 '=S\BACK',
           f_bdc_field       USING 'BDC_CURSOR'
                                 'FPLA-PERIO',

           f_bdc_field       USING 'FPLA-AUTKOR'
                                 'X',
           f_bdc_dynpro      USING 'SAPMV45A' '4001',
           f_bdc_field       USING 'BDC_OKCODE'
                                 '=SICH',

           f_bdc_dynpro      USING 'SAPLSPO2' '0101',
           f_bdc_field       USING 'BDC_OKCODE'
                                 '=OPT1',
           f_bdc_transaction USING c_va42.

ENDFORM.

*----------------------------------------------------------------------*
*        Start new screen                                              *
*----------------------------------------------------------------------*
FORM f_bdc_dynpro USING program dynpro.
  DATA:lwa_bdcdata LIKE LINE OF i_bdcdata.
  CLEAR lwa_bdcdata.
  lwa_bdcdata-program  = program.
  lwa_bdcdata-dynpro   = dynpro.
  lwa_bdcdata-dynbegin = 'X'.
  APPEND lwa_bdcdata TO i_bdcdata.
ENDFORM.

*----------------------------------------------------------------------*
*        Insert field                                                  *
*----------------------------------------------------------------------*
FORM f_bdc_field USING fnam fval.
  DATA:lwa_bdcdata1 LIKE LINE OF i_bdcdata.
  IF fval IS NOT INITIAL.
    CLEAR lwa_bdcdata1.
    lwa_bdcdata1-fnam = fnam.
    lwa_bdcdata1-fval = fval.
    APPEND lwa_bdcdata1 TO i_bdcdata.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BDC_TRANSACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1698   text
*----------------------------------------------------------------------*
FORM f_bdc_transaction  USING    VALUE(fp_tcode).
  DATA:lv_mode     TYPE ctu_mode VALUE 'N',
       lv_upd      TYPE ctu_update VALUE 'S',
       lwa_messtab LIKE LINE OF i_messtab,
       lv_string   TYPE string.

  REFRESH i_messtab.
  CALL TRANSACTION fp_tcode USING i_bdcdata
                   MODE   lv_mode
                   UPDATE lv_upd
                   MESSAGES INTO i_messtab.

  LOOP AT i_messtab INTO lwa_messtab WHERE msgtyp = 'E' OR msgtyp = 'A'.
    MESSAGE ID     lwa_messtab-msgid
            TYPE   lwa_messtab-msgtyp
            NUMBER lwa_messtab-msgnr
            INTO lv_string
            WITH lwa_messtab-msgv1
                 lwa_messtab-msgv2
                 lwa_messtab-msgv3
                 lwa_messtab-msgv4.
  ENDLOOP.
  FREE:i_bdcdata[].
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_UPDATE_LOG_STAGING_E225
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_update_log_staging_e225 USING fp_loghandle TYPE balloghndl
                                     fp_vbeln TYPE vbeln
                                     fp_logno TYPE balognr.
  DATA:li_log_handle   TYPE bal_t_logh.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*  READ TABLE i_return INTO DATA(lst_return3) WITH KEY type = 'E'.
*  IF sy-subrc EQ 0.    "ERPM2334 ED2K918288
*    v_err = abap_true.
*  ENDIF.
*  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
  READ TABLE i_return INTO DATA(lst_return3) WITH KEY type = 'E'.
  IF sy-subrc EQ 0.    "ERPM2334 ED2K918288
    v_err = abap_true.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    READ TABLE i_return INTO lst_return3 WITH KEY type = 'A'.
    IF sy-subrc EQ 0.    "ERPM2334 ED2K918288
      v_err = abap_true.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
* Convert Log Number to Internal Format to update Logs Correctly
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = fp_logno
    IMPORTING
      output = fp_logno.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  IF fp_vbeln IS NOT INITIAL.
  ENDIF.
  DELETE ADJACENT DUPLICATES FROM i_return COMPARING type id number.
  LOOP AT i_return ASSIGNING FIELD-SYMBOL(<lfs_ret>).
    CLEAR:st_msg.
*      IF <lfs_ret>-type = c_s .
*        IF <lfs_ret>-id = 'V4' AND <lfs_ret>-number = '311'.
*        ELSE.
*          CONTINUE.
*        ENDIF.
*      ENDIF.
    st_msg-msgid = 'ZQTC_R2'.
    st_msg-msgno = '000'.
    st_msg-msgty = <lfs_ret>-type.
    st_msg-msgv1 = <lfs_ret>-message+0(50).
    st_msg-msgv2 = <lfs_ret>-message+50(50).
    st_msg-msgv3 = <lfs_ret>-message+100(50).
    IF fp_vbeln IS NOT INITIAL.
      LOOP AT i_e225_stage ASSIGNING FIELD-SYMBOL(<lfs_stage2>) WHERE zlogno = fp_logno.
        <lfs_stage2>-vbeln = fp_vbeln.
        <lfs_stage2>-zprcstat = c_d1. "'D1'. NPALLA ED2K924398 E101 OTCM-47267
      ENDLOOP.
      MODIFY ze225_staging FROM TABLE i_e225_stage.
* SOC by NPOLINA ERPM2334 ED2K918288
    ELSE.

      LOOP AT i_e225_stage ASSIGNING FIELD-SYMBOL(<lfs_stage3>) WHERE zlogno = fp_logno.
        <lfs_stage3>-vbeln = fp_vbeln.
        <lfs_stage3>-zprcstat = c_e2. "'E2'. NPALLA ED2K924398 E101 OTCM-47267
      ENDLOOP.
      MODIFY ze225_staging FROM TABLE i_e225_stage   .
* EOC by NPOLINA ERPM2334 ED2K918288
    ENDIF.
    APPEND fp_loghandle TO li_log_handle.
    CALL FUNCTION 'BAL_DB_LOAD'
      EXPORTING
        i_t_log_handle     = li_log_handle
      EXCEPTIONS
        no_logs_specified  = 1
        log_not_found      = 2
        log_already_loaded = 3
        OTHERS             = 4.
    IF sy-subrc <> 0.
    ENDIF.

    st_log_handle = fp_loghandle.
    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = st_log_handle
        i_s_msg          = st_msg
      EXCEPTIONS
        log_not_found    = 1
        msg_inconsistent = 2
        log_is_full      = 3
        OTHERS           = 4.

    IF sy-subrc EQ 0.
      APPEND st_log_handle TO st_loghandle.
      CALL FUNCTION 'BAL_DB_SAVE'
        EXPORTING
          i_client         = sy-mandt
*         i_in_update_task = ' '
          i_save_all       = abap_true
          i_t_log_handle   = st_loghandle
        IMPORTING
          e_new_lognumbers = i_lognum
        EXCEPTIONS
          log_not_found    = 1
          save_not_allowed = 2
          numbering_error  = 3
          OTHERS           = 4.
      IF sy-subrc EQ 0.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
      ENDIF.
    ENDIF.
  ENDLOOP.
*  ELSE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SEND_EMAIL_E225
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_send_email_e225.
  TYPES: BEGIN OF lty_email,
           mailto TYPE ad_smtpadr,
         END OF lty_email.
  DATA:
    lv_xls            TYPE so_obj_tp  VALUE 'xls',
    lv_htm            TYPE so_obj_tp  VALUE 'HTM',
    lv_sub            TYPE string,
    lv_mailto         TYPE ad_smtpadr,
    lv_status         TYPE val_text,
    lv_flag_exit      TYPE xchar,
    li_log_handle     TYPE bal_t_logh,
    li_log_numbers    TYPE bal_t_lgnm,
    lst_msg           TYPE bal_s_msg,
    lv_noofmsgs       TYPE i,
    lv_lncnt          TYPE i,
    li_msg            TYPE STANDARD TABLE OF bal_s_msg,
    lv_log_handle     TYPE balloghndl,
    lv_msg_handle     TYPE  balmsghndl,
    lst_text          TYPE so_text255,
    li_text           TYPE bcsy_text,
    lv_subject        TYPE sood-objdes,
    lv_subject2       TYPE sood-objdes,
    lv_binary_content TYPE solix_tab,
    lv_excel          TYPE string,
    lv_count          TYPE string,
    lv_hgt_cnt        TYPE string,
    lv_size           TYPE so_obj_len,
    lv_sent_to_all    TYPE os_boolean,
    lv_msgcnt         TYPE salv_de_selopt_low,
    lst_email         TYPE lty_email,
    li_email          TYPE STANDARD TABLE OF lty_email,
    lv_document       TYPE REF TO cl_document_bcs,
    bcs_exception     TYPE REF TO cx_bcs,
    lv_sender         TYPE REF TO cl_cam_address_bcs,
    lv_send_request   TYPE REF TO cl_bcs,
    lv_recipient      TYPE REF TO if_recipient_bcs,
    lt_dd07v_tab      TYPE STANDARD TABLE OF dd07v.

  FREE:lv_sub,         lv_log_handle,     lv_size,              li_msg,
       lv_mailto,      lv_msg_handle,     lv_sent_to_all,       lv_count,
       lv_status,      lst_text,          lv_document,          lv_hgt_cnt,
       lv_flag_exit,   li_text,           bcs_exception,        lt_dd07v_tab,
       li_log_handle,  lv_subject,        lv_sender,
       li_log_numbers, lv_binary_content, lv_send_request,
       lst_msg,        lv_excel,          lv_recipient.

  CONSTANTS: lc_msgcnt TYPE rvari_vnam  VALUE 'MSG_COUNT',
             lc_ep1    TYPE sy-sysid    VALUE 'EP1'.       "ED2K918020 NPOLINA E225

  IF rb_or_ct IS NOT INITIAL AND  p_devid EQ c_e225.
    LOOP AT i_ord_alv INTO DATA(lst_alv2).
      MOVE-CORRESPONDING lst_alv2 TO st_output_x.
      APPEND st_output_x TO i_output_x.
      CLEAR:st_output_x.
    ENDLOOP.
  ENDIF.

  IF i_output_x[] IS NOT INITIAL.
    LOOP AT i_output_x[] INTO DATA(lst_output).
      APPEND lst_output TO i_output_tmp.
    ENDLOOP.
    SORT i_output_tmp[] BY zoid identifier.
    DELETE ADJACENT DUPLICATES FROM i_output_tmp[] COMPARING  zoid identifier.
  ENDIF.

*---Email ID
  FREE: li_email,lst_email.

  CLEAR lst_email.
  CONCATENATE p_userid '@WILEY.COM' INTO lst_email-mailto.
  APPEND lst_email TO li_email.
  CLEAR lst_email.

  IF li_email IS NOT INITIAL.
*----email subject
    IF sy-sysid NE lc_ep1.  "NPOLINA E225 ED2K918020
      CONCATENATE sy-sysid 'BP and Order file status log for upload identifer'(094) p_v_oid INTO lv_sub SEPARATED BY space.
    ELSE.
      CONCATENATE 'BP and Order file status log for upload identifer'(094) p_v_oid INTO lv_sub SEPARATED BY space.
    ENDIF.

    CLEAR:lst_text.
    lst_text   = 'Dear User,'(078).
    APPEND lst_text TO li_text.
    CLEAR:lst_text.

    lst_text = '<br><br>'.
    APPEND lst_text TO li_text.
    CLEAR:lst_text.

    lst_text = '<body>'(093).
    APPEND lst_text TO li_text.
    CLEAR lst_text.

    CONCATENATE '<p style="font-family:arial;font-size:90%;"> Your order upload file is being processed through background job:'(092)
                 p_job  '</p>'(088)
                 INTO lst_text SEPARATED BY space.
    APPEND lst_text TO li_text.
    CLEAR lst_text.

    lst_text = space.
    APPEND lst_text TO li_text.
    CLEAR lst_text.

    CONCATENATE '<p style="font-family:arial;font-size:90%;">'(091)
             'File name :'(087) p_file '</p>'(088)
             INTO lst_text SEPARATED BY space.
    APPEND lst_text TO li_text.
    CLEAR lst_text.

    lst_text = space.
    APPEND lst_text TO li_text.
    CLEAR lst_text.

    lst_text = '<br><br>'.
    APPEND lst_text TO li_text.
    CLEAR:lst_text.

*---Body of the EMAIL
    CONCATENATE '<font color = "BLACK" style="font-family:arial;font-size:95%;">'(084) 'Thanks,'(080) '<br/>'(085)
    INTO lst_text.
    APPEND lst_text TO li_text.
    CLEAR lst_text.

    CONCATENATE  '<font color = "BLACK" style="font-family:arial;font-size:95%;">'(084) 'WILEY ERP Team.'(086) '<br/>'(085)
    INTO lst_text.
    APPEND lst_text TO li_text.
    CLEAR lst_text.

    lst_text = '</body>'(083).
    APPEND lst_text TO li_text.
    CLEAR lst_text.
    lv_subject2 = lv_sub.

    CLEAR:lv_sub.                "NPOLINA E225 ED2K918020
    CONCATENATE 'BP and Order log for identifier:' p_v_oid INTO lv_sub SEPARATED BY space.   "NPOLINA E225 ED2K918020

    IF i_output_tmp[] IS NOT INITIAL.
*---Staging table
      SELECT *
        FROM ze225_staging
        INTO TABLE @DATA(li_e225_staging)
        FOR ALL ENTRIES IN @i_output_tmp[]
        WHERE zuid_upld = @i_output_tmp-zoid
          AND zoid      = @i_output_tmp-identifier.
      IF li_e225_staging IS NOT INITIAL.
        SORT li_e225_staging BY zuid_upld zoid.
        LOOP AT i_output_tmp[] ASSIGNING FIELD-SYMBOL(<fst_output>).
          READ TABLE li_e225_staging INTO DATA(lst_e225_staging) WITH KEY zuid_upld = <fst_output>-zoid
                                                                          zoid      = <fst_output>-identifier.
          IF sy-subrc = 0.
            <fst_output>-vbeln = lst_e225_staging-vbeln.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.
*---total lines
    CLEAR lv_count.
    DESCRIBE TABLE i_output_tmp[] LINES lv_count.
    lv_count = lv_count + 20.
    CONDENSE lv_count.

    CONCATENATE
' <?xml version="1.0"?>'
' <?mso-application progid="Excel.Sheet"?>'
' <Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"'
' xmlns:o="urn:schemas-microsoft-com:office:office"'
' xmlns:x="urn:schemas-microsoft-com:office:excel"'
' xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"'
' xmlns:html="http://www.w3.org/TR/REC-html40">'
' <DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">'
' </DocumentProperties>'
' <OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office">'
' <AllowPNG/>'
' </OfficeDocumentSettings>'
' <ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">'
' <WindowHeight>8070</WindowHeight>'
' <WindowWidth>19365</WindowWidth>'
' <WindowTopX>32767</WindowTopX>'
' <WindowTopY>32767</WindowTopY>'
' <ProtectStructure>False</ProtectStructure>'
' <ProtectWindows>False</ProtectWindows>'
' </ExcelWorkbook>'
' <Styles>'
' <Style ss:ID="Default" ss:Name="Normal">'
' <Alignment ss:Vertical="Bottom"/>'
' <Borders/>'
' <Font ss:FontName="Calibri" x:Family="Swiss" ss:Size="11" ss:Color="#000000"/>'
' <Interior/>'
' <NumberFormat/>'
' <Protection/>'
' </Style>'
' <Style ss:ID="s63">'
' <Alignment ss:Vertical="Bottom" ss:WrapText="1"/>'
' </Style>'
' <Style ss:ID="s64">'
' <Font ss:FontName="Calibri" x:Family="Swiss" ss:Size="11" ss:Color="#000000"'
' ss:Bold="1"/>'
' <Interior ss:Color="#DBDBDB" ss:Pattern="Solid"/>'
' </Style>'
' </Styles>'
' <Worksheet ss:Name="Sheet1">'
' <Table ss:ExpandedColumnCount="14" ss:ExpandedRowCount="'lv_count'" x:FullColumns="1"'
' x:FullRows="1" ss:DefaultRowHeight="15">'
' <Column ss:Width="79.5"/>'
' <Column ss:Width="55.5"/>'
' <Column ss:Width="55.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'
' <Column ss:AutoFitWidth="0" ss:Width="320.25"/>'

' <Row>'
' <Cell ss:StyleID="s64"><Data ss:Type="String">Order Identifier</Data></Cell>'
' <Cell ss:StyleID="s64"><Data ss:Type="String">Status</Data></Cell>'
' <Cell ss:StyleID="s64"><Data ss:Type="String">Order</Data></Cell>'
' <Cell ss:StyleID="s64"><Data ss:Type="String">Log</Data></Cell>'
' </Row>'
      INTO lv_excel.
    CLEAR: lst_output,v_msgcnt.
    SELECT SINGLE low FROM zcaconstant INTO lv_msgcnt
      WHERE devid = c_e225 AND
            param1 = lc_msgcnt AND
            activate = abap_true.
    IF sy-subrc EQ 0.
      CONDENSE:lv_msgcnt NO-GAPS.
      v_msgcnt = lv_msgcnt.
    ENDIF.
    LOOP AT i_output_tmp[] INTO lst_output.
      CLEAR lv_status.
      IF lst_output-vbeln IS NOT INITIAL.
        lv_status = text-072.
      ELSE.
        lv_status = text-071.
      ENDIF.
*---Get the log data
      FREE:li_log_handle,lv_log_handle,lv_flag_exit,lv_msg_handle.
      lv_log_handle = lst_output-log_handle.   "LOG GUI ID
      APPEND lv_log_handle TO li_log_handle.
      IF li_log_handle IS NOT INITIAL.
        CALL FUNCTION 'BAL_DB_LOAD'
          EXPORTING
            i_t_log_handle     = li_log_handle
          EXCEPTIONS
            no_logs_specified  = 1
            log_not_found      = 2
            log_already_loaded = 3
            OTHERS             = 4.
        IF sy-subrc = 1.
          CONCATENATE 'No Log Specified'(070) lst_output-zlogno
          INTO DATA(lv_msg) SEPARATED BY space.
          MESSAGE lv_msg TYPE c_e.
        ELSEIF sy-subrc = 2.
          CLEAR lv_msg.
          CONCATENATE 'Log not found'(069) lst_output-zlogno
         INTO lv_msg SEPARATED BY space.
          MESSAGE lv_msg TYPE c_e.
        ELSEIF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ELSEIF sy-subrc = 0.
          CLEAR:lv_noofmsgs.
          WHILE lv_flag_exit IS INITIAL.
            CLEAR:lst_msg.
            lv_msg_handle-log_handle = lv_log_handle.
            lv_msg_handle-msgnumber  = lv_msg_handle-msgnumber + 1 .
            CALL FUNCTION 'BAL_LOG_MSG_READ'
              EXPORTING
                i_s_msg_handle = lv_msg_handle
              IMPORTING
                e_s_msg        = lst_msg
              EXCEPTIONS
                log_not_found  = 1
                msg_not_found  = 2
                OTHERS         = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here
              lv_flag_exit = abap_true.
            ELSEIF sy-subrc = 0.
              IF lst_msg IS NOT INITIAL .
                lv_lncnt = v_msgcnt.
                lv_noofmsgs = lv_noofmsgs + 1.
                IF lv_noofmsgs <= lv_lncnt.
                  CONCATENATE lv_message
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message).
                  APPEND lst_msg TO li_msg.
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 2 ).
                  CONCATENATE lv_message1
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message1).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 3 ).
                  CONCATENATE lv_message2
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message2).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 4 ).
                  CONCATENATE lv_message3
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message3).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 5 ).
                  CONCATENATE lv_message4
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message4).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 6 ).
                  CONCATENATE lv_message5
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message5).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 7 ).
                  CONCATENATE lv_message6
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message6).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 8 ).
                  CONCATENATE lv_message7
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message7).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 9 ).
                  CONCATENATE lv_message8
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message8).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 10 ).
                  CONCATENATE lv_message9
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message9).
                ELSEIF lv_noofmsgs > lv_lncnt  AND ( lv_noofmsgs <= lv_lncnt * 11 ).
                  CONCATENATE lv_message10
                              lst_msg-msgv1
                              lst_msg-msgv2
                              lst_msg-msgv3
                              lst_msg-msgv4
                              '&#10;'
                              INTO DATA(lv_message10).
                ENDIF.
              ENDIF.

              CLEAR lst_msg.
            ENDIF.
          ENDWHILE.
        ENDIF.
      ENDIF.
      sy-subrc = 0.
      FREE:lv_msg_handle,lv_msg_handle,lv_hgt_cnt,lv_lncnt.
      DESCRIBE TABLE li_msg LINES lv_hgt_cnt.
      lv_hgt_cnt = lv_hgt_cnt  * 30.
      CONDENSE: lv_hgt_cnt,
                lv_status,
                lst_output-identifier,
                lst_output-vbeln,
                lv_message.
      CONCATENATE  lv_excel
        ' <Row ss:Height="'lv_hgt_cnt'">'
        ' <Cell><Data ss:Type="String">'lst_output-identifier'</Data></Cell>'
        ' <Cell><Data ss:Type="String">'lv_status'</Data></Cell>'
        ' <Cell><Data ss:Type="String">'lst_output-vbeln'</Data></Cell>'
        ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message'</Data></Cell>'
        ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message1'</Data></Cell>'
        ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message2'</Data></Cell>'
        ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message3'</Data></Cell>'
          ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message4'</Data></Cell>'
          ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message5'</Data></Cell>'
          ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message6'</Data></Cell>'
          ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message7'</Data></Cell>'
          ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message8'</Data></Cell>'
          ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message9'</Data></Cell>'
          ' <Cell ss:StyleID="s63"><Data ss:Type="String">'lv_message10'</Data></Cell>'
        ' </Row>'
          INTO lv_excel.
      FREE:lv_message,li_msg,lst_msg,lv_noofmsgs,lv_message1,lv_message2,lv_message3,
      lv_message4,lv_message5,lv_message6,lv_message7,lv_message8,lv_message9,lv_message10.
    ENDLOOP.

    CONCATENATE lv_excel
  ' </Table>'
  ' <WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'
  ' <PageSetup>'
  ' <Header x:Margin="0.3"/>'
  ' <Footer x:Margin="0.3"/>'
  ' <PageMargins x:Bottom="0.75" x:Left="0.7" x:Right="0.7" x:Top="0.75"/>'
  ' </PageSetup>'
  ' <Selected/>'
  ' <TopRowVisible>1</TopRowVisible>'
  ' <Panes>'
  ' <Pane>'
  ' <Number>3</Number>'
  ' <ActiveRow>'lv_count'</ActiveRow>'
  ' <RangeSelection>R1:R1048576</RangeSelection>'
  ' </Pane>'
  ' </Panes>'
  ' <ProtectObjects>False</ProtectObjects>'
  ' <ProtectScenarios>False</ProtectScenarios>'
  ' </WorksheetOptions>'
  ' </Worksheet>'
  ' </Workbook>'
    INTO lv_excel.

    TRY.

        cl_bcs_convert=>string_to_solix(

        EXPORTING
          iv_string = lv_excel
          iv_codepage = '4103' "suitable for MS Excel, leave empty
          iv_add_bom  = abap_true  "for other doc types
        IMPORTING
          et_solix = lv_binary_content
          ev_size  = lv_size ).
      CATCH cx_bcs.
        MESSAGE e445(so).
    ENDTRY.
    LOOP AT li_email INTO lst_email.
      TRY.
* -------- create persistent send request ------------------------
          lv_send_request = cl_bcs=>create_persistent( ).
          CALL METHOD cl_cam_address_bcs=>create_internet_address
            EXPORTING
              i_address_string = 'no-reply@wiley.com'
              i_address_name   = 'SAP ERP Team'
            RECEIVING
              result           = lv_sender.
          lv_subject = lv_sub.
          CALL METHOD lv_send_request->set_sender
            EXPORTING
              i_sender = lv_sender.
* -------- create and set document with attachment ---------------
          lv_document = cl_document_bcs=>create_document(
                      i_type = lv_htm
                      i_text = li_text
                      i_subject = lv_subject2 ).            "#EC NOTEXT

* add the spread sheet as attachment to document object
          lv_document->add_attachment(
          i_attachment_type = lv_xls                        "#EC NOTEXT
          i_attachment_subject = lv_subject                 "#EC NOTEXT
*          i_attachment_subject = lv_subject                 "#EC NOTEXT
          i_attachment_size = lv_size
          i_att_content_hex = lv_binary_content ).

          TRY.
              CALL METHOD lv_send_request->set_message_subject
                EXPORTING
                  ip_subject = lv_sub.
            CATCH cx_send_req_bcs.
          ENDTRY.
* add document object to send request

          lv_send_request->set_document( lv_document ).

* --------- add recipient (e-mail address) -----------------------

* create recipient object

          lv_recipient = cl_cam_address_bcs=>create_internet_address( lst_email-mailto ).

* add recipient object to send request

          lv_send_request->add_recipient( lv_recipient ).

* ---------- send document ---------------------------------------

          lv_sent_to_all = lv_send_request->send( i_with_error_screen = abap_true ).

          COMMIT WORK.

          IF lv_sent_to_all IS INITIAL.

            MESSAGE i500(sbcoms) WITH lv_mailto.

          ELSE.

            MESSAGE s022(so).

          ENDIF.

* ------------ exception handling ----------------------------------

* replace this rudimentary exception handling with your own one !!!

        CATCH cx_bcs INTO bcs_exception.

          MESSAGE i865(so) WITH bcs_exception->error_type.

      ENDTRY.
    ENDLOOP.
  ENDIF.
  FREE:i_output_tmp[].
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_UPDATE_PARTNER_EMAIL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM  f_update_partner_email USING fp_vbeln1 TYPE vbeln
      fp_contract_hdrin TYPE  bapisdhd1
      fp_contract_hrdinx TYPE bapisdhd1x.
  DATA:
    lst_view     TYPE order_view,
    li_vbeln     TYPE TABLE OF sales_key,

    li_hdr_o     TYPE TABLE OF bapisdhd,

    li_itm_o     TYPE TABLE OF bapisdit,

    li_schd_o    TYPE TABLE OF bapisdhedu,

    li_buss_o    TYPE TABLE OF bapisdbusi,

    li_part_o    TYPE TABLE OF bapisdpart,

    li_adr_o     TYPE TABLE OF bapisdcoad,

    li_st_hdr_o  TYPE TABLE OF bapisdhdst,

    li_st_itm_o  TYPE TABLE OF bapisditst,

    li_cond_o    TYPE TABLE OF bapisdcond,

    li_cond_h    TYPE TABLE OF bapicondhd,

    li_cond_i    TYPE TABLE OF bapicondit,

    li_cond_qty  TYPE TABLE OF bapicondqs,

    li_cond_val  TYPE TABLE OF bapicondvs,

    li_contr_o   TYPE TABLE OF bapisdcntr,

    li_txt_h     TYPE TABLE OF bapisdtehd,

    li_txtln_o   TYPE TABLE OF bapitextli,

    li_flow_o    TYPE TABLE OF bapisdflow,

    li_curefs    TYPE TABLE OF bapicurefm,

    li_cucfgs    TYPE TABLE OF bapicucfgm,

    li_cuins     TYPE TABLE OF bapicuinsm,
    li_cuprts    TYPE TABLE OF bapicuprtm,
    li_cuvals    TYPE TABLE OF bapicuvalm,
    lst_adr_comp TYPE szadr_addr1_complete,
    li_cublbs    TYPE TABLE OF bapicublbm,
    li_cuvks     TYPE TABLE OF bapicuvkm,
    li_bilpln    TYPE TABLE OF bapisdbpl,
    li_bildate   TYPE TABLE OF bapisdbpld,
    li_cred_cart TYPE TABLE OF bapiccardm,
    li_extens    TYPE TABLE OF bapiparex.

**====================================================================*
**       Local Internal Table
**====================================================================*
  DATA: li_return       TYPE STANDARD TABLE OF bapiret2,  " Return messages
        lst_return      TYPE bapiret2, " For status of contract creation
        lst_hdr         TYPE bapisdh1,
        lst_hdr_x       TYPE bapisdh1x,
        lst_ret         TYPE bapiret2,

        lst_item        TYPE bapisditm,

        lst_item_x      TYPE bapisditmx,

        lst_partn       TYPE bapiparnr,

        lst_part_ch     TYPE bapiparnrc,

        lst_addr        TYPE bapiaddr1,

        lst_cnf_ref     TYPE bapicucfg,

        lst_cnf_ins     TYPE bapicuins,

        lst_cnf_part    TYPE bapicuprt,

        lst_cnf_val     TYPE bapicuval,

        lst_cnf_blob    TYPE bapicublb,

        lst_cnf_vk      TYPE bapicuvk,

        lst_cnf_ref_ins TYPE bapicuref,

        lst_schl        TYPE bapischdl,

        lst_schl_x      TYPE bapischdlx,

        lst_ordtxt      TYPE bapisdtext,

        lst_ord_keys    TYPE bapisdkey,
        lst_cond        TYPE bapicond,
        lst_cond_x      TYPE bapicondx,
        li_ret          TYPE TABLE OF bapiret2,
        li_item         TYPE TABLE OF bapisditm,
        li_item_x       TYPE TABLE OF bapisditmx,
        li_partn        TYPE TABLE OF bapiparnr,
        li_part_ch      TYPE TABLE OF bapiparnrc,
        li_addr         TYPE TABLE OF bapiaddr1,
        li_cnf_ref      TYPE TABLE OF bapicucfg,
        li_cnf_ins      TYPE TABLE OF bapicuins,
        li_cnf_part     TYPE TABLE OF bapicuprt,
        li_cnf_val      TYPE TABLE OF bapicuval,
        li_cnf_blob     TYPE TABLE OF bapicublb,
        ii_cnf_vk       TYPE TABLE OF bapicuvk,
        li_cnf_ref_ins  TYPE TABLE OF bapicuref,
        li_schl         TYPE TABLE OF bapischdl,
        li_schl_x       TYPE TABLE OF bapischdlx,
        li_ordtxt       TYPE TABLE OF bapisdtext,
        li_ord_keys     TYPE TABLE OF bapisdkey,
        li_cond         TYPE TABLE OF bapicond,
        li_cond_x       TYPE TABLE OF bapicondx.


*====================================================================*
*       Local Variable
*====================================================================*
  DATA: lv_salesdocin TYPE bapivbeln-vbeln, "for export field
        lv_flag       TYPE char1,
        lv_indx       TYPE i.
*====================================================================*
*       Local Constants
*====================================================================*
  CONSTANTS:
    lc_posnr           TYPE posnr  VALUE '000000',     " Item number of the SD document
    lc_bape_vbakx      TYPE char10 VALUE 'BAPE_VBAKX', " Bape_vbak of type CHAR9
    lc_bape_vbapx      TYPE char10 VALUE 'BAPE_VBAPX', " Bape_vbak of type CHAR9
    lc_vbbp            TYPE char4 VALUE 'VBBP',    " Vbbp of type CHAR4
    lc_msgid           TYPE msgid VALUE 'ZQTC_R2', " Message identification
    lc_e               TYPE msgty VALUE 'E',       " Message Type
    lc_msgno           TYPE msgno VALUE '242',     " System Message Number
    lc_msgno2          TYPE msgno VALUE '260',     " System Message Number
    lc_tdid_eal        TYPE tdid VALUE '0012',
    lc_tdid_inv_header TYPE tdid VALUE '0007',
    lc_999             TYPE addr_link VALUE  '999999',
    lc_int(3)          TYPE c VALUE  'INT'.

  CLEAR:lv_salesdocin.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = fp_vbeln1
    IMPORTING
      output = lv_salesdocin.

  FREE:li_vbeln[],li_hdr_o[], li_itm_o[],li_schd_o[],
       li_buss_o[],li_part_o[],li_adr_o[], li_st_hdr_o[],
       li_st_itm_o[],li_cond_o[],li_cond_h[],li_cond_i[],
       li_cond_qty[],li_cond_val[],li_contr_o[],li_txt_h[],
       li_txtln_o[],li_flow_o[],li_curefs[],li_cucfgs[],
       li_cuins[],li_cuprts[],li_cuvals[],li_cublbs[],
       li_cuvks[],li_bilpln[],li_bildate[],li_cred_cart[],li_extens[].

*  APPEND INITIAL LINE TO li_vbeln ASSIGNING FIELD-SYMBOL(<lfs_vbeln>).
*  <lfs_vbeln>-vbeln = fp_vbeln1.
*
*   IF sy-subrc EQ 0.
  FREE:li_ret[],li_part_ch[],li_addr[].
  SORT: li_adr_o[] BY address.
  CLEAR:lst_hdr,lst_hdr_x,lst_addr,lst_part_ch.

  MOVE-CORRESPONDING  fp_contract_hdrin TO lst_hdr .
  lst_hdr_x = 'U'.
  IF fp_vbeln1 IS NOT INITIAL.
    CLEAR sy-subrc.
    WHILE lv_flag IS INITIAL.
      SELECT vbeln, posnr ,parvw ,kunnr, adrnr FROM vbpa INTO TABLE @DATA(li_vbpaaddr)
            WHERE vbeln = @fp_vbeln1.
      IF sy-subrc EQ 0.
        SORT li_vbpaaddr[] BY vbeln posnr parvw kunnr.
        lv_flag = abap_true.
      ENDIF.
    ENDWHILE.
  ENDIF.

  CLEAR:st_addr,lv_indx.

  LOOP AT i_addr INTO st_addr.

    READ TABLE li_vbpaaddr ASSIGNING FIELD-SYMBOL(<lfs_vaddr>) WITH KEY vbeln = fp_vbeln1
                                                                        posnr = st_addr-posnr
                                                                        parvw = st_addr-parvw
                                                                        kunnr = st_addr-partner.
    IF sy-subrc EQ 0.
      lv_indx = lv_indx + 1.
      lst_part_ch-address = <lfs_vaddr>-adrnr.
      MOVE  lv_salesdocin TO lst_part_ch-document.
      lst_part_ch-p_numb_old = st_addr-partner.
      lst_part_ch-p_numb_new = st_addr-partner.
      lst_part_ch-itm_number = st_addr-posnr.
      MOVE 'U' TO lst_part_ch-updateflag.
      MOVE st_addr-parvw TO lst_part_ch-partn_role.
      lst_part_ch-addr_link = lc_999 - lv_indx.
      APPEND lst_part_ch TO li_part_ch.

      CLEAR:lst_adr_comp.
      CALL FUNCTION 'ADDR_GET_COMPLETE'
        EXPORTING
          addrnumber              = lst_part_ch-address
*         ADDRHANDLE              =
*         ARCHIVE_HANDLE          =
          iv_current_comm_data    = abap_true
*         BLK_EXCPT               =
        IMPORTING
          addr1_complete          = lst_adr_comp
        EXCEPTIONS
          parameter_error         = 1
          address_not_exist       = 2
          internal_error          = 3
          wrong_access_to_archive = 4
          address_blocked         = 5
          OTHERS                  = 6.
      IF sy-subrc EQ 0.
        CLEAR:lst_addr.
        CALL FUNCTION 'ADDR_CONVERT_TO_BAPIADDR1'
          EXPORTING
            addr1_complete      = lst_adr_comp
          IMPORTING
            addr1_complete_bapi = lst_addr.

        IF sy-subrc EQ 0.
          lst_addr-addr_no = lc_999 - lv_indx.
          lst_addr-comm_type = lc_int.
          lst_addr-e_mail = st_addr-email.
          APPEND lst_addr TO li_addr.
          CLEAR : lst_addr.
        ENDIF.
      ENDIF.
    ENDIF.

    CLEAR:st_addr,lst_part_ch.
  ENDLOOP.

  FREE:li_ret[].
  CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
    EXPORTING
      salesdocument     = lv_salesdocin
      order_header_in   = lst_hdr
      order_header_inx  = lst_hdr_x
      behave_when_error = 'P'
    TABLES
      return            = li_ret
      partnerchanges    = li_part_ch
      partneraddresses  = li_addr.

  READ TABLE li_ret INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
  IF sy-subrc IS NOT INITIAL.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.

    FREE:li_return[],i_addr[],li_ret[],li_part_ch[].

  ENDIF. " IF sy-subrc IS INITIAL

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CONVERT_DBM_CRT_EXCEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_FILE  text
*      <--P_I_FINAL_DBM_CRT  text
*----------------------------------------------------------------------*
FORM f_convert_dbm_crt_excel  USING    p_p_file
                              CHANGING p_i_final_dbm_crt TYPE tt_dbt_memo_crt.
  DATA : li_excel        TYPE STANDARD TABLE OF alsmex_tabline INITIAL SIZE 0, " Rows for Table with Excel Data
         lst_excel_dummy TYPE                   alsmex_tabline,                " Rows for Table with Excel Data
         lst_excel       TYPE                   alsmex_tabline,                " Rows for Table with Excel Data
         lst_dbm         TYPE                   ty_dbt_memo_crt.

  DATA: lv_fkimg TYPE char17. " Fkimg of type CHAR17
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  DATA: lv_begin_row TYPE I,
        lv_begin_col TYPE I,
        lv_end_row   TYPE I,
        lv_end_col   TYPE I.
  DATA: lvf_skip_row TYPE char1.

  PERFORM f_get_row_column CHANGING lv_begin_row
                                    lv_begin_col
                                    lv_end_row
                                    lv_end_col.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_p_file
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*      i_begin_col             = 1
*      i_begin_row             = 2
** BOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
*      i_end_col               = 11      " end with 10th column
**     i_end_col               = 31
** EOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
*      i_end_row               = 65000
      i_begin_col             = lv_begin_col
      i_begin_row             = lv_begin_row
      i_end_col               = lv_end_col
      i_end_row               = lv_end_row
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    TABLES
      intern                  = li_excel
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc EQ 0.
    IF NOT li_excel[] IS INITIAL.
      LOOP AT li_excel INTO lst_excel.
        lst_excel_dummy = lst_excel.
        IF lst_excel_dummy-value(1) EQ text-sqt.
          lst_excel_dummy-value(1) = space.
          SHIFT lst_excel_dummy-value LEFT DELETING LEADING space.
        ENDIF. " IF lst_excel_dummy-value(1) EQ text-sqt

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        AT NEW row.
          CLEAR lvf_skip_row.
*         If row starts with Order Identifier, Mandatory or Optional Skip the Row
          IF lst_excel_dummy-value IN ir_row_txt.
            lvf_skip_row = abap_true.
          ENDIF.
*         If using OLD template - Validate and display message
          IF lst_excel_dummy-row = 1 AND lvf_skip_row = abap_false.
            MESSAGE i000 WITH 'Please use the New Template'(164).
            LEAVE LIST-PROCESSING.
          ENDIF.
*         Insert New Row to capture details
          IF lvf_skip_row IS INITIAL.
            APPEND INITIAL LINE TO p_i_final_dbm_crt ASSIGNING FIELD-SYMBOL(<lfs_dbm_crt>).
          ENDIF.
        ENDAT.
        IF lvf_skip_row  IS NOT INITIAL.
          CONTINUE.
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267


        AT NEW col.
* BOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267 - Moved to Above AT NEW row.
*          AT NEW row.   " New row wise append the line to internal table
*            APPEND INITIAL LINE TO p_i_final_dbm_crt ASSIGNING FIELD-SYMBOL(<lfs_dbm_crt>).
*          ENDAT.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

          CASE lst_excel_dummy-col.
            WHEN 1.
              IF lst_excel_dummy-value IS NOT INITIAL.
                " Process only with Numeric value for Identifier
                FIND REGEX '[[:digit:]]' IN lst_excel_dummy-value.
                IF sy-subrc NE 0.
                  MESSAGE s600(zqtc_r2) DISPLAY LIKE c_errtype.
                  LEAVE LIST-PROCESSING.
                ENDIF.
                <lfs_dbm_crt>-identifier = lst_excel_dummy-value.
              ELSE.
                MESSAGE s593(zqtc_r2) DISPLAY LIKE c_errtype.
                LEAVE LIST-PROCESSING.
              ENDIF.
            WHEN 2.
              IF lst_excel_dummy-value(10) IS NOT INITIAL.
                <lfs_dbm_crt>-customer = lst_excel_dummy-value(10).
                CLEAR lst_excel_dummy.
                IF lst_dbm-customer IS NOT INITIAL.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = lst_dbm-customer
                    IMPORTING
                      output = lst_dbm-customer.
                ENDIF. " IF lst_dbm-customer IS NOT INITIAL
              ENDIF. " IF lst_excel_dummy-value(10) IS NOT INITIAL
            WHEN 3.
              <lfs_dbm_crt>-parvw  = lst_excel_dummy-value(2).
              IF <lfs_dbm_crt>-parvw IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
                  EXPORTING
                    input  = <lfs_dbm_crt>-parvw
                  IMPORTING
                    output = <lfs_dbm_crt>-parvw.
              ENDIF.
              CLEAR lst_excel_dummy.
            WHEN 4.
              <lfs_dbm_crt>-vkorg = lst_excel_dummy-value(4).
              CLEAR lst_excel_dummy.
            WHEN 5.
              <lfs_dbm_crt>-vtweg = lst_excel_dummy-value(2).
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = <lfs_dbm_crt>-vtweg
                IMPORTING
                  output = <lfs_dbm_crt>-vtweg.
              CLEAR lst_excel_dummy.
            WHEN 6.
              <lfs_dbm_crt>-spart = lst_excel_dummy-value(2).
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = <lfs_dbm_crt>-spart
                IMPORTING
                  output = <lfs_dbm_crt>-spart.
              CLEAR lst_excel_dummy.
              "SOC of MRAJKUMAR OTCM-44200
*            WHEN 7.
*              <lfs_dbm_crt>-xblnr = lst_excel_dummy-value(16).
*              CLEAR  lst_excel_dummy.

*            WHEN 8.
            WHEN 7.
              "EOC of MRAJKUMAR OTCM-44200
              <lfs_dbm_crt>-zlsch =  lst_excel_dummy-value(1).
              CLEAR  lst_excel_dummy.
              "SOC of MRAJKUMAR OTCM-44200
*            WHEN 9.
            WHEN 8.
              "EOC of MRAJKUMAR OTCM-44200
              <lfs_dbm_crt>-vbeln = lst_excel_dummy-value(10).
              IF lst_dbm-vbeln IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <lfs_dbm_crt>-vbeln
                  IMPORTING
                    output = <lfs_dbm_crt>-vbeln.
              ENDIF.
              CLEAR lst_excel_dummy.
              "SOC of MRAJKUMAR OTCM-44200
*            WHEN 10.
*              <lfs_dbm_crt>-stxh = lst_excel_dummy-value(50).
*              CLEAR lst_excel_dummy.
*            WHEN 11.
            WHEN 9.
              "EOC of MRAJKUMAR OTCM-44200
              <lfs_dbm_crt>-bstnk = lst_excel_dummy-value(20).
              CLEAR lst_excel_dummy.
          ENDCASE.
* EOC by Lahiru on 05/05/2021 for OTCM-44200 with ED2K923278  *
        ENDAT.
      ENDLOOP. " LOOP AT li_excel INTO lst_excel


    ENDIF. " IF NOT li_excel[] IS INITIAL
  ENDIF. " IF sy-subrc EQ 0
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DISPLAY_CREATE_DEBIT_MEMO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_C_ZADR  text
*----------------------------------------------------------------------*
FORM f_display_create_debit_memo USING p_c_zadr TYPE auart. " Sales Document Type
  REFRESH i_fcat_out.
  DATA: lv_counter TYPE sycucol VALUE 1. " Counter of type Integers
  " BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
* BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-110) according to the ED1 sequence with  ED2K924094  *
  PERFORM f_buildcat USING:"lv_counter 'IDENTIFIER'  text-110, " Identifier
                            lv_counter 'IDENTIFIER'  text-113, " Identifier
* EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-110) according to the ED1 sequence with  ED2K924094  *
                           " EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
                           lv_counter 'CUSTOMER'  text-009, " Customer
                           lv_counter 'PARVW'     text-011, " Partner Function
                           lv_counter 'PARTNER'   text-050, " Partner
                           lv_counter 'VKORG'     text-025, " Sales Organization
                           lv_counter 'VTWEG'     text-026, " Distribution Channel
                           lv_counter 'SPART'     text-027, " Division
                           lv_counter 'AUART'     text-023, " Document Type
"SOC of MRAJKUMAR OTCM-44200
*                           lv_counter 'XBLNR'     text-060, " Accounting - Reference (FTP File ID)
"EOC of MRAJKUMAR OTCM-44200
                           lv_counter 'ZLSCH'     text-061, " Payment Method
                           lv_counter 'AUGRU'     text-051, " Order Reasons
                           lv_counter 'VBELN'     text-098, " Contract#
                           lv_counter 'POSNR'     text-099, " Contract line item
                           lv_counter 'POSNR1'    text-097, " Target Item Number
                           lv_counter 'MATNR'     text-h04, " Material Number
                           lv_counter 'PLANT'     text-h10, " Plant
                           lv_counter 'FKIMG'     text-014, " Target Quantity
"SOC of MRAJKUMAR OTCM-44200
*                           lv_counter 'STXH'      text-032, " Header/Item Text
"EOC of MRAJKUMAR OTCM-44200
                           lv_counter 'KSCHL'     text-030, " Pricing Condition
                           lv_counter 'KBETR'     text-031, " Pricing
                           lv_counter 'WAERS'     text-105, " Currency
                           lv_counter 'KSCHL2'    text-t03, " Header/Item Price Condition
                           lv_counter 'KBETR2'    text-t04, " Cond Value
                           lv_counter 'KSCHL3'    text-t03, " Header/Item Price Condition
                           lv_counter 'KBETR3'    text-t04, " Cond Value
                           lv_counter 'IHREZ'     text-h06, " Legacy Reference No
                           lv_counter 'KDKG3'     text-h08, " Price override reason code
                           lv_counter 'VKBUR'     text-063, " Sales Office
                           lv_counter 'BSTNK'     text-024, " Purchase Document
                           lv_counter 'BSARK'     text-058, " PO Type
                           lv_counter 'PSTYV'     text-017, " Item Category
                           lv_counter 'TAX'       text-040. " Tax

  st_layout-box_fieldname = 'SEL'.
* Display ALV output with new columns during creation
  IF i_final_dbm_crt IS NOT INITIAL.
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program       = sy-repid
        i_callback_pf_status_set = 'F_SET_PF_STATUS'
        i_callback_user_command  = 'F_USER_COMMAND'
        is_layout                = st_layout
        it_fieldcat              = i_fcat_out
      TABLES
        t_outtab                 = i_final_dbm_crt
      EXCEPTIONS
        program_error            = 1
        OTHERS                   = 2.
    IF sy-subrc <> 0.
      MESSAGE e000 WITH text-036.
    ENDIF. " IF sy-subrc <> 0
  ELSE.
    MESSAGE s000 WITH text-055 DISPLAY LIKE  'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREATE_DEBIT_MEMO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_I_FINAL_DBM_CRT  text
*----------------------------------------------------------------------*
FORM f_create_debit_memo  CHANGING p_i_final_dbm_crt TYPE tt_dbt_memo_crt.
  TYPES: BEGIN OF lty_cond_class,
           kappl TYPE kappl,  " Application
           kschl TYPE kscha,  " Condition Type
           krech TYPE krech,  " Condition Class
         END OF lty_cond_class,

         BEGIN OF lty_konv,
           knumv TYPE knumv,  " Number of the document condition
           kposn TYPE kposn,  " Condition item number
           stunr TYPE stunr,  " Step number
           zaehk TYPE dzaehk, " Condition counter
           kschl TYPE kscha,  " Condition type
           vbeln TYPE vbeln,  " Sales Doc Number
         END OF lty_konv,

         BEGIN OF lty_vbeln,
           sign TYPE tvarv_sign, " ABAP: ID: I/E (include/exclude values)
           opti TYPE tvarv_opti, " ABAP: Selection option (EQ/BT/CP/...)
           low  TYPE vbeln_vf,   " Billing / Contract Document
           high TYPE vbeln_vf,   " Billing / Contract Document
         END   OF lty_vbeln,

         BEGIN OF lty_mvke,
           matnr TYPE  matnr,    " Material Number
           vkorg TYPE  vkorg,    " Sales Organization
           vtweg TYPE vtweg,     " Distribution Channel
           dwerk TYPE dwerk_ext, " Delivering Plant (Own or External)
         END OF lty_mvke.
*====================================================================*
*     L O C A L  I N T E R N A L  T A B L E
*====================================================================*
  DATA: li_sales_itm   TYPE STANDARD TABLE OF bapisditm,  " Communication Fields: Sales and Distribution Document Item
        li_sales_partn TYPE STANDARD TABLE OF bapiparnr,  " Communications Fields: SD Document Partner: WWW
        li_sales_cond  TYPE STANDARD TABLE OF bapicond,   " Communication Fields for Maintaining Conditions in the Order
        li_mvke        TYPE STANDARD TABLE OF lty_mvke
                       INITIAL SIZE 0,
        li_sales_condx TYPE STANDARD TABLE OF bapicondx,  " Communication Fields for Maintaining Conditions in the Order
        li_sales_itmx  TYPE STANDARD TABLE OF bapisditmx, " Communication Fields: Sales and Distribution Document Item
        li_sales_text  TYPE STANDARD TABLE OF bapisdtext, " Communication fields: SD texts
        li_cond_class  TYPE STANDARD TABLE OF lty_cond_class
                       INITIAL SIZE 0,
        li_konv        TYPE STANDARD TABLE OF lty_konv
        INITIAL SIZE 0,
        li_docno       TYPE STANDARD TABLE OF lty_vbeln INITIAL SIZE 0,
        li_return      TYPE STANDARD TABLE OF bapiret2. " Return Parameter
*====================================================================*
*     L O C A L  W O R K A R E A
*====================================================================*
  DATA: lst_sales_hdr_in    TYPE bapisdhd1,  " Communication Fields: Sales and Distribution Document Header
        lst_sales_hdr_inx   TYPE bapisdhd1x, " Checkbox Fields for Sales and Distribution Document Header
        lst_sales_itm       TYPE bapisditm,  " Communication Fields: Sales and Distribution Document Item
        lst_sales_partn     TYPE bapiparnr,  " Communications Fields: SD Document Partner: WWW
        lst_sales_cond      TYPE bapicond,   " Communication Fields for Maintaining Conditions in the Order
        lst_return          TYPE bapiret2,   " Return Parameter
        lst_sales_condx     TYPE bapicondx,  " Communication Fields for Maintaining Conditions in the Order
        lst_debt_memo_dummy TYPE ty_dbt_memo_crt,
        lst_docno           TYPE lty_vbeln,
        lst_cond_type       TYPE ty_cond_type,
        lst_sales_itmx      TYPE bapisditmx, " Communication Fields: Sales and Distribution Document Item
        lst_sales_text      TYPE bapisdtext, " Communication fields: SD texts
* BOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
        lst_header_tmp      TYPE ty_dbt_memo_crt.     " debit memo creation structure
* EOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
*====================================================================*
*     L O C A L  V A R I A B L E
*====================================================================*
  DATA: lv_debit_memo      TYPE bapivbeln-vbeln, " Sales Document
* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
        lv_identifier_1    TYPE posnr_va,        " Identifier 1
        lv_identifier_2    TYPE posnr_va,        " Identifier 1
        lv_validation_fail TYPE char1.           " Flag for validation fail
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
*====================================================================*
*     L O C A L  C O N S T A N T S
*====================================================================*
  CONSTANTS: lc_posnr       TYPE posnr VALUE '000000'. " Item number of the SD document
  CONSTANTS:
    lc_e101        TYPE zdevid     VALUE 'E101',        " Development ID
    lc_debit_memo  TYPE rvari_vnam VALUE 'DEBIT_MEMO',  " ABAP: Name of Variant Variable
    lc_doc_typ     TYPE rvari_vnam VALUE 'DOC_TYP',     " ABAP: Name of Variant Variable
    lc_cnt_doc_cat TYPE rvari_vnam VALUE 'CNT_DOC_CAT', " ABAP: Name of Variant Variable
    lc_msgid       TYPE msgid VALUE 'ZQTC_R2',          " Message identification
    lc_e           TYPE msgty VALUE 'E',                " Message Type
    lc_msgno       TYPE msgno VALUE '242',              " System Message Number
* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
    lc_augru       TYPE rvari_vnam VALUE 'AUGRU',       " Order reason,
    lc_dbt_vbtyp   TYPE rvari_vnam VALUE 'VBTYP_N'.     " Reference contract no
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
  REFRESH : i_dbt_knvv, i_dbt_vbfa_l, i_dbt_vbak_vbfa ,i_dbt_duplicate.
  CLEAR : v_log_index.
  i_dbt_duplicate = p_i_final_dbm_crt[].  " i_dbt_duplicate is used for duplicate order identification
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *


* Begin by AMOHAMMED on 11/17/2020 TR # ED2K920341
* After changing the price value in ALV editable report
* convert the price value to internal format
  DATA : lv_doc_cur TYPE waerk,
         lv_itm_cur TYPE waerk.
  CLEAR : lv_doc_cur, lv_itm_cur.
  LOOP AT p_i_final_dbm_crt ASSIGNING FIELD-SYMBOL(<lst_i_final_dbm_crt>).
    IF sy-tabix EQ 1.
      IF <lst_i_final_dbm_crt>-waers IS NOT INITIAL.
        lv_doc_cur = <lst_i_final_dbm_crt>-waers.
      ELSE.
        PERFORM f_curr_conv_to_intrnl USING <lst_i_final_dbm_crt>-customer " ED2K921132
                                        <lst_i_final_dbm_crt>-parvw
                                        <lst_i_final_dbm_crt>-vkorg
                                        <lst_i_final_dbm_crt>-vtweg
                                        <lst_i_final_dbm_crt>-spart
                                        <lst_i_final_dbm_crt>-vbeln
                                  CHANGING lv_doc_cur
                                           <lst_i_final_dbm_crt>-kbetr.
      ENDIF.
    ELSE.
      IF <lst_i_final_dbm_crt>-waers IS NOT INITIAL.
        CONTINUE.
      ELSE.
        lv_itm_cur = lv_doc_cur.
      ENDIF.
      PERFORM f_curr_conv_to_intrnl USING <lst_i_final_dbm_crt>-customer " ED2K921132
                                          <lst_i_final_dbm_crt>-parvw
                                          <lst_i_final_dbm_crt>-vkorg
                                          <lst_i_final_dbm_crt>-vtweg
                                          <lst_i_final_dbm_crt>-spart
                                          <lst_i_final_dbm_crt>-vbeln
                                    CHANGING lv_itm_cur
                                             <lst_i_final_dbm_crt>-kbetr.
      PERFORM f_curr_conv_to_intrnl USING <lst_i_final_dbm_crt>-customer " ED2K921132
                                          <lst_i_final_dbm_crt>-parvw
                                          <lst_i_final_dbm_crt>-vkorg
                                          <lst_i_final_dbm_crt>-vtweg
                                          <lst_i_final_dbm_crt>-spart
                                          <lst_i_final_dbm_crt>-vbeln
                                    CHANGING lv_itm_cur
                                             <lst_i_final_dbm_crt>-kbetr2.
      PERFORM f_curr_conv_to_intrnl USING <lst_i_final_dbm_crt>-customer " ED2K921132
                                          <lst_i_final_dbm_crt>-parvw
                                          <lst_i_final_dbm_crt>-vkorg
                                          <lst_i_final_dbm_crt>-vtweg
                                          <lst_i_final_dbm_crt>-spart
                                          <lst_i_final_dbm_crt>-vbeln
                                    CHANGING lv_itm_cur
                                             <lst_i_final_dbm_crt>-kbetr3.
    ENDIF.
  ENDLOOP.
  FREE : lv_doc_cur, lv_itm_cur.
* End by AMOHAMMED on 11/17/2020 TR # ED2K920341

  DATA(li_output) = p_i_final_dbm_crt.

* Sort by Order Type
  SORT li_output BY auart.

  DELETE li_output WHERE auart IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING auart.

  SELECT auart,	 " Sales Document Type
         incpo   " Increment of item number in the SD document
    FROM tvak    " Sales Document Types
    INTO TABLE @DATA(li_tvak)
    FOR ALL ENTRIES IN @li_output
    WHERE auart EQ @li_output-auart.
  IF sy-subrc IS INITIAL.
    SORT li_tvak BY auart.
  ENDIF. " IF sy-subrc IS INITIAL

  CLEAR li_output.
  li_output = p_i_final_dbm_crt.
* Append all the condition types from file to range table
  LOOP AT li_output INTO DATA(lst_output).
    lst_cond_type-sign   = c_i.
    lst_cond_type-option = c_eq.
    lst_cond_type-low    = lst_output-kschl.
    APPEND lst_cond_type TO i_cond_type.
    CLEAR : lst_cond_type-low.
    lst_cond_type-low    = lst_output-kschl2.
    APPEND lst_cond_type TO i_cond_type.

    CLEAR : lst_cond_type-low.
    lst_cond_type-low    = lst_output-kschl3.
    APPEND lst_cond_type TO i_cond_type.

    CLEAR lst_cond_type.
  ENDLOOP. " LOOP AT li_output INTO DATA(lst_output)

  SORT i_cond_type BY low.
  DELETE ADJACENT DUPLICATES FROM i_cond_type COMPARING low.

  SELECT kappl,	 " Application
         kschl,	 " Condition type
         krech   " Condition class
   FROM t685a    " Conditions: Types: Additional Price Element Data
   INTO TABLE @li_cond_class
   WHERE kappl EQ 'V'
   AND   kschl IN @i_cond_type.

  IF sy-subrc IS INITIAL.
    SORT li_cond_class BY kschl. "  class
  ENDIF. " IF sy-subrc IS INITIAL

  SELECT devid,    " Development ID
         param1,   " ABAP: Name of Variant Variable
         param2,   " ABAP: Name of Variant Variable
         srno,     " ABAP: Current selection number
         sign,     " ABAP: ID: I/E (include/exclude values)
         opti,     " ABAP: Selection option (EQ/BT/CP/...)
         low,      " Lower Value of Selection Condition
         high      " Upper Value of Selection Condition
  FROM zcaconstant " Wiley Application Constant Table
  INTO TABLE @DATA(li_constant)
  WHERE devid    = @lc_e101
  AND   param1   = @lc_debit_memo
  AND   activate = @abap_true.
  IF sy-subrc = 0.
    DATA: lst_constant LIKE LINE OF li_constant.
    LOOP AT li_constant INTO lst_constant.
      CASE lst_constant-param2.
        WHEN lc_doc_typ.
          v_dbt = lst_constant-low.
        WHEN lc_cnt_doc_cat.
          v_cnt = lst_constant-low.
* BOC by Lahiru on 05/10/2021 for OTCM-44200 with ED2K923278  *
        WHEN lc_augru.        " Order reason
          v_augru = lst_constant-low.
        WHEN lc_dbt_vbtyp.    " Debit memo document category
          v_ref_doc_type = lst_constant-low.
* EOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
      ENDCASE.
    ENDLOOP.
  ENDIF. " IF sy-subrc = 0
  CLEAR li_output.
  li_output = p_i_final_dbm_crt.

  SORT li_output BY matnr vkorg vtweg.
  DELETE ADJACENT DUPLICATES FROM li_output COMPARING matnr
                                                      vkorg
                                                      vtweg.
  IF li_output IS NOT INITIAL.
    SELECT matnr, " Material Number
           vkorg, " Sales Organization
           vtweg, " Distribution Channel
           dwerk  " Plant
      FROM mvke   " Sales Data for Material
      INTO TABLE @li_mvke
      FOR ALL ENTRIES IN @li_output
      WHERE matnr = @li_output-matnr.
* Begin by AMOHAMMED on 12/8/2020 TR # ED2K920719
    IF sy-subrc IS INITIAL.
      READ TABLE li_output ASSIGNING FIELD-SYMBOL(<lst_output>) INDEX 1.
      IF sy-subrc EQ 0.
        SORT li_mvke BY matnr vkorg vtweg.
        DELETE li_mvke WHERE vkorg NE <lst_output>-vkorg
                         AND vtweg NE <lst_output>-vtweg.
      ENDIF. " IF sy-subrc EQ 0.
    ENDIF. " IF sy-subrc IS INITIAL
* End by AMOHAMMED on 12/8/2020 TR # ED2K920719
  ENDIF. " IF li_output IS NOT INITIAL

* Change in table structure form routine
  PERFORM f_deselect_dbt_lines CHANGING p_i_final_dbm_crt.
  DATA(li_create_debit) = p_i_final_dbm_crt.
  DELETE li_create_debit WHERE sel NE abap_true.

  IF li_create_debit IS INITIAL.
    MESSAGE text-e19 TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF. " IF li_create_credit IS INITIAL


  SELECT a~knumv,
         a~kposn,
         a~stunr,
         a~zaehk,
         a~kschl,
         b~vbeln " Sales Document
    INTO TABLE @li_konv
    FROM konv AS a INNER JOIN vbak AS b
    ON a~knumv EQ b~knumv
    FOR ALL ENTRIES IN @li_create_debit
    WHERE b~vbeln = @li_create_debit-vbeln
    AND   a~kschl = @li_create_debit-kschl.
  IF sy-subrc IS INITIAL.
    SORT li_konv BY vbeln kposn kschl.
  ENDIF. " IF sy-subrc IS INITIAL

  READ TABLE li_create_debit INTO DATA(lst_create_debit_temp) INDEX 1.
  IF lst_create_debit_temp-auart = v_dbt. " logic is applicable for Contract Ref

    LOOP AT li_create_debit ASSIGNING FIELD-SYMBOL(<lst_create_debit>).
      lst_docno-sign = c_i.
      lst_docno-opti = c_eq.
      lst_docno-low  = <lst_create_debit>-vbeln.
      APPEND lst_docno TO li_docno.
      CLEAR lst_docno.
    ENDLOOP. " LOOP AT li_create_credit INTO lst_create_credit_temp

    SORT li_docno BY low.
    DELETE ADJACENT DUPLICATES FROM li_docno COMPARING low.

    SELECT vbeln,
             posnr,
             prsdt " Date for pricing and exchange rate
        INTO TABLE @DATA(li_vbkd)
        FROM vbkd  " Contract Document: Item Data
        WHERE vbeln IN @li_docno.
    IF sy-subrc = 0.
*     Do nothing
    ENDIF. " IF sy-subrc = 0
    CLEAR : lst_create_debit_temp.
  ENDIF. " IF lst_create_credit_temp-auart = v_cre

* BOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
  DATA(li_dbm_crt_tmp_knvv) = p_i_final_dbm_crt[].    " Data copying to prepare the upload file line items
  SORT li_dbm_crt_tmp_knvv BY parvw.
  DELETE li_dbm_crt_tmp_knvv WHERE parvw NE c_ag.     " Keep only Sold to party details

  " Fetch particular sold to party sales area data
  SELECT kunnr,
         vkorg,
         vtweg,
         spart,
         waers
   FROM knvv INTO TABLE @i_dbt_knvv
   FOR ALL ENTRIES IN @li_dbm_crt_tmp_knvv
   WHERE kunnr = @li_dbm_crt_tmp_knvv-customer
   AND vkorg = @li_dbm_crt_tmp_knvv-vkorg
   AND vtweg = @li_dbm_crt_tmp_knvv-vtweg
   AND spart = @li_dbm_crt_tmp_knvv-spart.
  IF sy-subrc IS INITIAL.
    SORT i_dbt_knvv BY kunnr vkorg vtweg spart.
  ENDIF.

  " Fecth existing ZADR for reference Contracts from document flow
  SELECT vbelv,vbeln,vbtyp_n
    FROM vbfa INTO TABLE @i_dbt_vbfa_l
    FOR ALL ENTRIES IN @p_i_final_dbm_crt
    WHERE vbelv = @p_i_final_dbm_crt-vbeln  AND
          vbtyp_n = @v_ref_doc_type.    " Doc type = 'L'
  IF sy-subrc = 0.
    SORT i_dbt_vbfa_l BY vbelv.
    " Fetch header/line item details for particular ZADR document
    SELECT a~vbeln,
           a~auart,
           b~posnr,
           b~abgru
      FROM vbak AS a
      INNER JOIN vbap AS b
      ON a~vbeln = b~vbeln
      INTO TABLE @i_dbt_vbak_vbfa
      FOR ALL ENTRIES IN @i_dbt_vbfa_l
      WHERE a~vbeln = @i_dbt_vbfa_l-vbeln   AND
            a~auart = @c_zadr.
    IF sy-subrc = 0.
      SORT i_dbt_vbak_vbfa BY vbeln.
    ENDIF.
  ENDIF.
* EOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
* BOC by Lahiru on 09/21/2021 for OTCM-44200 with ED2K924570   *
*  DELETE li_create_debit WHERE uepos IS NOT INITIAL. "OTCM-44200 7/7/2021 Prabhu- remove BOM sub Items
* EOC by Lahiru on 09/21/2021 for OTCM-44200 with ED2K924570   *
  LOOP AT li_create_debit INTO DATA(lst_dbt_memo).

* BOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
    " Whenever found the validation_fail with active status refresh the tables
    IF lv_validation_fail = abap_true.
      CLEAR: lst_sales_hdr_in, lst_sales_hdr_inx, lv_debit_memo, li_return,
             li_sales_itm, li_sales_itmx, li_sales_partn, li_sales_cond,
             li_sales_condx, li_sales_text.
    ENDIF.
* EOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *

    DATA(lv_index) = sy-tabix.

    lst_debt_memo_dummy = lst_dbt_memo.

*   Whenever we see new header entry, we refresh the tables
    IF lst_debt_memo_dummy-parvw  EQ c_ag.
      CLEAR: lst_sales_hdr_in,
             lst_sales_hdr_inx,
             lv_debit_memo,
             li_return,
             li_sales_itm,
             li_sales_itmx,
             li_sales_partn,
             li_sales_cond,
             li_sales_condx,
             li_sales_text,
* BOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
             lv_validation_fail.
* EOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
    ENDIF. " IF lst_debt_memo_dummy-parvw EQ c_ag

*  Populate the Header records
    IF lst_debt_memo_dummy-auart EQ c_zadr AND lst_debt_memo_dummy-posnr IS INITIAL.

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
      lst_header_tmp = lst_dbt_memo.      " header reocrd assign to tmp structure
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *

      IF lst_sales_hdr_in IS INITIAL.

        lst_sales_hdr_in-doc_type    = lst_debt_memo_dummy-auart. "ZCR
        lst_sales_hdr_inx-updateflag = c_i.

        READ TABLE li_vbkd ASSIGNING FIELD-SYMBOL(<lst_record>) WITH KEY
        vbeln = lst_debt_memo_dummy-vbeln.
        IF sy-subrc = 0.
          lst_sales_hdr_in-price_date = <lst_record>-prsdt.
          IF lst_sales_hdr_in-price_date IS NOT INITIAL.
            lst_sales_hdr_inx-price_date = abap_true.
          ENDIF. " IF lst_sales_hdr_in-price_date IS NOT INITIAL
        ENDIF. " IF sy-subrc = 0

        IF lst_sales_hdr_in-doc_type IS NOT INITIAL.
          lst_sales_hdr_inx-doc_type = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-doc_type IS NOT INITIAL
          lst_sales_hdr_inx-doc_type = abap_false.
        ENDIF. " IF lst_sales_hdr_in-doc_type IS NOT INITIAL

        lst_sales_hdr_in-sales_org  = lst_debt_memo_dummy-vkorg.
        IF lst_sales_hdr_in-sales_org IS NOT INITIAL.
          lst_sales_hdr_inx-sales_org = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-sales_org IS NOT INITIAL
          lst_sales_hdr_inx-sales_org = abap_false.
        ENDIF. " IF lst_sales_hdr_in-sales_org IS NOT INITIAL

        lst_sales_hdr_in-distr_chan = lst_debt_memo_dummy-vtweg.
        lst_sales_hdr_inx-distr_chan = abap_true.  " NPOLINA ERP7763 ED2K914078
        IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL.
          lst_sales_hdr_inx-distr_chan = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL
          lst_sales_hdr_inx-distr_chan = abap_false.
        ENDIF. " IF lst_sales_hdr_inx-distr_chan IS NOT INITIAL

        lst_sales_hdr_in-division   = lst_debt_memo_dummy-spart.
        IF lst_sales_hdr_in-division IS NOT INITIAL.
          lst_sales_hdr_inx-division = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-division IS NOT INITIAL
          lst_sales_hdr_inx-division = abap_false.
        ENDIF. " IF lst_sales_hdr_in-division IS NOT INITIAL

        lst_sales_hdr_in-sales_off = lst_debt_memo_dummy-vkbur.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_sales_hdr_in-sales_off
          IMPORTING
            output = lst_sales_hdr_in-sales_off.

        IF lst_sales_hdr_in-sales_off IS NOT INITIAL.
          lst_sales_hdr_inx-sales_off = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-sales_off IS NOT INITIAL
          lst_sales_hdr_inx-sales_off = abap_false.
        ENDIF. " IF lst_sales_hdr_in-sales_off IS NOT INITIAL

* No Billing block for sales area 0050
        IF lst_sales_hdr_in-sales_off = v_vkbur.
          lst_sales_hdr_in-bill_block  = abap_false.
          lst_sales_hdr_inx-bill_block = abap_true.
        ENDIF. " IF lst_sales_hdr_in-sales_off = v_vkbur

        lst_sales_hdr_in-ref_doc_l   = lst_debt_memo_dummy-xblnr.
        IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL.
          lst_sales_hdr_inx-ref_doc_l = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL
          lst_sales_hdr_inx-ref_doc_l = abap_false.
        ENDIF. " IF lst_sales_hdr_in-ref_doc_l IS NOT INITIAL

        lst_sales_hdr_in-pymt_meth   = lst_debt_memo_dummy-zlsch.
        IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL.
          lst_sales_hdr_inx-pymt_meth = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL
          lst_sales_hdr_inx-pymt_meth = abap_false.
        ENDIF. " IF lst_sales_hdr_in-pymt_meth IS NOT INITIAL

        lst_sales_hdr_in-cstcndgrp3 = lst_debt_memo_dummy-kdkg3.
        IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL.
          lst_sales_hdr_inx-cstcndgrp3 = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL
          lst_sales_hdr_inx-cstcndgrp3 = abap_false.
        ENDIF. " IF lst_sales_hdr_in-cstcndgrp3 IS NOT INITIAL

        lst_sales_hdr_in-ref_1_s = lst_debt_memo_dummy-vbeln.
        IF lst_dbt_memo-vbeln IS NOT INITIAL.
          lst_sales_hdr_inx-ref_1_s = abap_true.
        ENDIF. " IF lst_cred_memo-vbeln IS NOT INITIAL

        lst_sales_hdr_in-ord_reason  = lst_debt_memo_dummy-augru. "'C82'"Sales Rep Change
        IF lst_sales_hdr_in-ord_reason IS NOT INITIAL.
          lst_sales_hdr_inx-ord_reason = abap_true.
        ENDIF. " IF lst_sales_hdr_in IS NOT INITIAL

        lst_sales_hdr_in-ref_doc    = lst_debt_memo_dummy-vbeln.
        IF lst_sales_hdr_in-ref_doc  IS NOT INITIAL.
          lst_sales_hdr_inx-ref_doc = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_inx-ref_doc IS NOT INITIAL
          lst_sales_hdr_inx-ref_doc = abap_false.
        ENDIF. " IF lst_sales_hdr_inx-ref_doc IS NOT INITIAL

        lst_sales_hdr_in-refdoc_cat = v_cnt.
        IF lst_sales_hdr_in-refdoc_cat IS NOT INITIAL.
          lst_sales_hdr_inx-refdoc_cat = abap_true.
        ELSE. " ELSE -> IF lst_sales_hdr_in-refdoc_cat IS NOT INITIAL
          lst_sales_hdr_inx-refdoc_cat = abap_false.
        ENDIF. " IF lst_sales_hdr_in-refdoc_cat IS NOT INITIAL

        lst_sales_hdr_in-purch_no_c = lst_debt_memo_dummy-bstnk.
        IF lst_sales_hdr_in-purch_no_c IS NOT INITIAL.
          lst_sales_hdr_inx-purch_no_c = abap_true.
        ENDIF. " IF lst_sales_hdr_in-purch_no_c IS NOT INITIAL

        lst_sales_hdr_in-po_method = lst_debt_memo_dummy-bsark.
        IF lst_sales_hdr_in-po_method IS NOT INITIAL.
          lst_sales_hdr_inx-po_method = abap_true.
        ENDIF. " IF lst_sales_hdr_in-po_method IS NOT INITIAL

*====================================================================*
*  Header Partner Details
*====================================================================*
        lst_sales_partn-partn_role = lst_debt_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_debt_memo_dummy-customer.
        lst_sales_partn-itm_number = lc_posnr.
        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
*====================================================================*
*      Header Condition Records
*====================================================================*
        lst_sales_cond-itm_number   = lc_posnr.
        lst_sales_condx-itm_number  = lc_posnr.
        lst_sales_cond-cond_type    = lst_debt_memo_dummy-kschl.
        IF lst_sales_cond-cond_type IS NOT INITIAL.
          lst_sales_condx-cond_type = abap_true.
        ELSE. " ELSE -> IF lst_sales_cond-cond_type IS NOT INITIAL
          lst_sales_condx-cond_type = abap_false.
        ENDIF. " IF lst_sales_cond-cond_type IS NOT INITIAL

        lst_sales_cond-cond_value = lst_debt_memo_dummy-kbetr.
        IF lst_sales_cond-cond_value IS NOT INITIAL.
          lst_sales_condx-cond_value = abap_true.
        ELSE. " ELSE -> IF lst_sales_condx-cond_value IS NOT INITIAL
          lst_sales_condx-cond_value = abap_false.
        ENDIF. " IF lst_sales_condx-cond_value IS NOT INITIAL

        APPEND lst_sales_cond TO li_sales_cond.
        CLEAR lst_sales_cond.

        APPEND lst_sales_condx TO li_sales_condx.
        CLEAR lst_sales_condx.

*====================================================================*
*      BAPI TEXT
*====================================================================*
        lst_sales_text-itm_number = lc_posnr.
        lst_sales_text-text_id    = v_tdid.
        lst_sales_text-langu      = sy-langu.
        lst_sales_text-format_col = c_format.
        lst_sales_text-text_line  = lst_debt_memo_dummy-stxh.

        APPEND lst_sales_text TO li_sales_text.
        CLEAR  lst_sales_text.

*     Get Increment of item number in the SD document
        IF lst_debt_memo_dummy-auart IS NOT INITIAL.
          DATA(lst_tvak) = li_tvak[ auart = lst_debt_memo_dummy-auart ].
        ENDIF. " IF lst_cred_memo_dummy-auart IS NOT INITIAL

      ELSE. " ELSE -> IF lst_sales_hdr_in IS INITIAL
*====================================================================*
*  Header Partner Details
*====================================================================*
        lst_sales_partn-partn_role = lst_debt_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_debt_memo_dummy-customer.
        lst_sales_partn-itm_number = lc_posnr.
        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
      ENDIF. " IF lst_sales_hdr_in IS INITIAL

    ELSE. " ELSE -> IF lst_debt_memo_dummy-posnr IS INITIAL

* BOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *
      " check the Current record identifier and validation_fail record related identifier. if both equals continue to next record
      IF lv_identifier_1 = lst_debt_memo_dummy-identifier AND lv_validation_fail = abap_true.
        CONTINUE.
      ELSEIF lv_identifier_2 = lst_debt_memo_dummy-identifier AND v_duplicate_cnt = abap_true.   " Check duplicate orders
        CONTINUE.
      ENDIF.
      CLEAR lv_validation_fail.
      PERFORM f_zadr_validations TABLES i_dbt_knvv i_vbak_vbap i_dbt_vbak_vbfa       " Main validation subroutine
                                 USING lst_debt_memo_dummy lst_header_tmp
                                 CHANGING lv_identifier_1 lv_identifier_2 lv_validation_fail.
      IF lv_validation_fail = abap_true.
        CONTINUE.
      ENDIF.
* EOC by Lahiru on 05/09/2021 for OTCM-44200 with ED2K923278  *

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lst_debt_memo_dummy-posnr1
        IMPORTING
          output = lst_sales_itm-itm_number.
      READ TABLE li_sales_itm WITH KEY itm_number =
      lst_sales_itm-itm_number TRANSPORTING NO FIELDS.

      IF sy-subrc IS NOT INITIAL.

*====================================================================*
*    Check BOM to determine line item numbers
*====================================================================*

        READ TABLE li_mvke ASSIGNING FIELD-SYMBOL(<lfs_mvke>)
        WITH KEY matnr = lst_debt_memo_dummy-matnr   " Material Number
                 vkorg = lst_sales_hdr_in-sales_org  " Sales Organization
                 vtweg = lst_sales_hdr_in-distr_chan " Distribution Channel
                 BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          IF <lfs_mvke>-dwerk IS NOT INITIAL.
*            PERFORM f_get_bom_debit USING
*                                       lst_debt_memo_dummy-matnr
*                                       <lfs_mvke>-dwerk
*                                       lst_debt_memo_dummy-fkimg
*                                       lv_index
*                                       lst_tvak-incpo
*                              CHANGING li_create_debit.
          ENDIF. " IF <lfs_mvke>-dwerk IS NOT INITIAL
        ENDIF. " IF sy-subrc IS INITIAL

*====================================================================*
* Sales item level
*====================================================================*

        IF lst_sales_hdr_inx-updateflag EQ c_i.
          lst_sales_itmx-updateflag = abap_true.
        ENDIF. " IF lst_sales_hdr_inx-updateflag EQ c_i


        lst_sales_itm-material   = lst_debt_memo_dummy-matnr.
        IF lst_sales_itm-material IS NOT INITIAL.
          lst_sales_itmx-material = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-material IS NOT INITIAL
          lst_sales_itmx-material = abap_false.
        ENDIF. " IF lst_sales_itm-material IS NOT INITIAL

*        IF li_vbrp IS NOT INITIAL.
*          READ TABLE li_vbrp INTO lst_vbrp WITH KEY
*          vbeln = lst_sales_hdr_in-ref_doc
*          posnr = lst_debt_memo_dummy-posnr.
*          IF sy-subrc = 0.
*
*            lst_sales_itm-price_date = lst_vbrp-prsdt.
*
*            IF lst_sales_itm-price_date IS NOT INITIAL.
*              lst_sales_itmx-price_date = abap_true.
*            ELSE. " ELSE -> IF lst_sales_itm-price_date IS NOT INITIAL
*              lst_sales_itmx-price_date = abap_false.
*            ENDIF. " IF lst_sales_itm-price_date IS NOT INITIAL
*
*          ENDIF. " IF sy-subrc = 0
*        ENDIF. " IF li_vbrp IS NOT INITIAL
        IF li_vbkd IS NOT INITIAL.
          IF lst_debt_memo_dummy-vbeln IS NOT INITIAL.
            READ TABLE li_vbkd ASSIGNING FIELD-SYMBOL(<lst_vbkd>) WITH KEY
              vbeln = lst_debt_memo_dummy-vbeln
              posnr = lst_debt_memo_dummy-posnr.
          ELSEIF lst_sales_hdr_in-ref_doc IS NOT INITIAL.
            READ TABLE li_vbkd ASSIGNING <lst_vbkd> WITH KEY
              vbeln = lst_sales_hdr_in-ref_doc
              posnr = lst_debt_memo_dummy-posnr.
          ENDIF.
          IF sy-subrc = 0.

            lst_sales_itm-price_date = <lst_vbkd>-prsdt.
            IF lst_sales_itm-price_date IS NOT INITIAL.
              lst_sales_itmx-price_date = abap_true.
            ELSE. " ELSE -> IF lst_sales_itm-price_date IS NOT INITIAL
              lst_sales_itmx-price_date = abap_false.
            ENDIF. " IF lst_sales_itm-price_date IS NOT INITIAL

            IF <lst_vbkd>-vbeln IS NOT INITIAL.
              lst_sales_itm-ref_doc    = <lst_vbkd>-vbeln.
            ENDIF. " IF lst_vbrp-vbeln IS NOT INITIAL
            IF lst_sales_itm-ref_doc  IS NOT INITIAL.
              lst_sales_itmx-ref_doc = abap_true.
            ELSE. " ELSE -> IF lst_sales_itm-ref_doc IS NOT INITIAL
              lst_sales_itmx-ref_doc = abap_false.
            ENDIF. " IF lst_sales_itm-ref_doc IS NOT INITIAL

            IF <lst_vbkd>-posnr IS NOT INITIAL.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = <lst_vbkd>-posnr
                IMPORTING
                  output = lst_sales_itm-ref_doc_it.
            ENDIF. " IF lst_vbrp-posnr IS NOT INITIAL
            IF lst_sales_itm-ref_doc_it IS NOT INITIAL.
              lst_sales_itmx-ref_doc_it = abap_true.
            ELSE. " ELSE -> IF lst_sales_itm-ref_doc_it IS NOT INITIAL
              lst_sales_itmx-ref_doc_it = abap_false.
            ENDIF. " IF lst_sales_itm-ref_doc_it IS NOT INITIAL
          ENDIF. " IF sy-subrc = 0
        ENDIF. " IF li_vbkd IS NOT INITIAL

*        lst_sales_itm-hg_lv_item = lc_posnr.
*        IF  lst_sales_itm-hg_lv_item IS NOT INITIAL.
*          lst_sales_itmx-hg_lv_item = abap_true.
*        ELSE. " ELSE -> IF lst_sales_itm-hg_lv_item IS NOT INITIAL
*          lst_sales_itmx-hg_lv_item = abap_false.
*        ENDIF. " IF lst_sales_itm-hg_lv_item IS NOT INITIAL

        lst_sales_itm-target_qty = lst_debt_memo_dummy-fkimg.
        IF lst_sales_itm-target_qty IS NOT INITIAL.
          lst_sales_itmx-target_qty = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-target_qty IS NOT INITIAL
          lst_sales_itmx-target_qty = abap_false.
        ENDIF. " IF lst_sales_itm-target_qty IS NOT INITIAL

*        IF lst_sales_hdr_in-doc_type EQ c_zscr.
*          lst_sales_itm-ref_doc    = lst_sales_hdr_in-ref_1_s.
*          lst_sales_itm-ref_doc_it = lst_sales_itm-itm_number.
*        ENDIF.
*        IF lst_sales_itm-ref_doc  IS NOT INITIAL.
*          lst_sales_itmx-ref_doc = abap_true.
*          lst_sales_itmx-ref_doc_it = abap_true.
*        ENDIF.

        IF lst_sales_itm-ref_doc IS NOT INITIAL.
          lst_sales_itm-ref_doc_ca = v_cnt.
        ENDIF. " IF lst_sales_itm-ref_doc IS NOT INITIAL

        IF lst_sales_itm-ref_doc_ca  IS NOT INITIAL.
          lst_sales_itmx-ref_doc_ca = abap_true.
        ELSE. " ELSE -> IF lst_sales_itm-ref_doc_ca IS NOT INITIAL
          lst_sales_itmx-ref_doc_ca = abap_false.
        ENDIF. " IF lst_sales_itm-ref_doc_ca IS NOT INITIAL


        IF  lst_debt_memo_dummy-ihrez IS NOT INITIAL.
          lst_sales_itm-ref_1_s = lst_debt_memo_dummy-ihrez.
          lst_sales_itmx-ref_1_s = abap_true.
        ELSE. " ELSE -> IF lst_cred_memo_dummy-ihrez IS NOT INITIAL
          lst_sales_itmx-ref_1_s = abap_false.
        ENDIF. " IF lst_cred_memo_dummy-ihrez IS NOT INITIAL

        IF lst_debt_memo_dummy-kdkg3 IS NOT INITIAL.
          lst_sales_itm-cstcndgrp3 = lst_debt_memo_dummy-kdkg3.
          lst_sales_itmx-cstcndgrp3 = abap_true.
        ENDIF. " IF lst_cred_memo_dummy-kdkg3 IS NOT INITIAL
* for Credit Memo PSTYV Addition
        IF lst_debt_memo_dummy-pstyv IS NOT INITIAL.
          lst_sales_itm-item_categ = lst_debt_memo_dummy-pstyv.
          lst_sales_itmx-item_categ = abap_true.
        ENDIF. " IF lst_cred_memo_dummy-pstyv IS NOT INITIAL
* for Credit Memo PSTYV Addition

        IF lst_sales_hdr_in-doc_type EQ c_zscr.
          CLEAR:lst_sales_itmx-ref_doc_ca,lst_sales_itm-ref_doc_ca,lst_sales_itm-item_categ,lst_sales_itmx-item_categ.
          lst_sales_itm-itm_number = lst_debt_memo_dummy-posnr.
          lst_sales_itmx-itm_number = lst_debt_memo_dummy-posnr.
        ENDIF.
* BOC by Lahiru on 07/27/2021 for OTCM-44200 with  ED2K924094  *
        lst_sales_itm-purch_no_c = lst_debt_memo_dummy-bstnk.
        lst_sales_itmx-purch_no_c = abap_true.
* EOC by Lahiru on 07/27/2021 for OTCM-44200 with  ED2K924094  *

        APPEND lst_sales_itm TO li_sales_itm.
        CLEAR lst_sales_itm.

        APPEND lst_sales_itmx TO li_sales_itmx.
        CLEAR lst_sales_itmx.

*====================================================================*
*  BAPI TEXT
*====================================================================*
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_debt_memo_dummy-posnr1
          IMPORTING
            output = lst_sales_text-itm_number.

        lst_sales_text-text_id    = v_tdid.
        lst_sales_text-langu      = sy-langu.
        lst_sales_text-format_col = c_format.
        lst_sales_text-text_line  = lst_debt_memo_dummy-stxh.

        APPEND lst_sales_text TO li_sales_text.
        CLEAR  lst_sales_text.
*====================================================================*
* Sales partner
*====================================================================*
        lst_sales_partn-partn_role = lst_debt_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_debt_memo_dummy-partner.

*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
        SELECT kunnr,
               vkorg,
               vtweg,
               spart " Division
          FROM knvv  " Customer Master Sales Data
          INTO TABLE @DATA(li_knvv)
          WHERE kunnr = @lst_sales_partn-partn_numb
          AND vkorg = @lst_sales_hdr_in-sales_org
          AND vtweg = @lst_sales_hdr_in-distr_chan
          AND spart = @lst_sales_hdr_in-division.
        IF sy-subrc NE 0.

          st_err_msg-msgid = lc_msgid.
          st_err_msg-msgty = lc_e.
          st_err_msg-msgno = lc_msgno.
          st_err_msg-msgv1 = lst_sales_partn-partn_numb.
          st_err_msg-msgv2 = lst_sales_hdr_in-sales_org.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: st_err_msg.
          CONTINUE.
        ENDIF. " IF sy-subrc NE 0

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_debt_memo_dummy-posnr1
          IMPORTING
            output = lst_sales_partn-itm_number.


        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
*====================================================================*
* Sales condition
*====================================================================*
* BOC by Lahiru on 09/21/2021 for OTCM-44200 with ED2K924570   *
        IF lst_debt_memo_dummy-uepos IS INITIAL.      " Condition record onlyy applicable for header components
* EOC by Lahiru on 09/21/2021 for OTCM-44200 with ED2K924570   *

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lst_debt_memo_dummy-posnr1
            IMPORTING
              output = lst_sales_cond-itm_number.

          lst_sales_condx-itm_number = lst_sales_cond-itm_number.
          lst_sales_cond-cond_type    = lst_debt_memo_dummy-kschl.

          IF lst_sales_cond-cond_type IS NOT INITIAL.
            lst_sales_condx-cond_type = abap_true.
          ELSE. " ELSE -> IF lst_sales_cond-cond_type IS NOT INITIAL
            lst_sales_condx-cond_type = abap_false.
          ENDIF. " IF lst_sales_cond-cond_type IS NOT INITIAL

          READ TABLE li_cond_class ASSIGNING FIELD-SYMBOL(<lfs_cond>) "  class
          WITH KEY kschl = lst_debt_memo_dummy-kschl
          BINARY SEARCH.
          IF sy-subrc IS INITIAL.
            IF <lfs_cond>-krech NE 'A'.
* begin by amohammed on 12/8/2020 tr # ed2k920719
              IF lst_debt_memo_dummy-waers IS NOT INITIAL.
                lst_sales_cond-cond_value = lst_debt_memo_dummy-kbetr.
              ELSE.
* End by AMOHAMMED on 12/8/2020 TR # ED2K920719
                lst_sales_cond-cond_value = lst_debt_memo_dummy-kbetr / 10.
              ENDIF.
            ELSE. " ELSE -> IF <lfs_cond>-krech NE 'A'
              lst_sales_cond-cond_value = lst_debt_memo_dummy-kbetr.
            ENDIF. " IF <lfs_cond>-krech NE 'A'
          ENDIF. " IF sy-subrc IS INITIAL


          IF lst_sales_cond-cond_value IS NOT INITIAL.
            lst_sales_condx-cond_value = abap_true.
          ELSE. " ELSE -> IF lst_sales_condx-cond_value IS NOT INITIAL
            lst_sales_condx-cond_value = abap_false.
          ENDIF. " IF lst_sales_condx-cond_value IS NOT INITIAL

* Begin by AMOHAMMED on 12/8/2020 TR # ED2K920719
          lst_sales_cond-currency = lst_debt_memo_dummy-waers.
          IF lst_sales_cond-currency IS NOT INITIAL.
            lst_sales_condx-currency = abap_true.
          ENDIF. " lst_sales_cond-currency IS NOT INITIAL
* End by AMOHAMMED on 12/8/2020 TR # ED2K920719

          READ TABLE li_konv ASSIGNING FIELD-SYMBOL(<lfs_konv>)
          WITH KEY vbeln = lst_debt_memo_dummy-vbeln
                   kposn = lst_debt_memo_dummy-posnr
                   kschl = lst_debt_memo_dummy-kschl
                   BINARY SEARCH.
          IF sy-subrc IS INITIAL.
            lst_sales_condx-cond_st_no   = <lfs_konv>-stunr.
            lst_sales_condx-cond_count   = <lfs_konv>-zaehk.
            lst_sales_condx-cond_st_no = <lfs_konv>-stunr.
            lst_sales_condx-cond_count = <lfs_konv>-zaehk.
            lst_sales_condx-updateflag = 'U'.
          ENDIF. " IF sy-subrc IS INITIAL

          APPEND lst_sales_cond TO li_sales_cond.
          CLEAR lst_sales_cond.

          APPEND lst_sales_condx TO li_sales_condx.
          CLEAR lst_sales_condx.

* for ZSCR ZTAX is mandatory
          IF lst_sales_hdr_in-doc_type = c_zscr.
            lst_sales_cond-itm_number   = lst_debt_memo_dummy-posnr.
            lst_sales_condx-itm_number  = lst_debt_memo_dummy-posnr.
            lst_sales_cond-cond_type  =  c_ztax.
            lst_sales_cond-cond_value = lst_debt_memo_dummy-tax.
            lst_sales_condx-cond_type = abap_true.

            APPEND lst_sales_cond TO li_sales_cond.
            CLEAR lst_sales_cond.

            APPEND lst_sales_condx TO li_sales_condx.
            CLEAR lst_sales_condx.
          ENDIF.

*====================================================================*
*      Item Condition Records
*====================================================================*
* For condition type KSCHL2
          PERFORM f_append_cond_typ USING lst_debt_memo_dummy-posnr
                                          lst_debt_memo_dummy-kschl2
                                          lst_debt_memo_dummy-kbetr2
                                    CHANGING  li_cond_class
                                              li_sales_cond
                                              li_sales_condx.


* For condition type KSCHL3
          PERFORM f_append_cond_typ USING lst_debt_memo_dummy-posnr
                                          lst_debt_memo_dummy-kschl3
                                          lst_debt_memo_dummy-kbetr3
                                    CHANGING  li_cond_class
                                              li_sales_cond
                                              li_sales_condx.

* BOC by Lahiru on 09/21/2021 for OTCM-44200 with ED2K924570   *
        ENDIF.
* EOC by Lahiru on 09/21/2021 for OTCM-44200 with ED2K924570   *
      ELSE. " ELSE -> IF sy-subrc IS NOT INITIAL
*====================================================================*
* Sales partner
*====================================================================*
        lst_sales_partn-partn_role = lst_debt_memo_dummy-parvw.
        lst_sales_partn-partn_numb = lst_debt_memo_dummy-partner.


*** Fetch Data from KNVV to chech if customer is extended to Sales Area or not
        SELECT kunnr,
               vkorg,
               vtweg,
               spart " Division
          FROM knvv  " Customer Master Sales Data
          INTO TABLE @li_knvv
          WHERE kunnr = @lst_sales_partn-partn_numb
          AND vkorg = @lst_sales_hdr_in-sales_org
          AND vtweg = @lst_sales_hdr_in-distr_chan
          AND spart = @lst_sales_hdr_in-division.
        IF sy-subrc NE 0.

          st_err_msg-msgid = lc_msgid.
          st_err_msg-msgty = lc_e.
          st_err_msg-msgno = lc_msgno.
          st_err_msg-msgv1 = lst_sales_partn-partn_numb.
          st_err_msg-msgv2 = lst_sales_hdr_in-sales_org.
          APPEND st_err_msg TO i_err_msg.

          CLEAR: st_err_msg.
          CONTINUE.
        ENDIF. " IF sy-subrc NE 0

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lst_debt_memo_dummy-posnr
          IMPORTING
            output = lst_sales_partn-itm_number.


        APPEND lst_sales_partn TO li_sales_partn.
        CLEAR lst_sales_partn.
      ENDIF. " IF sy-subrc IS NOT INITIAL
    ENDIF. " IF lst_debt_memo_dummy-posnr IS INITIAL

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278 - commented *
*   Before a new header record/ last entry - Create contract
*    IF lv_index EQ lines( li_create_debit ).
*      DATA(lv_create_debit) = abap_true.
*    ELSE. " ELSE -> IF lv_index EQ lines( li_create_credit )
*      IF li_create_debit[ ( lv_index + 1 ) ]-parvw EQ c_ag.
*        lv_create_debit = abap_true.
*      ENDIF. " IF li_create_credit[ ( lv_index + 1 ) ]-parvw EQ c_ag
*    ENDIF. " IF lv_index EQ lines( li_create_credit )
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278 - commented *

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
    AT END OF identifier.    " Single ZADR document is creating for entire identifier
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278 - commented *
*      IF lv_create_debit EQ abap_true.
*        CLEAR lv_create_debit.
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278 - commented *
*     Bapi call
      CALL FUNCTION 'SD_SALESDOCUMENT_CREATE'
        EXPORTING
          sales_header_in      = lst_sales_hdr_in
          sales_header_inx     = lst_sales_hdr_inx
        IMPORTING
          salesdocument_ex     = lv_debit_memo
        TABLES
          return               = li_return
          sales_items_in       = li_sales_itm
          sales_items_inx      = li_sales_itmx
          sales_partners       = li_sales_partn
          sales_conditions_in  = li_sales_cond
          sales_conditions_inx = li_sales_condx
          sales_text           = li_sales_text.

      IF NOT li_return IS INITIAL.
        READ TABLE li_return INTO lst_return WITH KEY type = 'E'. " Return into lst_ of type
        IF sy-subrc = 0.
          st_err_msg-msgid = lst_return-id.
          st_err_msg-msgty = lst_return-type.
          st_err_msg-msgno = lst_return-number.
          st_err_msg-msgv1 = lst_return-message_v1.
          st_err_msg-msgv2 = lst_return-message_v2.
          st_err_msg-msgv3 = lst_return-message_v3.
          st_err_msg-msgv4 = lst_return-message_v4.
          APPEND st_err_msg TO i_err_msg.
          CLEAR: lst_return, st_err_msg.
          CLEAR lst_return.
        ELSE. " ELSE -> IF sy-subrc = 0
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' .
          READ TABLE li_return INTO lst_return WITH KEY type = 'S'. " Return into lst_ of type
          IF sy-subrc IS INITIAL.
            st_err_msg-wbeln = lv_debit_memo.
            st_err_msg-msgid = lst_return-id.
            st_err_msg-msgty = lst_return-type.
            st_err_msg-msgno = lst_return-number.
            st_err_msg-msgv1 = lst_return-message_v1.
            st_err_msg-msgv2 = lst_return-message_v2.
            st_err_msg-msgv3 = lst_return-message_v3.
            st_err_msg-msgv4 = lst_return-message_v4.
            APPEND st_err_msg TO i_err_msg.
            CLEAR: lst_return, st_err_msg.
          ENDIF. " IF sy-subrc IS INITIAL
        ENDIF. " IF sy-subrc = 0
      ENDIF. " IF NOT li_return IS INITIAL
      CLEAR: lst_sales_hdr_in,
             lv_debit_memo,
             li_return,
             li_sales_itm,
             li_sales_partn,
             li_sales_cond,
* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278
             lv_validation_fail,
             lv_identifier_1,
             lv_identifier_2,
             v_duplicate_cnt,
             v_exist_zadr,
             v_log_index .
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278 - commented *
*      ENDIF. " IF lv_create_credit EQ abap_true
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278 - commented *

* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
    ENDAT.
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *

  ENDLOOP. " LOOP AT li_create_debit INTO DATA(lst_dbt_memo).

  PERFORM f_send_email_move_file.
  CALL FUNCTION 'WLF_PRINT_ERROR_MESSAGES_LIST'
    EXPORTING
      i_titlebar       = v_titlebar
      i_report         = sy-cprog
    TABLES
      t_error_messages = i_err_msg
    EXCEPTIONS
      program_error    = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DESELECT_DBT_LINES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_I_FINAL_DBM_CRT  text
*----------------------------------------------------------------------*
FORM f_deselect_dbt_lines  CHANGING fp_i_output TYPE tt_dbt_memo_crt.

  DATA(li_output) = fp_i_output.

  LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                    WHERE parvw EQ 'AG'.

    DATA(lv_tabix) = sy-tabix.

*    If header not selected, ignore corresponding items
    IF <lfs_output>-sel NE abap_true.

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*       Deselect Items
        CLEAR : <lfs_main_output>-sel.

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_main_output>)

    ELSE. " ELSE -> IF <lfs_output>-sel NE abap_true

*    If header selected, check corresponding items. If items are not
*    selected, deselect header

      lv_tabix = lv_tabix + 1.

      LOOP AT fp_i_output ASSIGNING <lfs_main_output>
                          FROM lv_tabix.

        IF <lfs_main_output>-parvw EQ 'AG'.
*           Exit when we get next header record
          EXIT.
        ENDIF. " IF <lfs_main_output>-parvw EQ 'AG'

*        Mark that line items exist in file
        DATA(lv_line_exists)  = abap_true.

*        If any of the line item is selected, mark the variable
        IF <lfs_main_output>-sel EQ abap_true.
          DATA(lv_line_selected) = abap_true.
        ENDIF. " IF <lfs_main_output>-sel EQ abap_true

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING <lfs_main_output>

*      If no line selected
      IF  lv_line_exists   EQ abap_true
      AND lv_line_selected NE abap_true.

*         Get back the header index
        lv_tabix = lv_tabix - 1.

        READ TABLE fp_i_output ASSIGNING <lfs_main_output>
        INDEX lv_tabix.

        IF <lfs_main_output> IS ASSIGNED.
*            Deselect Header
          CLEAR : <lfs_main_output>-sel.
        ENDIF. " IF <lfs_main_output> IS ASSIGNED

      ENDIF. " IF lv_line_exists EQ abap_true

      CLEAR : lv_line_selected,
              lv_line_exists.

    ENDIF. " IF <lfs_output>-sel NE abap_true

  ENDLOOP. " LOOP AT li_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_BOM_DEBIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->FP_MATNR  text
*      -->FP_PLANT text
*      -->FP_QUANTITY  text
*      -->FP_INDEX  text
*      -->FP_INCPO  text
*      <--FP_I_OUTPUT  text
*----------------------------------------------------------------------*
FORM f_get_bom_debit  USING
                         fp_matnr    TYPE matnr   " Material Number
                         fp_plant    TYPE werks_d " Plant
*                        Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
*                        fp_quantity TYPE char17   " Quantity of type CHAR17
                         fp_quantity TYPE fkimg " Quantity of type CHAR17
*                        End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                         fp_index    TYPE sy-tabix " ABAP System Field: Row Index of Internal Tables
                         fp_incpo    TYPE incpo    " Increment of item number in the SD document
* BOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059
*                CHANGING fp_i_output TYPE tt_crdt_memo_enh.
* Change in table structure
                CHANGING fp_i_output TYPE tt_dbt_memo_crt.
* EOC 23-FEB-2018 : DTIRUKOOVA : CR#6292: ED2K911059

* Local Internal table for BOM
  DATA : li_bom      TYPE STANDARD TABLE OF stpox INITIAL SIZE 0, " BOM Items (Extended for List Displays)
* Local Work Area for BOM Explosions
         lst_topmat  TYPE cstmat, " Start Material Display for BOM Explosions
* Local Variable for target Quantity
         lv_quantity TYPE basmn. " Base quantity

* Move character format to quantity format
  lv_quantity = fp_quantity.

  CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
    EXPORTING
      capid                 = 'SD01'      " Application ID
      datuv                 = sy-datum    " Date
      emeng                 = lv_quantity " Quantity
      salww                 = abap_true
      mtnrv                 = fp_matnr    " Material
      rndkz                 = '2'         " Round off: ' '=always, '1'=never, '2'=only levels > 1
      werks                 = fp_plant    " Plant
    IMPORTING
      topmat                = lst_topmat
    TABLES
      stb                   = li_bom
    EXCEPTIONS
      alt_not_found         = 1
      call_invalid          = 2
      material_not_found    = 3
      missing_authorization = 4
      no_bom_found          = 5
      no_plant_data         = 6
      no_suitable_bom_found = 7
      conversion_error      = 8
      OTHERS                = 9.
  IF sy-subrc IS INITIAL.

* Delete items which are not Sales Relevant
    DELETE li_bom WHERE rvrel IS INITIAL.

    IF li_bom IS NOT INITIAL.

*  Get total number of BOM item
      DATA(lv_bom_lines) = lines( li_bom ).

      LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
                                    FROM  fp_index.
        IF <lfs_output>-parvw EQ 'AG'.
          EXIT.
        ENDIF. " IF <lfs_output>-parvw EQ 'AG'
*    No need to change the first line item
        IF sy-tabix NE fp_index.
          <lfs_output>-posnr1 = <lfs_output>-posnr1 + ( lv_bom_lines * fp_incpo ).
        ENDIF. " IF sy-tabix NE fp_index

      ENDLOOP. " LOOP AT fp_i_output ASSIGNING FIELD-SYMBOL(<lfs_output>)
      CLEAR lst_topmat.
    ENDIF. " IF li_bom IS NOT INITIAL
  ENDIF. " IF sy-subrc IS INITIAL
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CURR_CONV_TO_INTRNL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LST_FINAL_WAERK  text
*      <--P_LST_FINAL_KBETR  text
*----------------------------------------------------------------------*
FORM f_curr_conv_to_intrnl USING p_lst_final-kunnr TYPE kunnr
                                 p_lst_final-parvw TYPE parvw
                                 p_lst_final-vkorg TYPE vkorg
                                 p_lst_final-vtweg TYPE vtweg
                                 p_lst_final-spart TYPE spart
                                 p_lst_final-vbeln TYPE vbeln
                           CHANGING p_lst_final-waerk TYPE waerk
                                    p_lst_final-kbetr TYPE kbetr.
  DATA : lv_curky  TYPE waerk,
         lv_kbetr  TYPE bapicurr_d,
         lv_return TYPE bapireturn.
  CONSTANTS : lv_max_digits TYPE i VALUE '23'.
  CLEAR : lv_curky, lv_return.
  " When the document currency is blank
  IF p_lst_final-waerk IS INITIAL.
    " When credit memo is created using upload file or select records radio button
    IF ( rb_crem IS NOT INITIAL AND ( rb_upd IS NOT INITIAL OR rb_sel IS NOT INITIAL ) ).
      " Fetch the document currency from VBRK based on Invoice
      SELECT SINGLE waerk
               FROM vbrk
               INTO @DATA(lv_waerk)
               WHERE vbeln EQ @p_lst_final-vbeln.
      IF sy-subrc EQ 0.
        lv_curky = lv_waerk.
        CLEAR lv_waerk.
      ENDIF.
      " When changing the subscription order using upload file radio button
      " When credit memo is changed using upload file or select records radio button
    ELSEIF rb_upd_m IS NOT INITIAL OR
       ( rb_crcg IS NOT INITIAL AND ( rb_upd1 IS NOT INITIAL OR rb_sel1 IS NOT INITIAL ) ).
      " Fetch the document currency from VBAK based on subscription order
      SELECT SINGLE waerk
               FROM vbak
               INTO lv_waerk
               WHERE vbeln EQ p_lst_final-vbeln.
      IF sy-subrc EQ 0.
        lv_curky = lv_waerk.
        CLEAR lv_waerk.
      ENDIF.
    ELSE.
      " In all other cases when partner function is "AG"
      IF p_lst_final-parvw EQ c_ag.
        " Fetch the document currency from KNVV based on
        " partner, sales org, distribution channel and division
        SELECT SINGLE waers
                 FROM knvv
                 INTO @DATA(lv_waers)
                WHERE kunnr EQ @p_lst_final-kunnr
                  AND vkorg EQ @p_lst_final-vkorg
                  AND vtweg EQ @p_lst_final-vtweg
                  AND spart EQ @p_lst_final-spart.
        IF sy-subrc EQ 0.
          lv_curky = lv_waers.
          FREE lv_waers.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    " When document currency is not blank
    lv_curky = p_lst_final-waerk.
  ENDIF.
  IF lv_curky IS NOT INITIAL.
    p_lst_final-waerk = lv_curky.
    IF p_lst_final-kbetr IS NOT INITIAL.
      lv_kbetr = p_lst_final-kbetr.
      " Conver the price value to internal format based on currency
      CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_INTERNAL'
        EXPORTING
          currency             = lv_curky
          amount_external      = lv_kbetr
          max_number_of_digits = lv_max_digits
        IMPORTING
          amount_internal      = p_lst_final-kbetr
          return               = lv_return.
    ENDIF.
  ENDIF.
  FREE : lv_waerk, lv_curky, lv_kbetr, lv_return.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SFILE_APP_DBT_SUBMIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LI_FINAL_DBM_CRT  text
*----------------------------------------------------------------------*
FORM f_sfile_app_dbt_submit USING p_li_final_dbm_crt TYPE tt_dbt_memo_crt.
*** Local Constant Declaration
  CONSTANTS: lc_pipe       TYPE c VALUE '|',        " Tab of type Character
             lc_semico     TYPE char1 VALUE ';',    " Semico of type CHAR1
             lc_underscore TYPE char1 VALUE '_',    " Underscore of type CHAR1
             lc_slash      TYPE char1 VALUE '/',    " Slash of type CHAR1
             lc_extn       TYPE char4 VALUE '.csv', " Extn of type CHAR4
             lc_job_name   TYPE btcjob VALUE 'ZORDER_UPD'. " Background job name
**** Local field symbol declaration
  FIELD-SYMBOLS: <lfs_final_csv> TYPE LINE OF truxs_t_text_data.
*** Local structure and internal table declaration
  DATA: lst_final_csv TYPE LINE OF truxs_t_text_data,
        li_final_csv  TYPE truxs_t_text_data.

  DATA: lv_job_number TYPE tbtcjob-jobcount, " Job Count
        lv_job_name   TYPE tbtcjob-jobname,  " Job Name
        lv_user       TYPE sy-uname,         " User Name
        lv_pre_chk    TYPE btcckstat.        " variable for pre. job status

  DATA: lv_fkimg  TYPE char13, " Fkimg of type CHAR13
        lv_kbetr  TYPE char11, " Kbetr of type CHAR11
        lv_kbetr2 TYPE char11, " Kbetr of type CHAR11
        lv_kbetr3 TYPE char11, " Kbetr of type CHAR11
        lv_tax    TYPE char11. " Tax of type CHAR11

  LOOP AT p_li_final_dbm_crt ASSIGNING FIELD-SYMBOL(<lfs_dbt>).
    CLEAR : lst_final_csv, lv_fkimg, lv_kbetr, lv_kbetr2, lv_kbetr3.

    lv_fkimg = <lfs_dbt>-fkimg.
    lv_kbetr = <lfs_dbt>-kbetr.
    lv_kbetr2 = <lfs_dbt>-kbetr2.
    lv_kbetr3 = <lfs_dbt>-kbetr3.
    lv_tax = <lfs_dbt>-tax.
    CONDENSE : lv_fkimg NO-GAPS, lv_kbetr NO-GAPS,
               lv_kbetr2 NO-GAPS, lv_kbetr3 NO-GAPS,
               lv_tax NO-GAPS.
    CONCATENATE <lfs_dbt>-sel
* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
                <lfs_dbt>-identifier        " Add identifier to the file
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
                <lfs_dbt>-customer
                <lfs_dbt>-parvw
                <lfs_dbt>-partner
                <lfs_dbt>-vkorg
                <lfs_dbt>-vtweg
                <lfs_dbt>-spart
                <lfs_dbt>-auart
                <lfs_dbt>-xblnr
                <lfs_dbt>-zlsch
                <lfs_dbt>-augru
                <lfs_dbt>-vbeln
                <lfs_dbt>-posnr
                <lfs_dbt>-posnr1
                <lfs_dbt>-matnr
                <lfs_dbt>-plant
                lv_fkimg
                <lfs_dbt>-stxh
                <lfs_dbt>-kschl
                lv_kbetr
                <lfs_dbt>-waers
                <lfs_dbt>-kschl2
                lv_kbetr2
                <lfs_dbt>-kschl3
                lv_kbetr3
                <lfs_dbt>-ihrez
                <lfs_dbt>-kdkg3
                <lfs_dbt>-vkbur
                <lfs_dbt>-bstnk
                <lfs_dbt>-bsark
                <lfs_dbt>-pstyv
                lv_tax
          INTO lst_final_csv SEPARATED BY lc_pipe.

    APPEND lst_final_csv TO li_final_csv.
    CLEAR:lst_final_csv,lv_fkimg,lv_kbetr.
  ENDLOOP.

  CONCATENATE 'ZORDER_UPD'
              lc_underscore
              sy-uname
              lc_underscore
              sy-datum
              lc_underscore
              sy-uzeit
              lc_extn
              INTO
              v_path_fname.

  PERFORM f_get_file_path USING  v_path_fname.
  OPEN DATASET v_path_fname FOR OUTPUT IN TEXT MODE ENCODING DEFAULT. " Output type
  LOOP AT li_final_csv INTO lst_final_csv.
    TRANSFER lst_final_csv TO v_path_fname.
  ENDLOOP. " LOOP AT li_final_csv INTO lst_final_csv
  CLOSE DATASET v_path_fname.

**** Submit Program
  CLEAR lv_job_name.
  CONCATENATE lc_job_name '_' sy-datum '_' sy-uzeit '_' sy-uname  INTO lv_job_name.

  lv_user = sy-uname.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = text-066.

  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname          = lv_job_name
    IMPORTING
      jobcount         = lv_job_number
    EXCEPTIONS
      cant_create_job  = 1
      invalid_job_data = 2
      jobname_missing  = 3
      OTHERS           = 4.
  IF sy-subrc = 0.
    v_job_name = lv_job_name.
    p_job   = lv_job_name.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*    SUBMIT zqtcr_subscrip_order_upload  WITH rb_crea  = rb_crea
*                                        WITH rb_cros  = rb_cros
*                                        WITH rb_modi  = rb_modi
*                                        WITH rb_sel_m = rb_sel_m
*                                        WITH rb_upd_m = rb_upd_m
*                                        WITH rb_crem = rb_crem
*                                        WITH rb_sel = rb_sel
*                                        WITH rb_upd = rb_upd
*                                        WITH rb_crcg = rb_crcg
*                                        WITH rb_sel1 =  rb_sel1
*                                        WITH rb_upd1 =  rb_upd1
*                                        WITH rb_dm_cr =  rb_dm_cr
*                                        WITH rb_or_ct =  rb_or_ct
*                                        WITH rb_or_cn = rb_or_cn
*                                        WITH rb_sel2 = rb_sel2
*                                        WITH rb_upd2 = rb_upd2
*                                        WITH s_date IN s_date
*                                        WITH s_vbeln IN s_vbeln
*                                        WITH s_bstnk  IN s_bstnk
*                                        WITH s_userid IN s_userid
*                                        WITH s_invo IN s_invo
*                                        WITH s_doc  IN s_doc
*                                        WITH s_inv  IN s_inv
*                                        WITH s_cmr  IN s_cmr
*                                        WITH s_bstnk1 IN s_bstnk1
*                                        WITH s_promo  IN s_promo
*                                        WITH s_matnr  IN s_matnr
*                                        WITH s_crd_by IN s_crd_by
*                                        WITH s_ord_dt IN s_ord_dt
*                                        WITH s_order  IN s_order
*                                        WITH s_bstnk2 IN s_bstnk2
*                                        WITH s_promo1 IN s_promo1
*                                        WITH s_matnr1 IN s_matnr1
*                                        WITH s_user1  IN s_user1
*                                        WITH p_file  = p_file
*                                        WITH p_a_file = v_path_fname
*                                        WITH p_job    = p_job
*                                        WITH p_userid = sy-uname
*                                        USER  'QTC_BATCH01'
*                                        VIA JOB lv_job_name NUMBER lv_job_number
*                                        AND RETURN.
    SUBMIT zqtcr_subscrip_order_upload_v1  WITH rb_crea  = rb_crea
                                        WITH rb_cros  = rb_cros
                                        WITH rb_modi  = rb_modi
                                        WITH rb_sel_m = rb_sel_m
                                        WITH rb_upd_m = rb_upd_m
                                        WITH rb_crem = rb_crem
                                        WITH rb_sel = rb_sel
                                        WITH rb_upd = rb_upd
                                        WITH rb_crcg = rb_crcg
                                        WITH rb_sel1 =  rb_sel1
                                        WITH rb_upd1 =  rb_upd1
                                        WITH rb_dm_cr =  rb_dm_cr
                                        WITH rb_or_ct =  rb_or_ct
                                        WITH rb_or_cn = rb_or_cn
                                        WITH rb_sel2 = rb_sel2
                                        WITH rb_upd2 = rb_upd2
                                        WITH s_date IN s_date
                                        WITH s_vbeln IN s_vbeln
                                        WITH s_bstnk  IN s_bstnk
                                        WITH s_userid IN s_userid
                                        WITH s_invo IN s_invo
                                        WITH s_doc  IN s_doc
                                        WITH s_inv  IN s_inv
                                        WITH s_cmr  IN s_cmr
                                        WITH s_bstnk1 IN s_bstnk1
                                        WITH s_promo  IN s_promo
                                        WITH s_matnr  IN s_matnr
                                        WITH s_crd_by IN s_crd_by
                                        WITH s_ord_dt IN s_ord_dt
                                        WITH s_order  IN s_order
                                        WITH s_bstnk2 IN s_bstnk2
                                        WITH s_promo1 IN s_promo1
                                        WITH s_matnr1 IN s_matnr1
                                        WITH s_user1  IN s_user1
                                        WITH p_file  = p_file
                                        WITH p_a_file = v_path_fname
                                        WITH p_job    = p_job
                                        WITH p_userid = sy-uname
                                        WITH p_devid  = p_devid   " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        WITH p_v_oid  = v_oid     " NPALLA ED2K924398 OTCM-47267 ++ Add
                                        USER  'QTC_BATCH01'
                                        VIA JOB lv_job_name NUMBER lv_job_number
                                        AND RETURN.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

** close the background job for successor jobs
    CALL FUNCTION 'JOB_CLOSE'
      EXPORTING
        jobname              = lv_job_name
        jobcount             = lv_job_number
        predjob_checkstat    = lv_pre_chk
        sdlstrtdt            = sy-datum
        sdlstrttm            = sy-uzeit
      EXCEPTIONS
        cant_start_immediate = 01
        invalid_startdate    = 02
        jobname_missing      = 03
        job_close_failed     = 04
        job_nosteps          = 05
        job_notex            = 06
        lock_failed          = 07
        OTHERS               = 08.
    IF sy-subrc = 0.

    ENDIF. " IF sy-subrc = 0
  ENDIF. " IF sy-subrc = 0
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_READ_FROM_APP_DBT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_read_from_app_dbt .
  DATA : lv_string        TYPE string,
         lv_fkimg         TYPE char13, " Fkimg of type CHAR13
         lv_kbetr         TYPE char11, " Kbetr of type CHAR11
         lv_kbetr2        TYPE char11, " Kbetr2 of type CHAR11
         lv_kbetr3        TYPE char11, " Kbetr3 of type CHAR11
         lv_tax1          TYPE char11, " Tax of type CHAR11   " NPOLINA ERP7763
         lst_dbt_memo_crt TYPE ty_dbt_memo_crt.

  OPEN DATASET p_a_file FOR INPUT IN TEXT MODE ENCODING DEFAULT. " Set as Ready for Input
  IF sy-subrc NE 0.
    MESSAGE e100(zqtc_r2). " File does not transfer to Application server
    LEAVE LIST-PROCESSING.
  ENDIF. " IF sy-subrc NE 0

  DO.
    READ DATASET p_a_file INTO lv_string.
    IF sy-subrc EQ 0.
      SPLIT lv_string AT '|' INTO lst_dbt_memo_crt-sel
* BOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
                                  lst_dbt_memo_crt-identifier   " Identifier read from file
* EOC by Lahiru on 05/11/2021 for OTCM-44200 with ED2K923278  *
                                  lst_dbt_memo_crt-customer
                                  lst_dbt_memo_crt-parvw
                                  lst_dbt_memo_crt-partner
                                  lst_dbt_memo_crt-vkorg
                                  lst_dbt_memo_crt-vtweg
                                  lst_dbt_memo_crt-spart
                                  lst_dbt_memo_crt-auart
                                  lst_dbt_memo_crt-xblnr
                                  lst_dbt_memo_crt-zlsch
                                  lst_dbt_memo_crt-augru
                                  lst_dbt_memo_crt-vbeln
                                  lst_dbt_memo_crt-posnr
                                  lst_dbt_memo_crt-posnr1
                                  lst_dbt_memo_crt-matnr
                                  lst_dbt_memo_crt-plant
                                  lv_fkimg
                                  lst_dbt_memo_crt-stxh
                                  lst_dbt_memo_crt-kschl
                                  lv_kbetr
                                  lst_dbt_memo_crt-waers
                                  lst_dbt_memo_crt-kschl2
                                  lv_kbetr2
                                  lst_dbt_memo_crt-kschl3
                                  lv_kbetr3
                                  lst_dbt_memo_crt-ihrez
                                  lst_dbt_memo_crt-kdkg3
                                  lst_dbt_memo_crt-vkbur
                                  lst_dbt_memo_crt-bstnk
                                  lst_dbt_memo_crt-bsark
                                  lst_dbt_memo_crt-pstyv
                                  lv_tax1.

      MOVE lv_fkimg  TO lst_dbt_memo_crt-fkimg.
      MOVE lv_kbetr  TO lst_dbt_memo_crt-kbetr.
      MOVE lv_kbetr2 TO lst_dbt_memo_crt-kbetr2.
      MOVE lv_kbetr3 TO lst_dbt_memo_crt-kbetr3.
      MOVE lv_tax1 TO lst_dbt_memo_crt-tax.

      APPEND lst_dbt_memo_crt TO i_final_dbm_crt.
      CLEAR  lst_dbt_memo_crt.
    ELSE. " ELSE -> IF sy-subrc EQ 0
      EXIT.
    ENDIF. " IF sy-subrc EQ 0
  ENDDO.
  CLOSE DATASET p_a_file.
ENDFORM.

FORM f_get_reference_data  CHANGING fp_i_final_dbm_crt TYPE tt_dbt_memo_crt.

  FREE : i_dbt_vbpa,
         i_vbak_vbap,
         i_dbt_konv,
         v_bsark,
         v_ord_reason.

  DATA(li_tmp_dbt_memo) = fp_i_final_dbm_crt[].   " data copy to temporary table for further processing.
  DATA(li_tmp_constant) = i_const[].              " Constatnt entries for tmp table

  " Sort record set and delete reference contract is blank records
  SORT li_tmp_dbt_memo BY vbeln.
  DELETE li_tmp_dbt_memo WHERE vbeln IS INITIAL.
* BOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *
  IF li_tmp_dbt_memo[] IS NOT INITIAL.        " Check records is having the reference contract number
* EOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *
    " Keep only WRICEF ID is equals to E101
    SORT li_tmp_constant BY devid.
    DELETE li_tmp_constant WHERE devid NE c_e101. "c_devid.  OTCM-47267

    SORT li_tmp_constant BY param1 param2 srno .

    " Read ship to party partner function for debit memo
    READ TABLE li_tmp_constant ASSIGNING FIELD-SYMBOL(<lfs_tmpconstant>) WITH KEY param1 = c_parvw_dbt
                                                                                  param2 = c_part_role_dbt
                                                                                  srno   = c_srno_2 BINARY SEARCH.
    IF sy-subrc = 0.
      DATA(lv_parvw) = <lfs_tmpconstant>-low.
    ENDIF.

    " Read customer PO type for debit memo
    READ TABLE li_tmp_constant ASSIGNING <lfs_tmpconstant> WITH KEY param1 = c_bsark_dbt BINARY SEARCH.
    IF sy-subrc = 0.
      v_bsark = <lfs_tmpconstant>-low.
    ENDIF.

    " Read order reason for acquisition debit memo
    READ TABLE li_tmp_constant ASSIGNING <lfs_tmpconstant> WITH KEY param1 = c_augru BINARY SEARCH.
    IF sy-subrc = 0.
      v_ord_reason = <lfs_tmpconstant>-low.
    ENDIF.

    " Fetch all the header ship to party's by passing the reference contract no
    SELECT vbeln,parvw,kunnr
      FROM vbpa INTO TABLE @i_dbt_vbpa
      FOR ALL ENTRIES IN @li_tmp_dbt_memo
      WHERE vbeln = @li_tmp_dbt_memo-vbeln   AND
            parvw = @lv_parvw                AND
            posnr = @c_header.
    IF sy-subrc = 0.
      SORT i_dbt_vbpa BY vbeln.
    ENDIF.

    " Fecth line item details for particular contract number
    SELECT a~vbeln,
           a~augru,
           a~waerk,
           a~vkorg,
           a~vtweg,
           a~spart,
           a~vkbur,
           a~knumv,
           b~posnr,
           b~matnr,
           b~abgru,
           b~werks,
           b~uepos,  "OTCM-44200 Prabhu 7/7/2021
           b~zmeng
      FROM vbak AS a
      INNER JOIN vbap AS b
      ON a~vbeln = b~vbeln
      INTO TABLE @i_vbak_vbap
      FOR ALL ENTRIES IN @li_tmp_dbt_memo
      WHERE a~vbeln = @li_tmp_dbt_memo-vbeln.
    IF sy-subrc = 0.
      SORT i_vbak_vbap BY vbeln posnr.
    ENDIF.

    IF i_vbak_vbap IS NOT INITIAL.
      " Fecth ZMPR pricing details
      SELECT knumv,kposn,kschl,kbetr
        FROM konv INTO TABLE @i_dbt_konv
        FOR ALL ENTRIES IN @i_vbak_vbap
        WHERE knumv = @i_vbak_vbap-knumv    AND
              kposn = @i_vbak_vbap-posnr    AND
              kschl = @c_zmpr               AND
              kinak = @space.
      IF sy-subrc = 0.
        SORT i_dbt_konv BY knumv kposn.
      ENDIF.
    ENDIF.

    " Fill ALV output from derived data
    PERFORM f_fill_alv_output TABLES i_vbak_vbap
                                     i_dbt_vbpa
                                     i_dbt_konv
                              CHANGING fp_i_final_dbm_crt.
* BOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *
  ELSE.   " Reference Contrat not in the file
    MESSAGE s601(zqtc_r2) DISPLAY LIKE c_errtype.
    LEAVE LIST-PROCESSING.
* EOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *
  ENDIF.

ENDFORM.

FORM f_fill_alv_output TABLES fp_i_vbak_vbap TYPE tt_vbak_vbap
                              fp_i_dbt_vbpa  TYPE tt_dbt_vbpa
                              fp_i_dbt_konv  TYPE tt_dbt_konv
                        CHANGING fp_i_final_dbm_crt_sub TYPE tt_dbt_memo_crt .

  DATA : lv_tabix       TYPE sy-tabix,
         lv_target_item TYPE posnr,
         li_tmp_dbt_crt TYPE STANDARD TABLE OF ty_dbt_memo_crt INITIAL SIZE 0,
         lv_vkorg       TYPE vkorg,
         lv_spart       TYPE spart,
         lv_vtweg       TYPE vtweg.

  FREE : lv_tabix ,lv_target_item,lv_vkorg,lv_spart,lv_vtweg.

  " Copy existing data into temporary table for sales office fetching
  DATA(li_dmb_crt_tmp) = fp_i_final_dbm_crt_sub[].

  " Copy existing contract data into temporary table for sales office fetching
  DATA(li_tmp_vbak)    = fp_i_vbak_vbap[].
  SORT li_tmp_vbak BY vbeln.
  DELETE ADJACENT DUPLICATES FROM li_tmp_vbak COMPARING vbeln.

  IF li_dmb_crt_tmp IS   NOT INITIAL.
    LOOP AT fp_i_final_dbm_crt_sub ASSIGNING FIELD-SYMBOL(<lfs_final_dbm_crt_sub>).

* BOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *
      IF <lfs_final_dbm_crt_sub>-identifier IS NOT INITIAL AND <lfs_final_dbm_crt_sub>-customer IS INITIAL.
        MESSAGE s603(zqtc_r2) DISPLAY LIKE c_errtype.
        LEAVE LIST-PROCESSING.
      ELSEIF <lfs_final_dbm_crt_sub>-identifier IS NOT INITIAL AND <lfs_final_dbm_crt_sub>-parvw IS INITIAL.
        MESSAGE s604(zqtc_r2) DISPLAY LIKE c_errtype.
        LEAVE LIST-PROCESSING.
      ENDIF.
* EOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *

      " Assign identifier for upload file line items
      IF <lfs_final_dbm_crt_sub>-identifier IS NOT INITIAL AND <lfs_final_dbm_crt_sub>-parvw = c_ag AND
                           <lfs_final_dbm_crt_sub>-vbeln IS INITIAL.                           .
        DATA(lv_identifier) = <lfs_final_dbm_crt_sub>-identifier.    " Set identifier for local variable

        lv_tabix = sy-tabix.           " Current index of the row
        lv_tabix = lv_tabix + 1.       " Get next index of the internal table

        " Read next row with index and Get the sales office from upload file line item 1st contract and
        " assign to upload file header level
        READ TABLE li_dmb_crt_tmp ASSIGNING FIELD-SYMBOL(<lfs_dmb_crt_tmp>) INDEX lv_tabix.
        IF sy-subrc = 0.
          READ TABLE li_tmp_vbak INTO DATA(lst_tmp_vbak) WITH KEY vbeln = <lfs_dmb_crt_tmp>-vbeln BINARY SEARCH.
          IF sy-subrc = 0.
            <lfs_final_dbm_crt_sub>-vkbur = lst_tmp_vbak-vkbur.
          ENDIF.
        ENDIF.
        CLEAR lv_tabix.
      ELSE.
        <lfs_final_dbm_crt_sub>-identifier = lv_identifier.    " Identifier assign to upload file line items
      ENDIF.
    ENDLOOP.
  ENDIF.

  " Fill ALV output
  IF fp_i_final_dbm_crt_sub IS NOT INITIAL.

    SORT fp_i_final_dbm_crt_sub BY vbeln.
    SORT fp_i_vbak_vbap BY vbeln.

    LOOP AT fp_i_final_dbm_crt_sub ASSIGNING <lfs_final_dbm_crt_sub>.
      IF <lfs_final_dbm_crt_sub>-vbeln IS NOT INITIAL.  " Consider only upload file line items
        IF fp_i_vbak_vbap[] IS NOT INITIAL.
          READ TABLE fp_i_vbak_vbap ASSIGNING FIELD-SYMBOL(<lfs_vbak_vbap>) WITH KEY vbeln = <lfs_final_dbm_crt_sub>-vbeln BINARY SEARCH.
          IF sy-subrc = 0.
            lv_tabix = sy-tabix.
            " Applying pararel cursor method
            LOOP AT fp_i_vbak_vbap ASSIGNING <lfs_vbak_vbap> FROM lv_tabix.
              IF <lfs_final_dbm_crt_sub>-vbeln NE <lfs_vbak_vbap>-vbeln.
                EXIT.
              ENDIF.

              " Append contract line item details to temporary table
              APPEND INITIAL LINE TO li_tmp_dbt_crt ASSIGNING FIELD-SYMBOL(<lfs_tmp_vbap>).
              <lfs_tmp_vbap>-identifier = <lfs_final_dbm_crt_sub>-identifier.
              <lfs_tmp_vbap>-stxh  = <lfs_final_dbm_crt_sub>-stxh.
              <lfs_tmp_vbap>-vbeln = <lfs_vbak_vbap>-vbeln.
              <lfs_tmp_vbap>-posnr = <lfs_vbak_vbap>-posnr.
              <lfs_tmp_vbap>-matnr = <lfs_vbak_vbap>-matnr.
              <lfs_tmp_vbap>-plant = <lfs_vbak_vbap>-werks.
              <lfs_tmp_vbap>-uepos = <lfs_vbak_vbap>-uepos. "OTCM-44200 Prabhu 7/7/2021
              <lfs_tmp_vbap>-fkimg = <lfs_vbak_vbap>-zmeng.
              <lfs_tmp_vbap>-waers = <lfs_vbak_vbap>-waerk.
* BOC by Lahiru on 07/27/2021 for OTCM-44200 with  ED2K924094  *
              <lfs_tmp_vbap>-bstnk  = <lfs_final_dbm_crt_sub>-bstnk.
* EOC by Lahiru on 07/27/2021 for OTCM-44200 with  ED2K924094  *


              " Read ship to party details
              IF fp_i_dbt_vbpa[] IS NOT INITIAL.
                READ TABLE fp_i_dbt_vbpa ASSIGNING FIELD-SYMBOL(<lfs_dbt_vbpa>) WITH KEY vbeln = <lfs_vbak_vbap>-vbeln BINARY SEARCH.
                IF sy-subrc = 0.
                  <lfs_tmp_vbap>-customer = <lfs_dbt_vbpa>-kunnr.
                  <lfs_tmp_vbap>-parvw    = <lfs_dbt_vbpa>-parvw.
                  <lfs_tmp_vbap>-partner  = <lfs_dbt_vbpa>-kunnr.
                ENDIF.
              ENDIF.

              " Read pricing details details
              IF fp_i_dbt_konv[] IS NOT INITIAL.
                READ TABLE fp_i_dbt_konv ASSIGNING FIELD-SYMBOL(<lfs_dbt_konv>) WITH KEY knumv = <lfs_vbak_vbap>-knumv
                                                                                         kposn = <lfs_vbak_vbap>-posnr BINARY SEARCH.
                IF sy-subrc = 0.    " if found record with ZMPR pricing
                  <lfs_tmp_vbap>-kschl = <lfs_dbt_konv>-kschl.
                  <lfs_tmp_vbap>-kbetr = <lfs_dbt_konv>-kbetr.
                ELSE.              "  Record not found with ZMPR and value should be 0 with conition type
                  <lfs_tmp_vbap>-kschl = c_zmpr.
                  <lfs_tmp_vbap>-kbetr = 0.
                ENDIF.
              ENDIF.
            ENDLOOP.
* BOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *
          ELSE.         " hold the process when it compare the file level contract & DB level contract
            " data not in the database
            MESSAGE s602(zqtc_r2) WITH <lfs_final_dbm_crt_sub>-vbeln DISPLAY LIKE c_errtype.
            LEAVE LIST-PROCESSING.
          ENDIF.
        ELSE.     " File includes only one record and validate with the DB level
          READ TABLE fp_i_vbak_vbap INTO DATA(lfs_vbak_vbap) WITH KEY vbeln = <lfs_final_dbm_crt_sub>-vbeln BINARY SEARCH.
          IF sy-subrc NE 0.
            " data not in the database
            MESSAGE s602(zqtc_r2) WITH <lfs_final_dbm_crt_sub>-vbeln DISPLAY LIKE c_errtype.
            LEAVE LIST-PROCESSING.
          ENDIF.
        ENDIF.
* EOC by Lahiru on 06/01/2021 for OTCM-44200 with ED2K923650  *
      ELSE.       " Consider Header level and assign order/ customer Po type and order reason
        <lfs_final_dbm_crt_sub>-auart = c_zadr.   " ZADR document type
        <lfs_final_dbm_crt_sub>-bsark = v_bsark.  " Customer PO type
        <lfs_final_dbm_crt_sub>-augru = v_ord_reason. " Order reason
      ENDIF.
    ENDLOOP.

    " Append reference contract line item to alv output
    APPEND LINES OF li_tmp_dbt_crt TO fp_i_final_dbm_crt_sub.
    SORT fp_i_final_dbm_crt_sub BY identifier
                                   parvw
                                   customer
                                   vbeln
                                   posnr.

    " Delete the customer number is blank value.(This record added through the pararel processing)
    DELETE fp_i_final_dbm_crt_sub WHERE customer = space.

    " Identifier wise populate the target line item
    IF fp_i_final_dbm_crt_sub IS NOT INITIAL.
      LOOP AT fp_i_final_dbm_crt_sub ASSIGNING <lfs_final_dbm_crt_sub>.
        AT NEW identifier.    " Clear existing target line item with new identifier
          CLEAR lv_target_item.
        ENDAT.
        IF <lfs_final_dbm_crt_sub>-vbeln IS NOT INITIAL.
          "generate target line of the ZADR document
          lv_target_item = lv_target_item + 10.
          <lfs_final_dbm_crt_sub>-posnr1 = lv_target_item.
          <lfs_final_dbm_crt_sub>-vkorg = lv_vkorg.
          <lfs_final_dbm_crt_sub>-vtweg = lv_vtweg.
          <lfs_final_dbm_crt_sub>-spart = lv_spart.
        ELSE.   " get sales area data considering the header record in upload file
          lv_vkorg = <lfs_final_dbm_crt_sub>-vkorg.
          lv_vtweg = <lfs_final_dbm_crt_sub>-vtweg.
          lv_spart = <lfs_final_dbm_crt_sub>-spart.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDIF.

ENDFORM.

FORM f_zadr_validations TABLES fp_i_dbt_knvv           TYPE tt_dbt_knvv
                               fp_i_vbak_vbap          TYPE tt_vbak_vbap
                               fp_i_dbt_vbak_vbfa      TYPE tt_dbt_vbfa
                        USING  fp_lst_debt_memo_dummy  TYPE ty_dbt_memo_crt
                               fp_lst_header_tmp       TYPE ty_dbt_memo_crt
                        CHANGING fp_lv_identifier_1    TYPE posnr_va
                                 fp_lv_identifier_2    TYPE posnr_va
                                 fp_lv_validation_fail TYPE char1.

  " Validate Sold2party Document currency and Contract header document currency
  PERFORM f_validate_doc_currecy TABLES fp_i_dbt_knvv
                                 USING fp_lst_header_tmp fp_lst_debt_memo_dummy
                                 CHANGING fp_lv_validation_fail fp_lv_identifier_1 fp_lv_identifier_2.

  " Validate contract sales area and and file level sales area
  IF fp_lv_validation_fail IS INITIAL.
    PERFORM f_validate_sales_area TABLES fp_i_vbak_vbap
                                  USING fp_lst_header_tmp fp_lst_debt_memo_dummy
                                  CHANGING fp_lv_validation_fail fp_lv_identifier_1 fp_lv_identifier_2.
  ENDIF.

  " Validate order reason
  IF fp_lv_validation_fail IS INITIAL.
    PERFORM f_validate_ord_reason TABLES fp_i_vbak_vbap
                                  USING  fp_lst_debt_memo_dummy
                                  CHANGING fp_lv_validation_fail fp_lv_identifier_1 fp_lv_identifier_2.
  ENDIF.

  " Validate order rejection reason
  IF fp_lv_validation_fail IS INITIAL.
    PERFORM f_validate_ord_rejection TABLES fp_i_vbak_vbap
                                     USING  fp_lst_debt_memo_dummy
                                     CHANGING fp_lv_validation_fail fp_lv_identifier_1 fp_lv_identifier_2.
  ENDIF.

  " Validate multiple ZADR's
  IF fp_lv_validation_fail IS INITIAL.
    PERFORM f_validate_multiple_zadr TABLES fp_i_dbt_vbak_vbfa
                                     USING fp_lst_debt_memo_dummy
                                     CHANGING fp_lv_validation_fail fp_lv_identifier_1 fp_lv_identifier_2.
  ENDIF.

  " Validate Duplicate orders from upload file
  IF fp_lv_validation_fail IS INITIAL.
    PERFORM f_validate_dup_orders TABLES i_final_dbm_crt
                                  USING fp_lst_debt_memo_dummy
                                  CHANGING fp_lv_validation_fail fp_lv_identifier_1 fp_lv_identifier_2.
  ENDIF.

ENDFORM.

FORM f_validate_doc_currecy TABLES   fp_i_dbt_knvv           TYPE tt_dbt_knvv
                            USING    fp_lst_header_tmp       TYPE ty_dbt_memo_crt
                                     fp_lst_debt_memo_dummy  TYPE ty_dbt_memo_crt
                            CHANGING fp_lv_validation_fail   TYPE char1
                                     fp_lv_identifier_1      TYPE posnr_va
                                     fp_lv_identifier_2      TYPE posnr_va.

  " Check whether Sold to party doc currency is equal to Document header currency
  IF fp_i_dbt_knvv[] IS NOT INITIAL.
    READ TABLE fp_i_dbt_knvv ASSIGNING FIELD-SYMBOL(<lfs_dbt_knvv>) WITH KEY kunnr = fp_lst_header_tmp-customer
                                                                             vkorg = fp_lst_header_tmp-vkorg
                                                                             vtweg = fp_lst_header_tmp-vtweg
                                                                             spart = fp_lst_header_tmp-spart BINARY SEARCH.
    IF sy-subrc = 0.
      " Check whether Sold to party doc currency is equal to Document header currency
      IF <lfs_dbt_knvv>-waers NE fp_lst_debt_memo_dummy-waers.
        fp_lv_validation_fail = abap_true.
        fp_lv_identifier_1 = fp_lst_debt_memo_dummy-identifier.
        v_log_index = 1.
        PERFORM f_genarate_log USING v_log_index                " genarate the log message with log index
                                     fp_lv_identifier_1
                                     fp_lst_debt_memo_dummy
                                     fp_lv_identifier_2.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

FORM f_validate_ord_reason  TABLES   fp_vbak_vbap           TYPE tt_vbak_vbap
                            USING    fp_lst_debt_memo_dummy TYPE ty_dbt_memo_crt
                            CHANGING fp_lv_validation_fail  TYPE char1
                                     fp_lv_identifier_1     TYPE posnr_va
                                     fp_lv_identifier_2     TYPE posnr_va.

  DATA(li_vbak_vbap_tmp) = fp_vbak_vbap[].
  SORT li_vbak_vbap_tmp BY vbeln.
  DELETE ADJACENT DUPLICATES FROM li_vbak_vbap_tmp COMPARING vbeln.

  IF li_vbak_vbap_tmp[] IS NOT INITIAL. " Check whether itab empty or not
    READ TABLE li_vbak_vbap_tmp ASSIGNING FIELD-SYMBOL(<lfs_vbak_vbap_tmp>) WITH KEY vbeln = fp_lst_debt_memo_dummy-vbeln BINARY SEARCH.
    IF sy-subrc = 0.
      IF <lfs_vbak_vbap_tmp>-augru NE v_augru.    " Check contract order reason is equal to 'A10'.If NE 'A10' hold the entire data set without processing
        fp_lv_validation_fail = abap_true.
        fp_lv_identifier_1 = fp_lst_debt_memo_dummy-identifier.
        v_log_index = 2.
        PERFORM f_genarate_log USING v_log_index                    " genarate the log message with log index
                                     fp_lv_identifier_1
                                     fp_lst_debt_memo_dummy
                                     fp_lv_identifier_2.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

FORM f_validate_ord_rejection  TABLES   fp_vbak_vbap           TYPE tt_vbak_vbap
                               USING    fp_lst_debt_memo_dummy TYPE ty_dbt_memo_crt
                               CHANGING fp_lv_validation_fail  TYPE char1
                                        fp_lv_identifier_1     TYPE posnr_va
                                        fp_lv_identifier_2     TYPE posnr_va.

  SORT fp_vbak_vbap BY vbeln posnr.

  IF fp_vbak_vbap[] IS NOT INITIAL.   " check whether itab is empty or not
    READ TABLE fp_vbak_vbap ASSIGNING FIELD-SYMBOL(<lfs_vbak_vbap>) WITH KEY vbeln = fp_lst_debt_memo_dummy-vbeln
                                                                             posnr = fp_lst_debt_memo_dummy-posnr BINARY SEARCH.
    IF sy-subrc = 0.
      IF <lfs_vbak_vbap>-abgru IS NOT INITIAL. " contract line item rejection is not empty hold the entire data set withput processing
        fp_lv_validation_fail = abap_true.
        fp_lv_identifier_1 = fp_lst_debt_memo_dummy-identifier.
        v_log_index = 3.
        PERFORM f_genarate_log USING v_log_index                  " genarate the log message with log index
                                     fp_lv_identifier_1
                                     fp_lst_debt_memo_dummy
                                     fp_lv_identifier_2.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

FORM f_validate_multiple_zadr  TABLES   fp_i_dbt_vbak_vbfa     TYPE tt_dbt_vbfa
                               USING    fp_lst_debt_memo_dummy TYPE ty_dbt_memo_crt
                               CHANGING fp_lv_validation_fail  TYPE char1
                                        fp_lv_identifier_1     TYPE posnr_va
                                        fp_lv_identifier_2     TYPE posnr_va.

  CLEAR v_exist_zadr.

  IF i_dbt_vbfa_l IS NOT INITIAL.
    READ TABLE i_dbt_vbfa_l ASSIGNING FIELD-SYMBOL(<lfs_dbt_vbfa_l>) WITH KEY vbelv = fp_lst_debt_memo_dummy-vbeln BINARY SEARCH.
    IF sy-subrc = 0.      " validate Debit memo request is exist for particular contract
      IF fp_i_dbt_vbak_vbfa[] IS NOT INITIAL.
        READ TABLE fp_i_dbt_vbak_vbfa ASSIGNING FIELD-SYMBOL(<lfs_dbt_vbak_vbfa>) WITH KEY vbeln = <lfs_dbt_vbfa_l>-vbeln BINARY SEARCH.
        IF sy-subrc = 0. " Validate exiting document is equals to ZADR doc type
          LOOP AT fp_i_dbt_vbak_vbfa ASSIGNING <lfs_dbt_vbak_vbfa> WHERE abgru IS INITIAL.    " Check whether line item is reject or not.If not rejected hold the dataset
            fp_lv_validation_fail = abap_true.
            fp_lv_identifier_1    = fp_lst_debt_memo_dummy-identifier.
            v_exist_zadr = <lfs_dbt_vbak_vbfa>-vbeln.         " Existing ZADR document number
            v_log_index = 4.
            PERFORM f_genarate_log USING v_log_index            " genarate the log message with log index
                                         fp_lv_identifier_1
                                         fp_lst_debt_memo_dummy
                                         v_exist_zadr.
            EXIT.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

FORM f_validate_dup_orders  TABLES   fp_i_final_dbm_crt     TYPE tt_dbt_memo_crt
                            USING    fp_lst_debt_memo_dummy TYPE ty_dbt_memo_crt
                            CHANGING fp_lv_validation_fail  TYPE char1
                                     fp_lv_identifier_1     TYPE posnr_va
                                     fp_lv_identifier_2     TYPE posnr_va.

  DATA : lv_lines TYPE i. " Record count

  CLEAR : v_duplicate_cnt.
  DATA(li_tmp_duplicate_ord) = i_dbt_duplicate[].
  SORT li_tmp_duplicate_ord BY vbeln.

  " Delete duplicate values from the tmp table
  DELETE li_tmp_duplicate_ord WHERE vbeln NE fp_lst_debt_memo_dummy-vbeln.
  SORT li_tmp_duplicate_ord BY vbeln posnr.

  " check record count to validate duplicates
  DESCRIBE TABLE li_tmp_duplicate_ord LINES lv_lines.
  IF lv_lines GT 1.
    " Read first duplicate value.
    READ TABLE li_tmp_duplicate_ord INTO DATA(lst_dup_ord) INDEX 1.
    IF sy-subrc = 0.
      fp_lv_identifier_1 = lst_dup_ord-identifier.
      DATA(lst_tmp_dbt_1) = lst_dup_ord.
    ENDIF.
    " Read second duplicate value
    READ TABLE li_tmp_duplicate_ord INTO lst_dup_ord INDEX 2.
    IF sy-subrc = 0.
      fp_lv_identifier_2 = lst_dup_ord-identifier.
      DATA(lst_tmp_dbt_2) = lst_dup_ord.
    ENDIF.

    " Validate whether same Identifier set having duplicates.
    " Comparing Identifier, Contract and line item
    IF lst_tmp_dbt_1-identifier = lst_tmp_dbt_2-identifier AND lst_tmp_dbt_1-vbeln = lst_tmp_dbt_2-vbeln AND lst_tmp_dbt_1-posnr = lst_tmp_dbt_2-posnr.
      v_duplicate_cnt = abap_true.
      fp_lv_validation_fail = abap_true.
      v_log_index = 5.
      PERFORM f_genarate_log USING v_log_index                  " genarate the log message with log index
                                   fp_lv_identifier_1
                                   fp_lst_debt_memo_dummy
                                   fp_lv_identifier_2.
    ENDIF.

    " validate whether same contract is in multiple Identifiers
    IF fp_lv_validation_fail IS INITIAL.
      " Read first duplicate value.
      READ TABLE li_tmp_duplicate_ord INTO lst_dup_ord INDEX 1.
      IF sy-subrc = 0.
        DATA(lst_tmp_dbt_3) = lst_dup_ord.
      ENDIF.
      " Read second duplicate value
      READ TABLE li_tmp_duplicate_ord INTO lst_dup_ord INDEX 2.
      IF sy-subrc = 0.
        DATA(lst_tmp_dbt_4) = lst_dup_ord.
      ENDIF.

      " Comparing Identifier and Contract
      IF lst_tmp_dbt_3-identifier NE lst_tmp_dbt_4-identifier AND lst_tmp_dbt_3-vbeln = lst_tmp_dbt_4-vbeln.
        fp_lv_identifier_1 = lst_tmp_dbt_3-identifier.
        fp_lv_identifier_2 = lst_tmp_dbt_4-identifier.
        " enable the duplicate order flag.
        IF fp_lv_identifier_1 IS NOT INITIAL AND fp_lv_identifier_2 IS NOT INITIAL.
          v_duplicate_cnt = abap_true.
          fp_lv_validation_fail = abap_true.
          v_log_index = 5.
          PERFORM f_genarate_log USING v_log_index                        " genarate the log message with log index
                                       fp_lv_identifier_1
                                       fp_lst_debt_memo_dummy
                                       fp_lv_identifier_2.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDIF.

ENDFORM.

FORM f_genarate_log  USING  fp_v_log_index TYPE i
                            fp_lv_identifier_1 TYPE posnr_va
                            fp_lst_debt_memo_dummy TYPE ty_dbt_memo_crt
                            fp_lv_identifier_2.

  DATA : lv_tmp_identifier TYPE posnr_va,
         lv_loopcount      TYPE i.

  " Log index
  CASE fp_v_log_index.
    WHEN 1.   " Sold2party Document currency and Contract header document currency
      PERFORM f_genarate_log_message USING 596                    " Build final log message
                                           fp_lv_identifier_1
                                           fp_lst_debt_memo_dummy.
    WHEN 2.   " Validate order reason
      PERFORM f_genarate_log_message USING 594                    " Build final log message
                                           fp_lv_identifier_1
                                           fp_lst_debt_memo_dummy.
    WHEN 3.   " Validate order rejection reason
      PERFORM f_genarate_log_message USING 595                    " Build final log message
                                           fp_lv_identifier_1
                                           fp_lst_debt_memo_dummy.
    WHEN 4.   " Validate multiple ZADR's
      PERFORM f_genarate_log_message USING 598                    " Build final log message
                                           fp_lv_identifier_1
                                           fp_lst_debt_memo_dummy.
    WHEN 5.   " Validate Duplicate orders from upload file
      lv_loopcount = 1.
      WHILE lv_loopcount LE 2.    " check two times for duplicate orders
        IF lv_loopcount = 2.
          lv_tmp_identifier = fp_lv_identifier_1.   " Identi..._1 assign to tmp variable
          fp_lv_identifier_1 = fp_lv_identifier_2.  " Identi..._2 assign to Identi..._1
        ENDIF.
        PERFORM f_genarate_log_message USING 597                  " Build final log message
                                           fp_lv_identifier_1
                                           fp_lst_debt_memo_dummy.
        lv_loopcount = lv_loopcount + 1.
      ENDWHILE.
      IF lv_tmp_identifier IS NOT INITIAL.
        fp_lv_identifier_1 = lv_tmp_identifier.     " re-assign the tmp variable value to indetifier_1
        CLEAR lv_tmp_identifier.
      ENDIF.
    WHEN 6.     " Validate sales area
      PERFORM f_genarate_log_message USING 599                    " Build final log message
                                           fp_lv_identifier_1
                                           fp_lst_debt_memo_dummy.
    WHEN OTHERS.
      " Nothing to do
  ENDCASE.

ENDFORM.

FORM f_genarate_log_message USING fp_number
                                  fp_lv_identifier_1 TYPE posnr_va
                                  fp_lst_debt_memo_dummy TYPE ty_dbt_memo_crt.

  st_err_msg-wbeln = fp_lst_debt_memo_dummy-vbeln.  " Contract no
  st_err_msg-msgid = c_zqtc_r2.    " Message class 'ZQTC_R2'.
  st_err_msg-msgty = c_e.          " Error type
  st_err_msg-msgno = fp_number.    " Message number
  CONCATENATE text-l01 fp_lv_identifier_1 INTO st_err_msg-msgv1 SEPARATED BY space.   " Identifier

  APPEND st_err_msg TO i_err_msg.
  CLEAR: st_err_msg.

ENDFORM.

FORM f_validate_sales_area  TABLES   fp_i_vbak_vbap         TYPE tt_vbak_vbap
                            USING    fp_lst_header_tmp      TYPE ty_dbt_memo_crt
                                     fp_lst_debt_memo_dummy TYPE ty_dbt_memo_crt
                            CHANGING fp_lv_validation_fail  TYPE char1
                                     fp_lv_identifier_1     TYPE posnr_va
                                     fp_lv_identifier_2     TYPE posnr_va.

  DATA(li_vbak_vbap_tmp) = fp_i_vbak_vbap[].
  SORT li_vbak_vbap_tmp BY vbeln.
  DELETE ADJACENT DUPLICATES FROM li_vbak_vbap_tmp COMPARING vbeln.

  IF li_vbak_vbap_tmp[] IS NOT INITIAL. " Check whether itab empty or not
    READ TABLE li_vbak_vbap_tmp ASSIGNING FIELD-SYMBOL(<lfs_vbak_vbap_tmp>) WITH KEY vbeln = fp_lst_debt_memo_dummy-vbeln BINARY SEARCH.
    IF sy-subrc = 0.
      " Validate file level sales area and contract level sales area
      IF fp_lst_debt_memo_dummy-vkorg NE <lfs_vbak_vbap_tmp>-vkorg OR fp_lst_debt_memo_dummy-vtweg NE <lfs_vbak_vbap_tmp>-vtweg
                                                                   OR fp_lst_debt_memo_dummy-spart NE <lfs_vbak_vbap_tmp>-spart.
        fp_lv_validation_fail = abap_true.
        fp_lv_identifier_1 = fp_lst_debt_memo_dummy-identifier.
        v_log_index = 6.
        PERFORM f_genarate_log USING v_log_index                  " genarate the log message with log index
                                     fp_lv_identifier_1
                                     fp_lst_debt_memo_dummy
                                     fp_lv_identifier_2.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

FORM f_build_dbt_sample_data.

  DATA : lv_loopcount  TYPE i,
         lv_vbeln_1    TYPE vbeln,
         lv_vbeln_2    TYPE vbeln,
         lv_customer_1 TYPE kunnr,
         lv_customer_2 TYPE kunnr,
         lv_vkorg      TYPE vkorg,
         lv_vtweg      TYPE vtweg,
         lv_spart      TYPE spart.

  CONSTANTS : lc_contract_1 TYPE rvari_vnam VALUE 'CONRTACT_1',    " 1st identifier 1st contract
              lc_contract_2 TYPE rvari_vnam VALUE 'CONRTACT_2',    " 2st identifier 1st contract
              lc_customer_1 TYPE rvari_vnam VALUE 'CUSTOMER_1',    " 1st identifier sold to party
              lc_customer_2 TYPE rvari_vnam VALUE 'CUSTOMER_2',    " 2st identifier sold to party
              lc_sample     TYPE rvari_vnam VALUE 'SAMPLE',        " Sample records
              lc_vkorg      TYPE rvari_vnam VALUE 'VKORG',         " Sales organizatoin
              lc_vtweg      TYPE rvari_vnam VALUE 'VTWEG',         " Dist. channel
              lc_test       TYPE char5      VALUE 'TEST_', "OTCM-44200 MRAJKUMAR
              lc_spart      TYPE rvari_vnam VALUE 'SPART'.         " Division

  " fetch sample data related constant values
  SELECT devid,param1,param2,srno,sign,
         opti,low,high,activate
      FROM zcaconstant INTO TABLE @DATA(li_constant)
            WHERE devid    = @c_e101      AND  "c_devid  OTCM-47267
                  param1   = @lc_sample   AND
                  activate = @c_x. "Only active record
  IF sy-subrc = 0.
    SORT li_constant BY param1 param2.
    LOOP AT li_constant ASSIGNING FIELD-SYMBOL(<lfs_constant>).
      CASE <lfs_constant>-param2.
        WHEN lc_contract_1.       " contract_1
          lv_vbeln_1 = <lfs_constant>-low.
        WHEN lc_contract_2.       " contract_2
          lv_vbeln_2 = <lfs_constant>-low.
        WHEN lc_customer_1.       " customer_1
          lv_customer_1 = <lfs_constant>-low.
        WHEN lc_customer_2.       " customer_2
          lv_customer_2 = <lfs_constant>-low.
        WHEN lc_vkorg.            " Sales organization
          lv_vkorg =   <lfs_constant>-low.
        WHEN lc_vtweg.            " Dist. channel
          lv_vtweg =   <lfs_constant>-low.
        WHEN lc_spart.            " Division
          lv_spart =   <lfs_constant>-low.
        WHEN OTHERS.
          " nothing to do
      ENDCASE.
    ENDLOOP.
  ENDIF.


  REFRESH i_dbt_memo_excel.
  lv_loopcount = 1.
  WHILE lv_loopcount LE 8.      " entrire record set is equals to 8 rows

    APPEND INITIAL LINE TO i_dbt_memo_excel ASSIGNING FIELD-SYMBOL(<lfs_dbt_memo_excel>).
    CASE lv_loopcount.
      WHEN 1.               " 1st header record of the identifier
        <lfs_dbt_memo_excel>-identifier = 1.
        <lfs_dbt_memo_excel>-customer = lv_customer_1.
        "SOC of MRAJKUMAR OTCM-44200
        CONCATENATE lc_test <lfs_dbt_memo_excel>-customer INTO <lfs_dbt_memo_excel>-customer.
        "EOC of MRAJKUMAR OTCM-44200
        <lfs_dbt_memo_excel>-parvw    = c_ag.
        <lfs_dbt_memo_excel>-vkorg    = lv_vkorg.
        <lfs_dbt_memo_excel>-vtweg    = lv_vtweg.
        <lfs_dbt_memo_excel>-spart    = lv_spart.
      WHEN 2.               " 1st contract no in the 1st identifier
        <lfs_dbt_memo_excel>-vbeln   = lv_vbeln_1.
        "SOC of MRAJKUMAR OTCM-44200
        CONCATENATE lc_test <lfs_dbt_memo_excel>-vbeln INTO <lfs_dbt_memo_excel>-vbeln.
        "EOC of MRAJKUMAR OTCM-44200
      WHEN 5.               " blank row after 1st identifier and 2nd will strat after blank row
        lv_loopcount = lv_loopcount + 1.
        CONTINUE.
      WHEN 6.               " 2nd header record of the 2nd identifier
        <lfs_dbt_memo_excel>-identifier = 2.
        <lfs_dbt_memo_excel>-customer = lv_customer_2.
        "SOC of MRAJKUMAR OTCM-44200
        CONCATENATE lc_test <lfs_dbt_memo_excel>-customer INTO <lfs_dbt_memo_excel>-customer.
        "EOC of MRAJKUMAR OTCM-44200
        <lfs_dbt_memo_excel>-parvw    = c_ag.
        <lfs_dbt_memo_excel>-vkorg    = lv_vkorg.
        <lfs_dbt_memo_excel>-vtweg    = lv_vtweg.
        <lfs_dbt_memo_excel>-spart    = lv_spart.
      WHEN 7.                " 1st contract no in the 2nd identifier
        <lfs_dbt_memo_excel>-vbeln   = lv_vbeln_2.
        "SOC of MRAJKUMAR OTCM-44200
        CONCATENATE lc_test <lfs_dbt_memo_excel>-vbeln INTO <lfs_dbt_memo_excel>-vbeln.
        "EOC of MRAJKUMAR OTCM-44200
      WHEN 8.                " other contract no of the 2nd identifier
        lv_vbeln_2 = lv_vbeln_2 + 7.
        <lfs_dbt_memo_excel>-vbeln = lv_vbeln_2.
        "SOC of MRAJKUMAR OTCM-44200
        CONCATENATE lc_test <lfs_dbt_memo_excel>-vbeln INTO <lfs_dbt_memo_excel>-vbeln.
        "EOC of MRAJKUMAR OTCM-44200
      WHEN OTHERS.          " other contract no of the 1st identifier
        lv_vbeln_1 = lv_vbeln_1 + 7.
        <lfs_dbt_memo_excel>-vbeln   = lv_vbeln_1.
        "SOC of MRAJKUMAR OTCM-44200
        CONCATENATE lc_test <lfs_dbt_memo_excel>-vbeln INTO <lfs_dbt_memo_excel>-vbeln.
        "EOC of MRAJKUMAR OTCM-44200
    ENDCASE.
    lv_loopcount = lv_loopcount + 1.

  ENDWHILE.

ENDFORM.




*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267
*&---------------------------------------------------------------------*
*&      Form  F_CREATE_LOG_STAGING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->fp_lst_final  Header/Line Item from Excel
*      -->fp_oid
*      -->fp_item
*      <--fp_lv_log
*      <--fp_msgty
*      <--fp_loghandle
*      <--fp_lst_final3 - fp_lst_final3 TYPE ty_excel_enhanced.
*----------------------------------------------------------------------*
FORM f_create_log_staging  USING    fp_lst_final  TYPE ty_excel_enhanced
                                    fp_oid        TYPE numc10
                                    fp_item       TYPE posnr
                           CHANGING fp_lv_log     TYPE balognr
                                    fp_msgty      TYPE c
                                    fp_loghandle  TYPE balloghndl.

  STATICS:lst_final2     TYPE ty_excel_enhanced,
          lst_log_handle TYPE balloghndl.
  DATA:lv_subrc TYPE sy-subrc.
  DATA:lv_matnr_err TYPE c.
  DATA:lst_mvke TYPE ty_mvke.
  STATICS:lv_hdr_flg TYPE char1.
  STATICS:lv_itm_flg TYPE char1.
  STATICS:lv_hdr_rec TYPE i.
  STATICS:lv_itm_rec TYPE i.
  STATICS:lv_item_no TYPE posnr.

  lv_hdr_rec = lv_hdr_rec + 1.
  lv_itm_rec = lv_itm_rec + 1.

* Processing Header
  IF fp_lst_final-posnr IS INITIAL AND fp_lst_final-parvw = 'AG'.

    lv_hdr_flg = abap_true.
    CLEAR: lv_itm_flg.
    CLEAR: lv_item_no.
    lv_hdr_rec = 1.

    CLEAR: v_error_file.
    lst_final2    = fp_lst_final.
*    fp_lst_final3 = fp_lst_final.

    st_log-object     = 'ZQTC'.
    st_log-subobject  = 'ZBP_ORDER'.
    st_log-extnumber  = fp_oid.
    st_log-aldate     = sy-datum.
    st_log-altime     = sy-uzeit.
    st_log-aluser     = sy-uname.
    st_log-alprog     = sy-repid.

*   Create Log to Add message(s)
    CLEAR:st_log_handle.
    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log                 = st_log
      IMPORTING
        e_log_handle            = st_log_handle
      EXCEPTIONS
        log_header_inconsistent = 1
        OTHERS                  = 2.
    IF sy-subrc IS INITIAL.
      lst_log_handle = st_log_handle.
    ENDIF.
  ENDIF. " IF fp_lst_final-posnr IS INITIAL. "fp_lst_final-parvw = 'AG'.

  IF lv_hdr_flg = abap_true AND lv_hdr_rec = 1.
*  IF fp_lst_final-posnr IS INITIAL.
* New Order
    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_lst_final-identifier.
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ENDIF.
  ELSEIF fp_lst_final-posnr IS NOT INITIAL
     AND fp_lst_final-posnr NE lv_item_no.
* Line Items of the Order
    CLEAR: lv_hdr_flg, lv_hdr_rec.
    lv_itm_flg = abap_true.
    lv_itm_rec = 1.
    lv_item_no = fp_lst_final-posnr.

    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_lst_final-identifier.
      st_msg-msgv3 = 'Item'(126).
      st_msg-msgv4 = fp_lst_final-posnr.
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ENDIF.
  ENDIF.

* Fields in Both Header and Line Items
  IF lv_hdr_flg = abap_true OR lv_itm_flg = abap_true.
*-----Partner Function
    IF fp_lst_final-parvw IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Partner Function is missing in the file'(127).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-parvw IS NOT INITIAL.
      READ TABLE i_parvw TRANSPORTING NO FIELDS WITH KEY parvw = fp_lst_final-parvw
                                                           BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Partner Function in the file is Invalid'(128).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*---Date for Action
    IF fp_lst_final-vasda  IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final-vasda
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Date for Action in the file is Invalid'(160).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
  ENDIF. "IF lv_hdr_flg = abap_true OR lv_itm_flg = abpa_true.


* Fields in Header
*  IF fp_lst_final-posnr IS INITIAL.
  IF lv_hdr_flg = abap_true AND lv_hdr_rec = 1.
*-----Partner Number - Header
    IF fp_lst_final-customer IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'BP is missing in the file'(129).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSE.
      READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final-customer.
      IF sy-subrc NE 0.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'BP in the file is Invalid'(130).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Sales Organization
    IF fp_lst_final-vkorg IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 = 'Sales Organization is missing in the file'(131).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-vkorg IS NOT INITIAL.
      READ TABLE i_vkorg TRANSPORTING NO FIELDS WITH KEY vkorg = fp_lst_final-vkorg
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'Sales Organization in the file is Invalid'(132).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Distribution Channel
    IF fp_lst_final-vtweg IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Distribution Channel is missing in the file'(133).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-vtweg IS NOT INITIAL.
      READ TABLE i_vtweg TRANSPORTING NO FIELDS WITH KEY vtweg = fp_lst_final-vtweg
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Distribution Channel in the file is Invalid'(134).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Division
    IF fp_lst_final-spart IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Division is missing in the file'(135).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-spart IS NOT INITIAL.
      READ TABLE i_spart TRANSPORTING NO FIELDS WITH KEY spart = fp_lst_final-spart
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Division in the file in Invalid'(136).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----PO Type
    IF fp_lst_final-bsark IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'PO Type is missing in the file'.
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-bsark IS NOT INITIAL.
      READ TABLE i_bsark TRANSPORTING NO FIELDS WITH KEY bsark = fp_lst_final-bsark
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'PO Type in the file is Invalid'.
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Sales Office
    IF fp_lst_final-vkbur IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Sales Office is missing in the file'(137).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-vkbur IS NOT INITIAL.
      READ TABLE i_vkbur TRANSPORTING NO FIELDS WITH KEY vkbur = fp_lst_final-vkbur
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Sales Office in the file is Invalid'(138).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Document Type
    IF fp_lst_final-auart IS INITIAL.
*---BOC NPALLA Staging Changes 05/24/2022 ED2K927377 E101  OTCM-47267
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Sales Document Type is missing in the file'(139).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.

*---EOC NPALLA Staging Changes 05/24/2022 ED2K927377 E101  OTCM-47267
    ELSEIF fp_lst_final-auart IS NOT INITIAL.
      READ TABLE i_auart TRANSPORTING NO FIELDS WITH KEY auart = fp_lst_final-auart
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Sales Document Type in the file is Invalid'(140).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Contract Start Date
    IF fp_lst_final-guebg IS INITIAL OR fp_lst_final-guebg = c_init_date.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Contract Start Date is missing in the file'(141).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-guebg IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final-guebg
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract Start Date in the file is Invalid'(142).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
*-----Contract End Date
    IF fp_lst_final-gueen IS INITIAL OR fp_lst_final-gueen = c_init_date.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Contract End Date is missing in the file'(143).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-gueen IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final-gueen
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract End Date in the file is Invalid'(144).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
*-----Billing Date
    IF fp_lst_final-fkdat IS INITIAL.
*      Optional "st_msg-msgv1 =  'Billing Date is missing in the file'(145).
    ELSEIF fp_lst_final-fkdat IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final-fkdat
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Billing Date in the file is Invalid'(146).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
  ELSEIF lv_hdr_flg = abap_true AND lv_hdr_rec GT 1.
* Additional Validations for Header Record greater than 1.
*-----Partner Number - Header
    IF fp_lst_final-customer IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'BP is missing in the file'(129).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSE.
      READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final-customer.
      IF sy-subrc NE 0.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'BP in the file is Invalid'(130).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
  ENDIF.  "  IF lv_hdr_flg = abap_true AND lv_hdr_rec = 1.


*Fields at Line Item
*  IF fp_lst_final-posnr IS NOT INITIAL.
  IF lv_itm_flg = abap_true AND lv_itm_rec = 1.
*-----Customer Number (at Line Item)
    IF fp_lst_final-customer IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'BP is missing in the file'(129).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSE.
      READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final-customer.
      IF sy-subrc NE 0.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'BP in the file is Invalid'(130).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Partner Number (at Line Item)
    IF fp_lst_final-kunnr IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Partner is missing in the file'(165).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSE.
      IF fp_lst_final-parvw = c_we. "c_sp.
        READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final-kunnr.
        IF sy-subrc NE 0.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Ship-To Partner in the file is Invalid'(166). "'BP in the file is Invalid'(130).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
        ENDIF.
      ELSEIF fp_lst_final-parvw = c_sp.
        READ TABLE i_vendor TRANSPORTING NO FIELDS WITH KEY lifnr = fp_lst_final-kunnr.
        IF sy-subrc NE 0.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Forwarding Agent Partner in the file is Invalid'(167).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
        ENDIF.
      ENDIF.
    ENDIF.
*-----Material
    CLEAR lv_matnr_err.
    IF fp_lst_final-matnr IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Material is missing in the file'(147).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSEIF fp_lst_final-matnr IS NOT INITIAL.
      READ TABLE i_matnr TRANSPORTING NO FIELDS WITH KEY matnr = fp_lst_final-matnr
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        lv_matnr_err = abap_true.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'Material in the file is Invalid'(148).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Material Group 5 / PO Validation
    IF lv_matnr_err IS INITIAL.
      READ TABLE i_mvke INTO lst_mvke WITH KEY  matnr = fp_lst_final-matnr
                                                vkorg = lst_final2-vkorg  "from header
                                                vtweg = lst_final2-vtweg  "from header
                                                BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
          CLEAR:st_msg.
          lv_matnr_err = abap_true.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Material not extended to '(149).
          CONCATENATE 'Sales Organization'(025) lst_final2-vkorg INTO st_msg-msgv2 SEPARATED BY space.
          CONCATENATE 'Distribution Channel'(026) lst_final2-vtweg INTO st_msg-msgv3 SEPARATED BY space.
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ELSE. "IF sy-subrc IS NOT INITIAL
*     If entry entry exists in i_mvke or selected from MVKE table Validate Material Group and PO validation
        IF lst_mvke-mvgr5 IN ir_mvgr5 AND  "Material group 5
           fp_lst_final-bstnk IS INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_w.
          st_msg-msgv1 = 'Purchase Order should not be blank for this order'(150).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
        ENDIF.
      ENDIF.
    ENDIF.
*-----Contract Start Date
    IF fp_lst_final-guebg IS INITIAL OR fp_lst_final-guebg = c_init_date.
**     Contract Start Date Optional at Line Item
    ELSEIF fp_lst_final-guebg IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final-guebg
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract Start Date in the file is Invalid'(142).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
*-----Contract End Date
    IF fp_lst_final-gueen IS INITIAL OR fp_lst_final-gueen = c_init_date.
**     Contract End Date Optional at Line Item
    ELSEIF fp_lst_final-gueen IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final-gueen
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract End Date in the file is Invalid'(144).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
*---Content Start Date Override
    IF ( fp_lst_final-zzconstart  IS NOT INITIAL AND fp_lst_final-zzconstart NE c_init_date ) AND
      ( rb_crea EQ 'X' OR rb_modi EQ 'X' ).
      PERFORM f_check_date_plausibility USING fp_lst_final-zzconstart
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Content Start Date Override in the file is Invalid'(158).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
*---Content End Date Override
    IF ( fp_lst_final-zzconend  IS NOT INITIAL AND fp_lst_final-zzconend NE c_init_date ) AND
      ( rb_crea EQ 'X' OR rb_modi EQ 'X' ).
      PERFORM f_check_date_plausibility USING fp_lst_final-zzconend
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Content End Date Override in the file is Invalid'(159).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
      ENDIF.
    ENDIF.
  ELSEIF lv_itm_flg = abap_true AND lv_itm_rec GT 1.
* Additional Validations for Item Record greater than 1.
*-----Partner Number (at Line Item)
    IF fp_lst_final-customer IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'BP is missing in the file'(129).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSE.
      READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final-customer.
      IF sy-subrc NE 0.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'BP in the file is Invalid'(130).
        PERFORM f_adding_log USING fp_lst_final fp_item
                             CHANGING   fp_lv_log
                                        fp_msgty
                                        fp_loghandle.
      ENDIF.
    ENDIF.
*-----Partner Number (at Line Item)
    IF fp_lst_final-kunnr IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Partner is missing in the file'(165).
      PERFORM f_adding_log USING fp_lst_final fp_item
                           CHANGING   fp_lv_log
                                      fp_msgty
                                      fp_loghandle.
    ELSE.
      IF fp_lst_final-parvw = c_we. "c_sp.
        READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final-kunnr.
        IF sy-subrc NE 0.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Ship-To Partner in the file is Invalid'(166).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
        ENDIF.
      ELSEIF fp_lst_final-parvw = c_sp.
        READ TABLE i_vendor TRANSPORTING NO FIELDS WITH KEY lifnr = fp_lst_final-kunnr.
        IF sy-subrc NE 0.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Forwarding Agent Partner in the file is Invalid'(167).
          PERFORM f_adding_log USING fp_lst_final fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.  "  IF lv_itm_flg = abap_true AND lv_itm_rec = 1.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_ADDING_LOG
*&---------------------------------------------------------------------*
*  Add Details to the Log
*----------------------------------------------------------------------*
FORM f_adding_log USING fp_lst_final TYPE ty_excel_enhanced
                        fp_item TYPE posnr
                   CHANGING   fp_lv_log   TYPE balognr
                              fp_msgty    TYPE c
                              fp_loghandle TYPE balloghndl.
  DATA:lv_logno       TYPE balognr,
       lst_log_handle TYPE balloghndl.
  st_msg-msgid = 'ZQTC_R2'.
  st_msg-msgno = '000'.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle     = st_log_handle
      i_s_msg          = st_msg
    EXCEPTIONS
      log_not_found    = 1
      msg_inconsistent = 2
      log_is_full      = 3
      OTHERS           = 4.
*
  APPEND st_log_handle TO st_loghandle.
  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
      i_client         = sy-mandt
      i_save_all       = abap_true
      i_t_log_handle   = st_loghandle
    IMPORTING
      e_new_lognumbers = i_lognum
    EXCEPTIONS
      log_not_found    = 1
      save_not_allowed = 2
      numbering_error  = 3
      OTHERS           = 4.
  IF sy-subrc EQ 0.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
    IF sy-subrc EQ 0.
      CLEAR:st_e101_stage.
    ENDIF.
    READ TABLE i_lognum ASSIGNING FIELD-SYMBOL(<lfs_lognum>) INDEX 1.
    IF sy-subrc EQ 0.
      st_e101_stage-zlogno = <lfs_lognum>-lognumber.
      lv_logno =  <lfs_lognum>-lognumber.
      fp_loghandle = <lfs_lognum>-log_handle.
      fp_lv_log = st_e101_stage-zlogno.
    ELSE.
      st_e101_stage-zlogno =  fp_lv_log."lv_logno.
    ENDIF.
    st_e101_stage-mandt = sy-mandt.
    st_e101_stage-zuid_upld =  p_v_oid."File Identifier
    st_e101_stage-zoid = fp_lst_final-identifier. " Order Identifier.
    st_e101_stage-zitem = fp_item.
    st_e101_stage-zuser = sy-uname.
    st_e101_stage-zfilepath = p_file.
    st_e101_stage-zbp = fp_lst_final-customer.
    st_e101_stage-zcrtdat = sy-datum.
    st_e101_stage-zcrttim = sy-uzeit.
*   Capture the Message Type "Errors / Warning / Success.
    fp_msgty = st_msg-msgty.
*   If Error Update all lines of the Order to Error Status.
    IF v_error_file EQ abap_true OR st_msg-msgty = c_e.
      fp_msgty = c_e.
      st_e101_stage-zprcstat = c_f1. "'F1'.
      IF v_error_file NE abap_true.
        v_error_file = abap_true.
        LOOP AT i_e101_stage ASSIGNING FIELD-SYMBOL(<lfs_e101_stage>)
                             WHERE zuid_upld =  p_v_oid
                               AND zoid      = fp_lst_final-identifier.
          <lfs_e101_stage>-zprcstat = c_f1. "'F1'.
        ENDLOOP.
      ENDIF.
    ENDIF.
*
    PERFORM f_get_intf_stage_id CHANGING st_e101_stage.
*
    APPEND st_e101_stage TO i_e101_stage.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_INTF_STAGE_ID
*&---------------------------------------------------------------------*
* Based on Selected Option on Selection Screen update
*  rb_crea  2A  E101 - Create New Subscription Order
*  rb_cros  2B  E101 - Create Ren Ord with SubrefID
*  rb_modi  2C  E101 - Modify Existing Subscription
*  rb_crem  2D  E101 - Create New Credit Memo
*  rb_crcg  2E  E101 - Change Existing Credit Memo
*  rb_dm_cr 2F  E101 - Create New Acquisition Debit Memo Request
*  rb_or_ct 2G  E101 - Create Regular Order
*  rb_or_cn 2H  E101 - Modify Regular Order
*----------------------------------------------------------------------*
*      <--FP_ST_E101_STAGE  text
*----------------------------------------------------------------------*
FORM f_get_intf_stage_id  CHANGING fp_st_e101_stage TYPE ze225_staging.

* Based on Selected Option on Selection Screen update Stageing ID
  IF rb_crea IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2A'.  "E101 - Create New Subscription Order
*
  ELSEIF rb_cros IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2B'.  "E101 - Create Ren Ord with SubrefID
*
  ELSEIF rb_modi IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2C'.  "E101 - Modify Existing Subscription
*
  ELSEIF rb_crem IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2D'.  "E101 - Create New Credit Memo
*
  ELSEIF rb_crcg IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2E'.  "E101 - Change Existing Credit Memo
*
  ELSEIF rb_dm_cr IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2F'.  "E101 - Create New Acquisition Debit Memo Request
*
  ELSEIF rb_or_ct IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2G'.  "E101 - Create Regular Order
*
  ELSEIF rb_or_cn IS NOT INITIAL.
    fp_st_e101_stage-zintf_stage_id = '2H'.  "E101 - Modify Regular Order
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_INIT_DETIALS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_get_init_detials .

* Get BP Partner Function
  SELECT parvw
    INTO TABLE i_parvw
    FROM tpar.
  IF sy-subrc = 0.
    SORT i_parvw BY parvw.
  ENDIF.

* Get Sales Organization (TVKO)
  SELECT vkorg
    INTO TABLE @i_vkorg
    FROM tvko.
  IF sy-subrc = 0.
    SORT i_vkorg BY vkorg.
  ENDIF.

* Get Distribution Channel (TVTW)
  SELECT vtweg
    INTO TABLE @i_vtweg
    FROM tvtw.
  IF sy-subrc = 0.
    SORT i_vtweg BY vtweg.
  ENDIF.

* Get Division (TSPA)
  SELECT spart
    INTO TABLE @i_spart
    FROM tspa.
  IF sy-subrc = 0.
    SORT i_spart BY spart.
  ENDIF.

* Get Sales Office (TVBUR)
  SELECT vkbur
    INTO TABLE @i_vkbur
    FROM tvbur.
  IF sy-subrc = 0.
    SORT i_vkbur BY vkbur.
  ENDIF.

* Get Sales Document Type (TVAK)
  SELECT auart
    INTO TABLE @i_auart
    FROM tvak.
  IF sy-subrc = 0.
    SORT i_auart BY auart.
  ENDIF.

* Get Sales Document Type (T176)
  SELECT bsark
    INTO TABLE @i_bsark
    FROM t176.
  IF sy-subrc = 0.
    SORT i_bsark BY bsark.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_UPDATE_LOG_STAGING_E101
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LST_OUTPUT_DUMMY_LOG_HANDLE  text
*      -->P_LV_SALESDOCIN  text
*      -->P_LST_OUTPUT_DUMMY_ZLOGNO  text
*----------------------------------------------------------------------*
FORM f_update_log_staging_e101 USING fp_loghandle TYPE balloghndl
                                     fp_vbeln TYPE vbeln
                                     fp_logno TYPE balognr.

  DATA:li_log_handle   TYPE bal_t_logh.
  DATA:lst_return3     TYPE bapiret2.

  CLEAR: st_loghandle[].

  READ TABLE i_return INTO lst_return3 WITH KEY type = 'E'.
  IF sy-subrc EQ 0.    "ERPM2334 ED2K918288
    v_err = abap_true.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    READ TABLE i_return INTO lst_return3 WITH KEY type = 'A'.
    IF sy-subrc EQ 0.    "ERPM2334 ED2K918288
      v_err = abap_true.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.
  ENDIF.

* Convert Log Number to Internal Format to update Logs Correctly
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = fp_logno
    IMPORTING
      output = fp_logno.

  IF fp_vbeln IS NOT INITIAL.
  ENDIF.
  DELETE ADJACENT DUPLICATES FROM i_return COMPARING type id number.
  LOOP AT i_return ASSIGNING FIELD-SYMBOL(<lfs_ret>).
    CLEAR:st_msg.
*      IF <lfs_ret>-type = c_s .
*        IF <lfs_ret>-id = 'V4' AND <lfs_ret>-number = '311'.
*        ELSE.
*          CONTINUE.
*        ENDIF.
*      ENDIF.
    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
      EXPORTING
        msgid                     = <lfs_ret>-id
        msgnr                     = <lfs_ret>-number
        msgv1                     = <lfs_ret>-message_v1
        msgv2                     = <lfs_ret>-message_v2
        msgv3                     = <lfs_ret>-message_v3
        msgv4                     = <lfs_ret>-message_v4
     IMPORTING
        message_text_output       = <lfs_ret>-message.

    st_msg-msgid = 'ZQTC_R2'.
    st_msg-msgno = '000'.

    st_msg-msgty = <lfs_ret>-type.
    st_msg-msgv1 = <lfs_ret>-message+0(50).
    st_msg-msgv2 = <lfs_ret>-message+50(50).
    st_msg-msgv3 = <lfs_ret>-message+100(50).
    st_msg-msgv4 = <lfs_ret>-message+150(50).
    IF v_err IS INITIAL. "fp_vbeln IS NOT INITIAL.
      LOOP AT i_e101_stage ASSIGNING FIELD-SYMBOL(<lfs_stage2>) WHERE zlogno = fp_logno.
        <lfs_stage2>-vbeln = fp_vbeln.
        <lfs_stage2>-zprcstat = c_d1. "'D1'. NPALLA ED2K924398 E101 OTCM-47267
      ENDLOOP.
      MODIFY ze225_staging FROM TABLE i_e101_stage.
* SOC by NPOLINA ERPM2334 ED2K918288
    ELSE.
      LOOP AT i_e101_stage ASSIGNING FIELD-SYMBOL(<lfs_stage3>) WHERE zlogno = fp_logno.
        <lfs_stage3>-vbeln = fp_vbeln.
        <lfs_stage3>-zprcstat = c_e2.  "'E2'. NPALLA ED2K924398 E101 OTCM-47267
      ENDLOOP.
      MODIFY ze225_staging FROM TABLE i_e101_stage    .
* EOC by NPOLINA ERPM2334 ED2K918288
    ENDIF.
    APPEND fp_loghandle TO li_log_handle.
    CALL FUNCTION 'BAL_DB_LOAD'
      EXPORTING
        i_t_log_handle     = li_log_handle
      EXCEPTIONS
        no_logs_specified  = 1
        log_not_found      = 2
        log_already_loaded = 3
        OTHERS             = 4.
    IF sy-subrc <> 0.
    ENDIF.

    st_log_handle = fp_loghandle.
    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = st_log_handle
        i_s_msg          = st_msg
      EXCEPTIONS
        log_not_found    = 1
        msg_inconsistent = 2
        log_is_full      = 3
        OTHERS           = 4.

    IF sy-subrc EQ 0.
      APPEND st_log_handle TO st_loghandle.
      CALL FUNCTION 'BAL_DB_SAVE'
        EXPORTING
          i_client         = sy-mandt
*         i_in_update_task = ' '
          i_save_all       = abap_true
          i_t_log_handle   = st_loghandle
        IMPORTING
          e_new_lognumbers = i_lognum
        EXCEPTIONS
          log_not_found    = 1
          save_not_allowed = 2
          numbering_error  = 3
          OTHERS           = 4.
      IF sy-subrc EQ 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CHECK_DATE_PLAUSIBILITY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FP_LST_FINAL_GUEBG  text
*      <--P_LV_SUBRC  text
*----------------------------------------------------------------------*
FORM f_check_date_plausibility  USING    fp_date  TYPE char10"datum
                                CHANGING fp_subrc TYPE sy-subrc.

  DATA: lv_date_int TYPE sy-datum.
  lv_date_int = fp_date.

* Convert Date to Internal Format
  CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
    EXPORTING
      date_external                  = fp_date
      accept_initial_date            = abap_true
    IMPORTING
      date_internal                  = lv_date_int
    EXCEPTIONS
     date_external_is_invalid       = 1
     OTHERS                         = 2.
  IF sy-subrc <> 0.
    fp_subrc = sy-subrc .
    EXIT.
  ENDIF.

* Plausibility Check
  CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
    EXPORTING
      date                      = lv_date_int
    EXCEPTIONS
      plausibility_check_failed = 1
      OTHERS                    = 2.
  IF sy-subrc IS NOT INITIAL.
    fp_subrc = sy-subrc .
  ELSE.
    fp_subrc = sy-subrc .
  ENDIF.

ENDFORM.

*ZQTCN_E096_FORM_DECL
*&---------------------------------------------------------------------*
*&      Form  F_PROCESS_HOTSPOT
*&---------------------------------------------------------------------*
*      --> FP_LST_SELFIELD TYPE slis_selfield
*----------------------------------------------------------------------*
FORM f_process_hotspot  USING fp_lst_selfield TYPE slis_selfield.

  DATA: lv_table TYPE slis_tabname,
        lv_index TYPE slis_selfield-tabindex,
        lv_field TYPE slis_selfield-fieldname,
        lv_ucomm TYPE syst_ucomm,
        lv_lognumber      TYPE balognr.
  DATA: lst_ord_alv TYPE ty_ord_alv.

  lv_table = fp_lst_selfield-tabname.
  lv_index = fp_lst_selfield-tabindex.
  lv_field = fp_lst_selfield-fieldname. " sel_tab_field Field Name

  CASE fp_lst_selfield-fieldname.
    WHEN 'ZLOGNO'.
      IF rb_crea EQ c_x.
        READ TABLE i_output_x INTO st_output_x INDEX lv_index.
        IF sy-subrc = 0.
          lv_lognumber = st_output_x-zlogno.
        ENDIF.
      ELSEIF rb_cros EQ c_x.
        READ TABLE i_output_x INTO st_output_x INDEX lv_index.
        IF sy-subrc = 0.
          lv_lognumber = st_output_x-zlogno.
        ENDIF.
      ELSEIF rb_modi EQ c_x.
        READ TABLE i_output_x INTO st_output_x INDEX lv_index.
        IF sy-subrc = 0.
          lv_lognumber = st_output_x-zlogno.
        ENDIF.
      ELSEIF rb_crem EQ c_x.
      ELSEIF rb_crcg EQ c_x.
      ELSEIF rb_dm_cr EQ c_x.
      ELSEIF rb_or_ct EQ abap_true.
        READ TABLE i_ord_alv INTO lst_ord_alv INDEX lv_index.
        IF sy-subrc = 0.
          lv_lognumber = lst_ord_alv-zlogno.
        ENDIF.
      ELSEIF rb_or_cn EQ abap_true.
        READ TABLE i_ord_alv INTO lst_ord_alv INDEX lv_index.
        IF sy-subrc = 0.
          lv_lognumber = lst_ord_alv-zlogno.
        ENDIF.
      ENDIF. " IF rb_crea EQ c_x
      IF lv_lognumber IS NOT INITIAL.
        PERFORM f_display_log_popup USING lv_lognumber.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_DISPLAY_LOG_POPUP
*&---------------------------------------------------------------------*
*       --> fp_index TYPE i
*----------------------------------------------------------------------*
FORM f_display_log_popup  USING  fp_lognumber      TYPE balognr.

  TYPES: BEGIN OF ty_msg,
           msg_stat TYPE zmsg_icon_desc, " Message Icon and Description
           text     TYPE char200,        " Text of type CHAR200
         END OF ty_msg.

  DATA: li_log_handle     TYPE bal_t_logh, " Application Log: Log Handle Table
        lst_msg           TYPE bal_s_msg,  " Application Log: Message Data
        lv_msg_log_handle TYPE balmsghndl, " Application Log: Message handle
        lflg_exit         TYPE xchar,      " Exit Flag
        li_msg_out        TYPE STANDARD TABLE OF ty_msg,
        lst_msg_out       TYPE ty_msg,
        lv_lognumber      TYPE balognr,
        lv_log_handle     TYPE balloghndl.

  CONSTANTS:
    lc_comment_by   TYPE string VALUE 'Comment By:'.

  IF fp_lognumber IS NOT INITIAL.
    lv_lognumber = fp_lognumber.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lv_lognumber
      IMPORTING
        output = lv_lognumber.
    CLEAR st_output_x.
  ENDIF. " IF sy-subrc = 0

* Get Log Handle.
  SELECT SINGLE log_handle " Application Log: Log Handle
    FROM balhdr            " Application log: Header table
    INTO lv_log_handle
    WHERE lognumber = lv_lognumber.
  IF sy-subrc <> 0.
    MESSAGE i000(zqtc_r2) WITH 'Select a Valid Log Number'(151). " & & & &
    EXIT.
  ELSE.
    CLEAR lv_lognumber.
  ENDIF. " IF sy-subrc <> 0

* Application Log: Database: Load Logs
  APPEND lv_log_handle TO li_log_handle.

  CALL FUNCTION 'BAL_DB_LOAD'
    EXPORTING
      i_t_log_handle     = li_log_handle
    EXCEPTIONS
      no_logs_specified  = 1
      log_not_found      = 2
      log_already_loaded = 3
      OTHERS             = 4.
  IF sy-subrc <> 0.
    MESSAGE i000(zqtc_r2) WITH 'Enter a Valid Log Handle'(152). " & & & &
    EXIT.
  ELSE.
    CLEAR li_log_handle[].
  ENDIF. " IF sy-subrc <> 0

* Get All the Log Messages for the given Log Handle.
  WHILE lflg_exit IS INITIAL.

    lv_msg_log_handle-log_handle = lv_log_handle.
    lv_msg_log_handle-msgnumber  = lv_msg_log_handle-msgnumber + 1 .

    CALL FUNCTION 'BAL_LOG_MSG_READ'
      EXPORTING
        i_s_msg_handle = lv_msg_log_handle
      IMPORTING
        e_s_msg        = lst_msg
      EXCEPTIONS
        log_not_found  = 1
        msg_not_found  = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      lflg_exit = abap_true.
    ENDIF. " IF sy-subrc <> 0

    IF lflg_exit IS INITIAL.
      MESSAGE ID lst_msg-msgid TYPE lst_msg-msgty NUMBER lst_msg-msgno
              INTO DATA(lv_msg_text)
              WITH lst_msg-msgv1 lst_msg-msgv2 lst_msg-msgv3 lst_msg-msgv4.
      PERFORM f_get_msg_icon USING lst_msg-msgty
                             CHANGING lst_msg_out-msg_stat.
      IF lst_msg-msgv1 CS lc_comment_by.
        CONCATENATE lst_msg-msgv1 lst_msg-msgv2 lst_msg-msgv3 lst_msg-msgv4
                    INTO lv_msg_text.
      ENDIF.
      lst_msg_out-text = lv_msg_text.
      APPEND lst_msg_out TO li_msg_out.
      CLEAR: lst_msg_out, lst_msg, lv_msg_text.
    ENDIF. " IF lflg_exit IS INITIAL

  ENDWHILE.
  CLEAR lv_log_handle.

  PERFORM f_popup_log_window USING li_msg_out.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_POPUP_WINDOW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_popup_log_window  USING    fp_i_msg TYPE STANDARD TABLE.

  DATA: lo_alv TYPE REF TO cl_salv_table. " Basis Class for Simple Tables
  DATA: lr_functions TYPE REF TO cl_salv_functions_list. " Generic and User-Defined Functions in List-Type Tables
  DATA: lv_start_column TYPE i, " Start_column of type Integers
        lv_end_column   TYPE i, " End_column of type Integers
        lv_start_line   TYPE i, " Start_line of type Integers
        lv_end_line     TYPE i. " End_line of type Integers

  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = lo_alv
        CHANGING
          t_table      = fp_i_msg[] ).
    CATCH cx_salv_msg.
  ENDTRY.

  lr_functions = lo_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

  lv_start_column  = 1.
  lv_end_column    = 100.
  lv_start_line    = 1.
  lv_end_line      = 20.

  IF lo_alv IS BOUND.
    lo_alv->set_screen_popup(
      start_column = lv_start_column
      end_column  = lv_end_column
      start_line  = lv_start_line
      end_line    = lv_end_line ).
*   Display ALV
    lo_alv->display( ).
  ENDIF. " IF lo_alv IS BOUND

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_MSG_ICON
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_get_msg_icon  USING    fp_msg_msgty     TYPE symsgty         " Message Type
                     CHANGING fp_msg_stat_desc TYPE zmsg_icon_desc. " Message Icon and Description

  DATA : lv_icon_fld TYPE icon_d, "Icon
         lv_msg_type TYPE char11.

  CLEAR: fp_msg_stat_desc.

  CASE fp_msg_msgty.
    WHEN 'A'.
      lv_icon_fld = '@8N@'.
      lv_msg_type = 'Abort'(153).
    WHEN 'E'.
      lv_icon_fld = '@5C@'. "Red/Error
      lv_msg_type = 'Error'(071).
    WHEN 'W'.
      lv_icon_fld = '@5D@'. "Yellow/Warning
      lv_msg_type = 'Warning'(154).
    WHEN 'S'.
      lv_icon_fld = '@5B@'. "Green/Success
      lv_msg_type = 'Success'(155).
    WHEN 'I'.
      lv_icon_fld = '@5B@'. "Green/Success
      lv_msg_type = 'Information'(156).
    WHEN OTHERS.
  ENDCASE.

  CONCATENATE lv_icon_fld lv_msg_type INTO fp_msg_stat_desc SEPARATED BY space.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_ICON
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_get_icon  USING    fp_msgty TYPE msgty
                 CHANGING fp_icon  TYPE char4.
  CASE fp_msgty.
    WHEN 'A'.
      fp_icon = '@8N@'.
    WHEN 'E'.
      fp_icon = '@5C@'. "Red/Error
    WHEN 'W'.
      fp_icon = '@5D@'. "Yellow/Warning
    WHEN 'S'.
      fp_icon = '@5B@'. "Green/Success
    WHEN 'I'.
      fp_icon = '@5B@'. "Green/Success
    WHEN OTHERS.
  ENDCASE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_FILE_NEW
*&---------------------------------------------------------------------*
*  Select Appropriate File Template based on Selected Radio Button.
*  2A	E101 - Create New Subscription Order
*  2B	E101 - Create Ren Ord with SubrefID
*  2C	E101 - Modify Existing Subscription
*  2D	E101 - Create New Credit Memo
*  2E	E101 - Change Existing Credit Memo
*  2F	E101 - Create New Acquisition Debit Memo Request
*  2G	E101 - Create Regular Order
*  2H	E101 - Modify Regular Order
*----------------------------------------------------------------------*
FORM f_get_file_new .

  DATA : lst_filecontent TYPE zca_templates,
         lv_template_name TYPE ztname,                  "Template Name
         lv_xstr_content TYPE xstring,
         li_content      TYPE STANDARD TABLE OF tdline, "Data Declaration for File upload
         lv_len          TYPE i,
         lv_fname        TYPE string,
         lv_fpath        TYPE string,
         lv_path         TYPE string.

  CLEAR : lst_filecontent.

  IF sy-ucomm = c_fc01.
*   Template Name used in E101
    IF rb_crea EQ abap_true. "2A  E101 - Create New Subscription Order
      lv_template_name = '2A - E101 - Create New Subscription Order'(T10).
    ELSEIF rb_cros EQ abap_true. "2B  E101 - Create Ren Ord with SubrefID
      lv_template_name = '2B - E101 - Create Ren Ord with SubrefID'(T11).
    ELSEIF rb_modi EQ abap_true. "2C  E101 - Modify Existing Subscription
      lv_template_name = '2C - E101 - Modify Existing Subscription'(T12).
    ELSEIF rb_crem EQ abap_true. "2D  E101 - Create New Credit Memo
      lv_template_name = '2D - E101 - Create New Credit Memo'(T13).
    ELSEIF rb_crcg EQ abap_true. "2E  E101 - Change Existing Credit Memo
      lv_template_name = '2E - E101 - Change Existing Credit Memo'(T14).
    ELSEIF rb_dm_cr EQ abap_true."2F  E101 - Create New Acquisition Debit Memo Request
      lv_template_name = '2F - E101 - Create New Acquisition Debit Memo Req'(T15).
    ELSEIF rb_or_ct EQ abap_true."2G  E101 - Create Regular Order
      lv_template_name = '2G - E101 - Create Regular Order'(T16).
    ELSEIF rb_or_cn EQ abap_true."2H  E101 - Modify Regular Order
      lv_template_name = '2H - E101 - Modify Regular Order'(T17).
    ENDIF.

*   Select file content based on selection screen value
    SELECT SINGLE * FROM zca_templates            " Select file content based on selection screen value
      INTO lst_filecontent
      WHERE program_name  = sy-repid
        AND template_name = lv_template_name
        AND active        = abap_true
        AND wricef_id     = c_e101.
    IF sy-subrc IS INITIAL.
      lv_xstr_content = lst_filecontent-file_content.
    ELSE.
      MESSAGE i000 WITH 'Template file not maintained'.
      EXIT.
    ENDIF.

*   Convert xstring/rawstring to binary itab
    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        buffer        = lv_xstr_content
      IMPORTING
        output_length = lv_len
      TABLES
        binary_tab    = li_content.

    CALL METHOD cl_gui_frontend_services=>file_save_dialog
      EXPORTING
        default_extension = 'XLS'
        window_title      = 'Save dialog'
      CHANGING
        filename          = lv_fname
        path              = lv_path
        fullpath          = lv_fpath.
    IF sy-subrc EQ 0.
      " Download file to presentation server from SAP
      CALL METHOD cl_gui_frontend_services=>gui_download
        EXPORTING
          bin_filesize            = lv_len
          filename                = lv_fpath
          filetype                = 'BIN'
        CHANGING
          data_tab                = li_content
        EXCEPTIONS
          file_write_error        = 1
          no_batch                = 2
          gui_refuse_filetransfer = 3
          invalid_type            = 4
          no_authority            = 5
          unknown_error           = 6
          header_not_allowed      = 7
          separator_not_allowed   = 8
          filesize_not_allowed    = 9
          header_too_long         = 10
          dp_error_create         = 11
          dp_error_send           = 12
          dp_error_write          = 13
          unknown_dp_error        = 14
          access_denied           = 15
          dp_out_of_memory        = 16
          disk_full               = 17
          dp_timeout              = 18
          file_not_found          = 19
          dataprovider_exception  = 20
          control_flush_error     = 21
          not_supported_by_gui    = 22
          error_no_gui            = 23
          OTHERS                  = 24.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        MESSAGE s010(zfilupload).
      ENDIF.
    ENDIF.
  ENDIF. " IF sy-ucomm = c_fc01.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_RETAIN_LOG_STATUS
*&---------------------------------------------------------------------*
* Capture Messages based on below sequence
*  Error / Warning / Success or Information
*----------------------------------------------------------------------*
FORM f_retain_log_status  USING    fp_msgty
                          CHANGING fp_ord_status.

  IF ( fp_ord_status IS INITIAL ).
    fp_ord_status = fp_msgty.
    RETURN.
  ENDIF.

  IF ( fp_ord_status NE c_e ) AND
     ( fp_msgty = c_e ).
    fp_ord_status = c_e.
    RETURN.
  ENDIF.

  IF fp_ord_status NE c_e AND
     fp_msgty = c_w.
    fp_ord_status = c_w.
    RETURN.
  ENDIF.

  IF ( fp_ord_status NE c_e AND fp_ord_status NE c_w ) AND
     ( fp_msgty = c_s ).
    fp_ord_status = c_s.
    RETURN.
  ENDIF.

  IF ( fp_ord_status NE c_e AND fp_ord_status NE c_w AND fp_msgty = c_s ) AND
     ( fp_msgty = c_i ).
    fp_ord_status = c_i.
    RETURN.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CONVERT_NEW_SUBS_ORD_EXCEL_V1
*&---------------------------------------------------------------------*
*       Convert Excel Data to Internal table
*----------------------------------------------------------------------*
FORM f_convert_new_subs_ord_excel1 USING fp_p_file  TYPE rlgrap-filename " Local file for upload/download
                                  CHANGING fp_i_final TYPE tt_excel_enh.
*--*BOC ERP7775 PRABHU ED2K913637
  DATA : li_excel        TYPE STANDARD TABLE OF zqtc_alsmex_tabline "alsmex_tabline " Rows for Table with Excel Data
                              INITIAL SIZE 0,                  " Rows for Table with Excel Data
         lst_excel_dummy TYPE zqtc_alsmex_tabline, "alsmex_tabline,                  " Rows for Table with Excel Data
         lst_excel       TYPE zqtc_alsmex_tabline, "alsmex_tabline,                  " Rows for Table with Excel Data
         lst_final       TYPE ty_excel_enhanced.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  DATA:"lv_auart_cre  TYPE auart,
    lv_oid(10)    TYPE n,
    lv_item       TYPE posnr,
    lv_log        TYPE balognr,
    lv_loghandle  TYPE balloghndl,
    lv_msg        TYPE char100,
    lv_msgty      TYPE char1,
    lvf_skip_row  TYPE char1.
  DATA: lv_convert_parvw TYPE char1,
        lv_parvw         TYPE parvw.
  DATA: lv_index     TYPE sy-tabix,
        lv_identifier(10) TYPE n.         " Order Identifier
  DATA: lv_begin_row TYPE I,
        lv_begin_col TYPE I,
        lv_end_row   TYPE I,
        lv_end_col   TYPE I.

  STATICS:lv_ord_status   TYPE c.       "lst_final3      TYPE ty_excel_enhanced,
  FIELD-SYMBOLS: <lfs_i_final> TYPE ty_excel_enhanced.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  DATA:  lv_zmeng TYPE char17. " Zmeng of type CHAR17
  DATA:lv_auart_cre TYPE auart,   "ERPM4543 NPOLINA 24/Oct/2019
       lv_kdkg2     TYPE kdkg2.

  DATA lv_date TYPE sy-datum.
  CONSTANTS c_special_char TYPE string VALUE '@#$%^&*()!/\|{}[]-_+?.,'.

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  PERFORM f_get_row_column CHANGING lv_begin_row
                                    lv_begin_col
                                    lv_end_row
                                    lv_end_col.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

  CALL FUNCTION 'ZQTC_EXCEL_TO_INTERNAL_TABLE' "'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = fp_p_file
      i_begin_col             = lv_begin_col "1      "OTCM-47267
      i_begin_row             = lv_begin_row "1  "Earlier it was 2nd row OTCM-47267
      i_end_col               = lv_end_col   "48     "OTCM-47267
      i_end_row               = lv_end_row   "65000  "OTCM-47267
    TABLES
      intern                  = li_excel
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.

  IF sy-subrc EQ 0.
* Now fill data from excel into final legacy data internal table
    IF NOT li_excel[] IS INITIAL.
      CLEAR lst_final.
      LOOP AT li_excel INTO lst_excel.
        lst_excel_dummy = lst_excel.
        IF lst_excel_dummy-value(1) EQ text-sqt.
          lst_excel_dummy-value(1) = space.
          SHIFT lst_excel_dummy-value LEFT DELETING LEADING space.
        ENDIF. " IF lst_excel_dummy-value(1) EQ text-sqt

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
        AT NEW row.
          CLEAR lvf_skip_row.
*         If row starts with Order Identifier, Mandatory or Optional Skip the Row
          IF lst_excel_dummy-value IN ir_row_txt.
            lvf_skip_row = abap_true.
          ENDIF.
*         If using OLD template - Validate and display message
          IF lst_excel_dummy-row = 1 AND lvf_skip_row = abap_false.
            MESSAGE i000 WITH 'Please use the New Template'(164).
            LEAVE LIST-PROCESSING.
          ENDIF.
        ENDAT.
        IF lvf_skip_row  IS NOT INITIAL.
          CONTINUE.
        ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

        AT NEW col.

          CASE lst_excel_dummy-col.
            WHEN 1.
              IF NOT lst_final IS INITIAL.
                APPEND lst_final TO fp_i_final.
                CLEAR lst_final.
              ENDIF. " IF NOT lst_final IS INITIAL

              IF lst_excel_dummy-value IS NOT INITIAL.
                " Process only with Numeric value for Identifier
                FIND REGEX '[[:digit:]]' IN lst_excel_dummy-value.
                IF sy-subrc NE 0.
                  MESSAGE s600(zqtc_r2) DISPLAY LIKE c_errtype.
                  LEAVE LIST-PROCESSING.
                ENDIF.
                lst_final-identifier = lst_excel_dummy-value(10).
              ELSE.
                MESSAGE s593(zqtc_r2) DISPLAY LIKE c_errtype.
                LEAVE LIST-PROCESSING.
              ENDIF.
              CONDENSE lst_final-identifier.
              CLEAR lst_excel_dummy.

           WHEN 2.

              lst_final-customer = lst_excel_dummy-value(10).
              CLEAR lst_excel_dummy.

            WHEN 3.
              lst_final-parvw = lst_excel_dummy-value(2).
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
              IF lv_convert_parvw IS INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
                  EXPORTING
                    input  = lst_final-parvw
                  IMPORTING
                    output = lv_parvw.
                IF lst_final-parvw = lv_parvw.
                  lv_convert_parvw = 'N'.
                ELSE.
                  lv_convert_parvw = 'Y'.
                ENDIF.
              ENDIF.
              IF lst_final-parvw IS NOT INITIAL AND lv_convert_parvw = 'Y'.
                CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
                  EXPORTING
                    input  = lst_final-parvw
                  IMPORTING
                    output = lst_final-parvw.
              ENDIF. " IF lst_final-parvw IS NOT INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

            WHEN 4.

              lst_final-kunnr = lst_excel_dummy-value(10).

              IF lst_final-kunnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-kunnr
                  IMPORTING
                    output = lst_final-kunnr.
              ENDIF. " IF lst_final-kunnr IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 5.

              lst_final-vkorg = lst_excel_dummy-value(4).

              IF lst_final-vkorg IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-vkorg
                  IMPORTING
                    output = lst_final-vkorg.
              ENDIF. " IF lst_final-vkorg IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 6.
              lst_final-vtweg = lst_excel_dummy-value(2).
              IF lst_final-vtweg IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-vtweg
                  IMPORTING
                    output = lst_final-vtweg.
              ENDIF. " IF lst_final-vtweg IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 7.
              lst_final-spart = lst_excel_dummy-value(2).
              IF lst_final-spart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-spart
                  IMPORTING
                    output = lst_final-spart.
              ENDIF. " IF lst_final-spart IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 8.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*              WRITE lst_excel_dummy-value(8) TO lst_final-guebg.
              lst_final-guebg = lst_excel_dummy-value(10).
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
              CLEAR lst_excel_dummy.

            WHEN 9.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*              WRITE lst_excel_dummy-value(8) TO lst_final-gueen.
              lst_final-gueen = lst_excel_dummy-value(10).
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
              CLEAR lst_excel_dummy.

            WHEN 10.

              WRITE lst_excel_dummy-value(06) TO lst_final-posnr.
              IF lst_final-posnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-posnr
                  IMPORTING
                    output = lst_final-posnr.
              ENDIF. " IF lst_final-posnr IS NOT INITIAL
            WHEN 11.

              lst_final-matnr = lst_excel_dummy-value(18).

              IF lst_final-matnr IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input  = lst_final-matnr
                  IMPORTING
                    output = lst_final-matnr.

                CLEAR lst_excel_dummy.
              ENDIF. " IF lst_final-matnr IS NOT INITIAL

            WHEN 12.
              lst_final-plant = lst_excel_dummy-value(4).

            WHEN 13.
              lst_final-vbeln = lst_excel_dummy-value(10).
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input         = lst_final-vbeln
                IMPORTING
                  output        = lst_final-vbeln.

            WHEN 14.

              lst_final-pstyv = lst_excel_dummy-value(4).
              IF lst_final-pstyv IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-pstyv
                  IMPORTING
                    output = lst_final-pstyv.
              ENDIF. " IF lst_final-pstyv IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 15.
              lv_zmeng         =  lst_excel_dummy-value(13).
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_final-zmeng  = lv_zmeng.
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Quantity & is not in the correct format
                  MESSAGE i131(o3) WITH lst_excel_dummy-value. " Quantity & is not in the correct format
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.

            WHEN 16.

              lst_final-lifsk = lst_excel_dummy-value(2).
              IF lst_final-lifsk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-lifsk
                  IMPORTING
                    output = lst_final-lifsk.
              ENDIF. " IF lst_final-lifsk IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 17.
              lst_final-faksk = lst_excel_dummy-value(2).
              IF lst_final-faksk IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-faksk
                  IMPORTING
                    output = lst_final-faksk.
              ENDIF. " IF lst_final-faksk IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 18.
              lst_final-abgru = lst_excel_dummy-value(2).
              IF lst_final-abgru IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-abgru
                  IMPORTING
                    output = lst_final-abgru.
              ENDIF. " IF lst_final-abgru IS NOT INITIAL
              CLEAR lst_excel_dummy.
            WHEN 19.

              lst_final-auart = lst_excel_dummy-value(4).
              IF lst_final-auart IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-auart
                  IMPORTING
                    output = lst_final-auart.
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
                IF lv_auart_cre IS INITIAL.
                  lv_auart_cre = lst_final-auart.
                ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
              ENDIF. " IF lst_final-auart IS NOT INITIAL

              CLEAR lst_excel_dummy.
            WHEN 20.
              lst_final-xblnr = lst_excel_dummy-value(16).
              CLEAR lst_excel_dummy.
            WHEN 21.
              lst_final-zlsch = lst_excel_dummy-value(1).
              CLEAR lst_excel_dummy.
            WHEN 22.
              lst_final-bsark = lst_excel_dummy-value(20).
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_final-bsark
                IMPORTING
                  output = lst_final-bsark.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.

            WHEN 23.
              lst_final-bstnk = lst_excel_dummy-value(20).
*     Begin of CHANGE:INC0224101:SGUDA:28-Dec-2018:ED1K908983
*              IF lst_final-bstnk IS NOT INITIAL.
*                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*                  EXPORTING
*                    input  = lst_final-bstnk
*                  IMPORTING
*                    output = lst_final-bstnk.
*              ENDIF. " IF lst_final-bstnk IS NOT INITIAL
*     End of CHANGE:INC0224101:SGUDA:28-Dec-2018:ED1K908983
              CLEAR lst_excel_dummy.
            WHEN 24.
              lst_final-stxh = lst_excel_dummy-value(50).
              CLEAR lst_excel_dummy.
            WHEN 25. "23  NPOLINA ERP7763 ED2K913722 .
              lst_final-kschl = lst_excel_dummy-value(4).
              IF lst_final-kschl IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-kschl
                  IMPORTING
                    output = lst_final-kschl.
              ENDIF. " IF lst_final-kschl IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 26.
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              TRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                  lst_final-kbetr = lst_excel_dummy-value(11).
*             Begin of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
                CATCH cx_root.
*                 Message: Amount & format is incorrect
                  MESSAGE i406(aw) WITH lst_excel_dummy-value. " Amount & format is incorrect
                  LEAVE LIST-PROCESSING.
              ENDTRY.
*             End   of ADD:ERP-6389:WROY:30-Jan-2018:ED2K910587
              CLEAR lst_excel_dummy.

            WHEN 27.
              lst_final-ihrez = lst_excel_dummy-value(12).
              CLEAR lst_excel_dummy.
            WHEN 28.
              lst_final-zzpromo = lst_excel_dummy-value(10).

              IF lst_final-zzpromo IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-zzpromo
                  IMPORTING
                    output = lst_final-zzpromo.
              ENDIF. " IF lst_final-zzpromo IS NOT INITIAL
              CLEAR lst_excel_dummy.

            WHEN 29.
              lst_final-kdkg4 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
            WHEN 30.
              lst_final-kdkg5 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
            WHEN 31.
              lst_final-kdkg3 = lst_excel_dummy-value(2).
              CLEAR lst_excel_dummy.
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
            WHEN 32. "30.  NPOLINA ERP7763 ED2K913722
              lst_final-srid = lst_excel_dummy-value(12).
              CLEAR lst_excel_dummy.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*  For rb_cros Append to fp_i_final table done in Column 35
**   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
**** For ZREW with ref to Quotation we are populating value
**** here as column 1 is not present in this case
*              IF rb_cros EQ 'X'.
*                IF NOT lst_final IS INITIAL.
*                  APPEND lst_final TO fp_i_final.
*                  CLEAR lst_final.
*                ENDIF. " IF NOT lst_final IS INITIAL
*              ENDIF. " IF rb_cros EQ 'X'
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            WHEN 33.
              lst_final-vkbur = lst_excel_dummy-value(4).
* SOC by NPOLINA DM1913(E209) ED2K915483
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lst_final-vkbur
                IMPORTING
                  output = lst_final-vkbur.
* EOC by NPOLINA DM1913(E209) ED2K915483
              CLEAR lst_excel_dummy.
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*** BOC BY SAYANDAS on 06-JULY-2018 for CR-6327
            WHEN 34.
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*              WRITE lst_excel_dummy-value(8) TO lst_final-fkdat.
              lst_final-fkdat = lst_excel_dummy-value(10).
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
              CLEAR lst_excel_dummy.
*** EOC BY SAYANDAS on 06-JULY-2018 for CR-6327
*           Begin of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
            WHEN 35.
              lst_final-waerk = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
*           End   of CHANGE:ERP-7640:WROY:15-AUG-2018:ED2K913082
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*** For ZREW with ref to Quotation we are populating value
*** here as column 1 is not present in this case
*              IF rb_cros EQ 'X'.
*                IF NOT lst_final IS INITIAL.
*                  APPEND lst_final TO fp_i_final.
*                  CLEAR lst_final.
*                ENDIF. " IF NOT lst_final IS INITIAL
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*              ENDIF. " IF rb_cros EQ 'X'
*   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*  BOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
            WHEN 36. "Assignment number
              lst_final-zuonr  = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* EOC CR#ERP-7712 9/25/2018 :PRABHU :  ED2K913443
* BOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574
            WHEN 37. "Text for Invoice instructions
              lst_final-inv_text = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* EOC CR#ERP - 7775 10/17/2018 : PRABHU : ED2K913574

* SOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
            WHEN 38.              "Action
              lst_final-vaktsch = lst_excel_dummy-value.

              IF lst_final-vaktsch IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lst_final-vaktsch
                  IMPORTING
                    output = lst_final-vaktsch.
              ENDIF.
              CLEAR lst_excel_dummy.

            WHEN 39.              "Date for Action
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*              WRITE lst_excel_dummy-value(8) TO lst_final-vasda .
              lst_final-vasda = lst_excel_dummy-value(10).
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
              CLEAR lst_excel_dummy.

            WHEN 40.              "Rule for Origin of Next Billing/Invoice Date
              lst_final-perio = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.

            WHEN 41.              "In Advance
              lst_final-autte = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.

            WHEN 42.              "Rule for Determination of a Deviating Billing/Invoice Date
              lst_final-peraf = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* SOC  NPOLINA 01/July/2019 DM1913 E209 ED2K915483
            WHEN 43.              "Order Reason
              lst_final-augru = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
* EOC  NPOLINA 01/July/2019 DM1913 E209 ED2K915483
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
            WHEN 44.              "Condition Group2
              lst_final-kdkg2 = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
              IF lst_final-kdkg2 IS NOT INITIAL AND lv_auart_cre IS NOT INITIAL AND lv_auart_cre NE c_zofl.
                v_error = abap_true.
                lv_kdkg2 = lst_final-kdkg2.
                EXIT.
              ENDIF.
* BOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
            WHEN 45.            " Content Start Date
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
** BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
*              IF lst_excel_dummy-value(8) CA c_special_char.
** BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-111) according to the ED1 sequence with  ED2K924094  *
*                MESSAGE s000 WITH text-107 DISPLAY LIKE c_e.
** EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-111) according to the ED1 sequence with  ED2K924094  *
*                LEAVE LIST-PROCESSING.
*              ELSE.
*                lv_date = lst_excel_dummy-value(8).
** Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
*                IF lv_date IS NOT INITIAL.
** End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
*                  CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
*                    EXPORTING
*                      date                      = lv_date
*                    EXCEPTIONS
*                      plausibility_check_failed = 1
*                      OTHERS                    = 2.
*                  IF sy-subrc <> 0.
** BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-113) according to the ED1 sequence with  ED2K924094  *
*                    MESSAGE s000 WITH text-109 DISPLAY LIKE c_e.
** EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-113) according to the ED1 sequence with  ED2K924094  *
*                    LEAVE LIST-PROCESSING.
*                  ELSE.
*                    CLEAR lv_date.
*                  ENDIF.
** Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
*                ENDIF.
** End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
** EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
*                WRITE lst_excel_dummy-value(8) TO lst_final-zzconstart.
*                CLEAR lst_excel_dummy.
** BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
*              ENDIF.
** EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
              lst_final-zzconstart = lst_excel_dummy-value(10).
              CLEAR lst_excel_dummy.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
            WHEN 46.            " Content End Date
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
** BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
*              IF lst_excel_dummy-value(8) CA c_special_char.
** BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-112) according to the ED1 sequence with  ED2K924094  *
*                MESSAGE s000 WITH text-108 DISPLAY LIKE c_e.
** EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-112) according to the ED1 sequence with  ED2K924094  *
*                LEAVE LIST-PROCESSING.
*              ELSE.
*                lv_date = lst_excel_dummy-value(8).
** Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
*                IF lv_date IS NOT INITIAL.
** End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
*                  CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
*                    EXPORTING
*                      date                      = lv_date
*                    EXCEPTIONS
*                      plausibility_check_failed = 1
*                      OTHERS                    = 2.
*                  IF sy-subrc <> 0.
** BOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-114) according to the ED1 sequence with  ED2K924094  *
*                    MESSAGE s000 WITH text-110 DISPLAY LIKE c_e.
** EOC by Lahiru on 07/14/2021 for replacing the ED2 text sysmbols(text-111) according to the ED1 sequence with  ED2K924094  *
*                    LEAVE LIST-PROCESSING.
*                  ELSE.
*                    CLEAR lv_date.
*                  ENDIF.
** Begin of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
*                ENDIF.
** End of change by ARGADEELA 06/28/2021 for PRB0047398 with ED1K913133
** EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
**                WRITE lst_excel_dummy-value(8) TO lst_final-zzconend.
**                CLEAR lst_excel_dummy.
** BOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
*              ENDIF.
** EOC by ARGADEELA on 03/12/2021 for INC0344979 with ED1K912763
** EOC by Lahiru on 10/09/2020 for OTCM-22276 with ED2K919818 *
** EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
** EOC by NPOLINA 01/25/2019 ERP7822 : ED2K914311
              lst_final-zzconend = lst_excel_dummy-value(10).
              CLEAR lst_excel_dummy.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
*--BOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
            WHEN 47.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
              lst_final-vlaufz = lst_excel_dummy-value.
              CLEAR lst_excel_dummy.
*              lst_final-vlaufk = lst_excel_dummy-value.
*              CLEAR lst_excel_dummy.
* BOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
*            WHEN 47.
*              lst_final-vlaufz = lst_excel_dummy-value.
*              CLEAR lst_excel_dummy.
*--EOC by Prabhu  OTCM-42807 ED2K922718 03/25/2021
* EOC by Lahiru on 05/17/2021 for OTCM-42807 with  ED2K923278 *
          ENDCASE.
        ENDAT.
      ENDLOOP. " LOOP AT li_excel INTO lst_excel
* SOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
      IF lst_final-kdkg2 IS NOT INITIAL AND lv_auart_cre IS NOT INITIAL
                  AND lv_auart_cre NE c_zofl AND v_error IS NOT INITIAL.
        v_error = abap_true.
        MESSAGE s000 WITH text-068 DISPLAY LIKE  'E'.
      ENDIF.
* EOC by NPOLINA ERPM4543 23/Oct/2019 ED2K916556
*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
**   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*      IF rb_cros NE 'X'.
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
** For last row population
*        IF NOT lst_final IS INITIAL.
*          APPEND lst_final TO fp_i_final.
*          CLEAR lst_final.
*        ENDIF. " IF NOT lst_final IS INITIAL
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
**   BOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
*      ENDIF. " IF rb_cros NE 'X'
**   EOC CR#498: 29-JUL-2017 : SAYANDAS: ED2K907365
* For last row population
      IF NOT lst_final IS INITIAL.
        APPEND lst_final TO fp_i_final.
        CLEAR lst_final.
      ENDIF. " IF NOT lst_final IS INITIAL
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
    ENDIF. " IF NOT li_excel[] IS INITIAL

  ENDIF. " IF sy-subrc EQ 0

*---BOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267
  IF fp_i_final IS NOT INITIAL.
    IF p_v_oid IS NOT INITIAL.
      v_oid   = p_v_oid.
      lv_oid  = p_v_oid.
    ELSE.
      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr             = c_zq
          object                  = c_zqtc_uplid
          quantity                = c_quantity
        IMPORTING
          number                  = lv_oid
        EXCEPTIONS
          interval_not_found      = 1
          number_range_not_intern = 2
          object_not_found        = 3
          quantity_is_0           = 4
          quantity_is_not_1       = 5
          interval_overflow       = 6
          buffer_overflow         = 7
          OTHERS                  = 8.
      IF sy-subrc EQ 0.
        v_oid   = lv_oid.
        p_v_oid = lv_oid.
      ENDIF.
    ENDIF.
    IF lv_oid IS NOT INITIAL.
      CONCATENATE 'Your Upload File Identification Number is'(124)
                  lv_oid
             INTO lv_msg SEPARATED BY space.
      CALL FUNCTION 'POPUP_TO_INFORM'
        EXPORTING
          titel = text-114
          txt1  = lv_msg
          txt2  = ''.
    ENDIF.
  ENDIF. "IF fp_i_final IS NOT INITIAL.

* Validations for rb_crea - 2A E101 - Create New Subscription Order
*  IF rb_cros NE 'X'.
  IF rb_crea EQ 'X' OR
     rb_cros EQ 'X' OR
     rb_modi EQ 'X'.
*   Get Customers
    PERFORM f_get_customers USING fp_i_final
                            CHANGING i_customer.
*   Get Vendors
    PERFORM f_get_vendors USING fp_i_final
                            CHANGING i_vendor.
*   Get Material and Material Group
    PERFORM f_get_material_group USING fp_i_final
                                 CHANGING i_matnr
                                          i_mvke.
* Process Input File and Create SLG Logs
    LOOP AT fp_i_final ASSIGNING <lfs_i_final>.
      CLEAR:lv_msgty.
      lst_final = <lfs_i_final>.
      lv_item = lst_final-posnr.
      AT NEW identifier.
        lv_index = sy-tabix.
        lv_identifier = lst_final-identifier.
      ENDAT.
      PERFORM f_create_log_staging USING    lst_final lv_oid lv_item
                                   CHANGING lv_log lv_msgty lv_loghandle. "lst_final3.
      IF lv_msgty IS INITIAL.
        lv_msgty = c_i.
      ENDIF.
      PERFORM f_retain_log_status USING    lv_msgty
                                  CHANGING lv_ord_status.
      <lfs_i_final>-zlogno     = lv_log.  "st_e101_stage-zlogno.  "Application log: log number
      <lfs_i_final>-log_handle = lv_loghandle.                    "Application Log: Log Handle
      <lfs_i_final>-zoid       = lv_oid.  "st_e101_stage-zoid.    "Order Identifier in Upload File

       AT END OF identifier.
*       At Last Identifier (Order) - Update all Lines of the Order with message Status
        LOOP AT fp_i_final ASSIGNING FIELD-SYMBOL(<lfs_i_final1>) FROM lv_index.
          IF <lfs_i_final1>-identifier <> lv_identifier.
            CLEAR: lv_index, lv_identifier.
            EXIT.
          ENDIF.
          <lfs_i_final1>-msgty = lv_ord_status.
          CASE lv_ord_status.
            WHEN c_i OR c_s.
              <lfs_i_final1>-msgv1 = 'File Validation - Successful'(161).
            WHEN c_w.
              <lfs_i_final1>-msgv1 = 'File Validation - Warnings'(162).
            WHEN c_e.
              <lfs_i_final1>-msgv1 = 'File Validation - Error'(163).
            WHEN OTHERS.
          ENDCASE.
        ENDLOOP.
        CLEAR: lv_ord_status.
      ENDAT.
    ENDLOOP.
  ENDIF.  " IF rb_cros NE 'X'.


  IF i_e101_stage[] IS NOT INITIAL.
    MODIFY ze225_staging FROM TABLE i_e101_stage.
  ENDIF.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101  OTCM-47267

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_CUSTOMERS
*&---------------------------------------------------------------------*
*    Get all Customer for all entries in the Input File
*----------------------------------------------------------------------*
FORM f_get_customers  USING    fp_i_final    TYPE tt_excel_enh
                      CHANGING fp_i_customer TYPE tt_customer.

  DATA: li_final TYPE tt_excel_enh.
  DATA: li_customer TYPE tt_customer.

  IF fp_i_final IS NOT INITIAL.
*
    li_final[] = fp_i_final[].
    SORT li_final BY customer.
    DELETE ADJACENT DUPLICATES FROM li_final COMPARING customer.
    LOOP AT li_final INTO DATA(lst_final).
      APPEND INITIAL LINE TO li_customer ASSIGNING FIELD-SYMBOL(<lfs_customer>).
      <lfs_customer>-partner = lst_final-customer.
    ENDLOOP.
*
    li_final[] = fp_i_final[].
    SORT li_final BY kunnr.
    DELETE ADJACENT DUPLICATES FROM li_final COMPARING kunnr.
    LOOP AT li_final INTO lst_final.
      APPEND INITIAL LINE TO li_customer ASSIGNING <lfs_customer>.
      <lfs_customer>-partner = lst_final-kunnr.
    ENDLOOP.
*
    SORT li_customer BY partner.
    DELETE ADJACENT DUPLICATES FROM li_customer COMPARING partner.

*   Select Customers from BUT000
    SELECT partner
      INTO TABLE @fp_i_customer
      FROM but000
      FOR ALL ENTRIES IN @li_customer
      WHERE ( partner = @li_customer-partner ).

*   Append Selected Customers from KNA1.
    SELECT kunnr
      APPENDING TABLE @fp_i_customer
      FROM kna1
      FOR ALL ENTRIES IN @li_customer
      WHERE ( kunnr = @li_customer-partner ).
  ENDIF.

  SORT fp_i_customer BY partner.
  DELETE ADJACENT DUPLICATES FROM fp_i_customer COMPARING partner.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_MATERIAL_GROUP
*&---------------------------------------------------------------------*
*       Get all Materials and MVKE entries for entries in the Input File
*----------------------------------------------------------------------*
FORM f_get_material_group  USING    fp_i_final    TYPE tt_excel_enh
                           CHANGING fp_i_matnr    TYPE tt_matnr
                                    fp_i_mvke     TYPE tt_mvke.
  DATA: li_final    TYPE tt_excel_enh.

  IF fp_i_final IS NOT INITIAL.
    li_final[] = fp_i_final[].
    SORT li_final BY matnr.
    DELETE ADJACENT DUPLICATES FROM li_final COMPARING matnr.

*   Select Materials from MARA
    SELECT matnr
      INTO TABLE @fp_i_matnr
      FROM mara
      FOR ALL ENTRIES IN @li_final
      WHERE matnr = @li_final-matnr.

    li_final[] = fp_i_final[].
    SORT li_final BY matnr vkorg vtweg.
    DELETE ADJACENT DUPLICATES FROM li_final COMPARING matnr vkorg vtweg.

*   Select Material Group from MVKE
    SELECT matnr,
           vkorg,
           vtweg,
           mvgr5
      INTO TABLE @fp_i_mvke
      FROM mvke
      FOR ALL ENTRIES IN @li_final
      WHERE matnr = @li_final-matnr
        AND vkorg = @li_final-vkorg
        AND vtweg = @li_final-vtweg.
  ENDIF.

  SORT fp_i_matnr BY matnr.
  DELETE ADJACENT DUPLICATES FROM fp_i_matnr COMPARING matnr.

  SORT fp_i_mvke BY matnr vkorg vtweg.
  DELETE ADJACENT DUPLICATES FROM fp_i_mvke COMPARING matnr vkorg vtweg.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_UPDATE_LOG_2C
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LI_CHANGE_SUBS  text
*----------------------------------------------------------------------*
FORM f_update_log_2c  CHANGING fp_li_change_subs TYPE tt_output_x
                               fp_i_output_x     TYPE tt_output_x.

  DATA: lst_change_subs TYPE ty_output_x.
  DATA: lv_oid          TYPE numc10,          " File Identification Number
        lv_item         TYPE posnr,
        lv_log          TYPE balognr,
        lv_loghandle    TYPE balloghndl,
        lv_msgty        TYPE char1,
        lv_msg          TYPE char100,
        lv_log_flg      TYPE char1.
  STATICS: lv_ord_status   TYPE c.
  FIELD-SYMBOLS: <lfs_change_subs> TYPE ty_output_x.

* Create Log if
  CHECK rb_modi IS NOT INITIAL. "2C E101 - Modify Existing Subscription
  CHECK rb_sel_m IS NOT INITIAL. "Select Records
* Check if Log already exists, proceed only if it does not exist
  LOOP AT fp_li_change_subs INTO lst_change_subs WHERE zlogno IS NOT INITIAL.
    lv_log_flg = abap_true.
    EXIT.
  ENDLOOP.
  CHECK lv_log_flg IS INITIAL.

* Update Log
  IF fp_li_change_subs IS NOT INITIAL.
    IF p_v_oid IS NOT INITIAL.
      v_oid   = p_v_oid.
      lv_oid  = p_v_oid.
    ELSE.
      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr             = c_zq
          object                  = c_zqtc_uplid
          quantity                = c_quantity
        IMPORTING
          number                  = lv_oid
        EXCEPTIONS
          interval_not_found      = 1
          number_range_not_intern = 2
          object_not_found        = 3
          quantity_is_0           = 4
          quantity_is_not_1       = 5
          interval_overflow       = 6
          buffer_overflow         = 7
          OTHERS                  = 8.
      IF sy-subrc EQ 0.
        v_oid   = lv_oid.
        p_v_oid = lv_oid.
      ENDIF.
    ENDIF.
    IF lv_oid IS NOT INITIAL.
      CONCATENATE 'Your Upload File Identification Number is'(124)
                  lv_oid
             INTO lv_msg SEPARATED BY space.
      CALL FUNCTION 'POPUP_TO_INFORM'
        EXPORTING
          titel = text-114
          txt1  = lv_msg
          txt2  = ''.
    ENDIF.
  ENDIF. "IF fp_i_final IS NOT INITIAL.

  LOOP AT fp_li_change_subs ASSIGNING <lfs_change_subs>.
    lst_change_subs = <lfs_change_subs>.
    lv_item = lst_change_subs-posnr.
    PERFORM f_create_log_staging_2c USING    lst_change_subs  lv_oid   lv_item
                                    CHANGING lv_log    lv_msgty   lv_loghandle.
    IF lv_msgty IS INITIAL.
      lv_msgty = c_i.
    ENDIF.
    PERFORM f_retain_log_status USING    lv_msgty
                                CHANGING lv_ord_status.
    <lfs_change_subs>-zlogno     = lv_log.  "st_e101_stage-zlogno.  "Application log: log number
    <lfs_change_subs>-log_handle = lv_loghandle.                    "Application Log: Log Handle
    <lfs_change_subs>-zoid       = lv_oid.  "st_e101_stage-zoid.    "Order Identifier in Upload File
    AT END OF identifier.
*     At Last Identifier (Order) - Update all Lines of the Order with message Status
      LOOP AT fp_li_change_subs ASSIGNING FIELD-SYMBOL(<lfs_change_subs_1>)
                                    WHERE identifier = lst_change_subs-identifier.
        <lfs_change_subs_1>-msgty = lv_ord_status.
        CASE lv_ord_status.
          WHEN c_i OR c_s.
            <lfs_change_subs_1>-msgv1 = 'File Validation - Successful'.
          WHEN c_w.
            <lfs_change_subs_1>-msgv1 = 'File Validation - Warnings'.
          WHEN c_e.
            <lfs_change_subs_1>-msgv1 = 'File Validation - Error'.
          WHEN OTHERS.
        ENDCASE.
*  To Update Logs in ALV Output
        READ TABLE fp_i_output_x ASSIGNING FIELD-SYMBOL(<lfs_output_x>)
                                      WITH KEY identifier = <lfs_change_subs_1>-identifier
                                               posnr      = <lfs_change_subs_1>-posnr
                                               BINARY SEARCH.
        IF sy-subrc = 0.
          <lfs_output_x>-zlogno     = <lfs_change_subs_1>-zlogno.      "Application log: log number
          <lfs_output_x>-log_handle = <lfs_change_subs_1>-log_handle.  "Application Log: Log Handle
          <lfs_output_x>-zoid       = <lfs_change_subs_1>-zoid.        "Order Identifier in Upload File
          <lfs_output_x>-msgty      = <lfs_change_subs_1>-msgty.       "Message Type
          <lfs_output_x>-msgv1      = <lfs_change_subs_1>-msgv1.       "Message Text.
        ENDIF.
      ENDLOOP.
      CLEAR: lv_ord_status.
    ENDAT.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREATE_LOG_STAGING_2C
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_create_log_staging_2c  USING    fp_change_subs TYPE ty_output_x
                                       fp_oid        TYPE numc10
                                       fp_item       TYPE posnr
                              CHANGING fp_lv_log     TYPE balognr
                                       fp_msgty      TYPE c
                                       fp_loghandle  TYPE balloghndl.

  STATICS:lst_change_subs2 TYPE ty_output_x,
          lst_log_handle   TYPE balloghndl.
  DATA:lv_subrc TYPE sy-subrc.
  DATA:lv_matnr_err TYPE c.
  DATA:lst_mvke TYPE ty_mvke.

* Processing Header
  IF fp_change_subs-posnr IS INITIAL. "fp_lst_final-parvw = 'AG'.
    CLEAR: v_error_file.
    lst_change_subs2    = fp_change_subs.
*    fp_lst_final3 = fp_change_subs.

    st_log-object     = 'ZQTC'.
    st_log-subobject  = 'ZBP_ORDER'.
    st_log-extnumber  = fp_oid.
    st_log-aldate     = sy-datum.
    st_log-altime     = sy-uzeit.
    st_log-aluser     = sy-uname.
    st_log-alprog     = sy-repid.

*   Create Log to Add message(s)
    CLEAR:st_log_handle.
    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log                 = st_log
      IMPORTING
        e_log_handle            = st_log_handle
      EXCEPTIONS
        log_header_inconsistent = 1
        OTHERS                  = 2.
    IF sy-subrc IS INITIAL.
      lst_log_handle = st_log_handle.
    ENDIF.
  ENDIF. " IF fp_change_subs-posnr IS INITIAL. "fp_lst_final-parvw = 'AG'.

  IF fp_change_subs-posnr IS INITIAL.
* New Order
    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_change_subs-identifier.
      PERFORM f_adding_log_2c USING fp_change_subs fp_item
                              CHANGING fp_lv_log
                                       fp_msgty
                                       fp_loghandle.
    ENDIF.
  ELSEIF fp_change_subs-posnr IS NOT INITIAL.
* Line Items of the Order
    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_change_subs-identifier.
      st_msg-msgv3 = 'Item'(126).
      st_msg-msgv4 = fp_change_subs-posnr.
      PERFORM f_adding_log_2c USING    fp_change_subs fp_item
                              CHANGING fp_lv_log
                                       fp_msgty
                                       fp_loghandle.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ADDING_LOG_2C
*&---------------------------------------------------------------------*
*  Add Details to the Log
*----------------------------------------------------------------------*
FORM f_adding_log_2c USING fp_lst_final    TYPE ty_output_x
                           fp_item         TYPE posnr
                     CHANGING fp_lv_log    TYPE balognr
                              fp_msgty     TYPE c
                              fp_loghandle TYPE balloghndl.
  DATA:lv_logno       TYPE balognr,
       lst_log_handle TYPE balloghndl.
  st_msg-msgid = 'ZQTC_R2'.
  st_msg-msgno = '000'.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle     = st_log_handle
      i_s_msg          = st_msg
    EXCEPTIONS
      log_not_found    = 1
      msg_inconsistent = 2
      log_is_full      = 3
      OTHERS           = 4.
*
  APPEND st_log_handle TO st_loghandle.
  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
      i_client         = sy-mandt
      i_save_all       = abap_true
      i_t_log_handle   = st_loghandle
    IMPORTING
      e_new_lognumbers = i_lognum
    EXCEPTIONS
      log_not_found    = 1
      save_not_allowed = 2
      numbering_error  = 3
      OTHERS           = 4.
  IF sy-subrc EQ 0.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
    IF sy-subrc EQ 0.
      CLEAR:st_e101_stage.
    ENDIF.
    READ TABLE i_lognum ASSIGNING FIELD-SYMBOL(<lfs_lognum>) INDEX 1.
    IF sy-subrc EQ 0.
      st_e101_stage-zlogno = <lfs_lognum>-lognumber.
      lv_logno             = <lfs_lognum>-lognumber.
      fp_loghandle         = <lfs_lognum>-log_handle.
      fp_lv_log            = st_e101_stage-zlogno.
    ELSE.
      st_e101_stage-zlogno =  fp_lv_log."lv_logno.
    ENDIF.
    st_e101_stage-mandt     = sy-mandt.
    st_e101_stage-zuid_upld =  p_v_oid."File Identifier
    st_e101_stage-zoid      = fp_lst_final-identifier. " Order Identifier.
    st_e101_stage-zitem     = fp_item.
    st_e101_stage-zuser     = sy-uname.
    st_e101_stage-zfilepath = p_file.
    st_e101_stage-zbp       = fp_lst_final-customer.
    st_e101_stage-zcrtdat   = sy-datum.
    st_e101_stage-zcrttim   = sy-uzeit.
*   Capture the Message Type "Errors / Warning / Success.
    fp_msgty = st_msg-msgty.
*   If Error Update all lines of the Order to Error Status.
    IF v_error_file EQ abap_true OR st_msg-msgty = c_e.
      fp_msgty = c_e.
      st_e101_stage-zprcstat = c_f1. "'F1'.
      IF v_error_file NE abap_true.
        v_error_file = abap_true.
        LOOP AT i_e101_stage ASSIGNING FIELD-SYMBOL(<lfs_e101_stage>)
                             WHERE zuid_upld =  p_v_oid
                               AND zoid      = fp_lst_final-identifier.
          <lfs_e101_stage>-zprcstat = c_f1. "'F1'.
        ENDLOOP.
      ENDIF.
    ENDIF.
*
    PERFORM f_get_intf_stage_id CHANGING st_e101_stage.
*
    APPEND st_e101_stage TO i_e101_stage.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_VALIDATE_FILE_NEEDED
*&---------------------------------------------------------------------*
*  Check if File Validation Needs to be Done
*----------------------------------------------------------------------*
FORM f_validate_file_needed  USING    fv_check_file TYPE c.

  CLEAR: fv_check_file.

* 2A  E101 - Create New Subscription Order
  IF rb_crea IS NOT INITIAL.
    fv_check_file = abap_true.
  ENDIF.
* 2B  E101 - Create Ren Ord with SubrefID
  IF rb_cros IS NOT INITIAL.
    fv_check_file = abap_true.
  ENDIF.
* 2C  E101 - Modify Existing Subscription
  IF rb_modi IS NOT INITIAL.
    IF rb_sel_m IS NOT INITIAL.
      CLEAR fv_check_file.
    ELSEIF rb_upd_m IS NOT INITIAL.
      fv_check_file = abap_true.
    ENDIF.
  ENDIF.
* 2D  E101 - Create New Credit Memo
  IF rb_crem IS NOT INITIAL.
    IF rb_sel IS NOT INITIAL.
      CLEAR fv_check_file.
    ELSEIF  rb_upd IS NOT INITIAL.
      fv_check_file = abap_true.
    ELSEIF rb_ord IS NOT INITIAL.
      CLEAR fv_check_file.
    ENDIF.
  ENDIF.
* 2E  E101 - Change Existing Credit Memo
  IF rb_crcg IS NOT INITIAL.
    IF rb_sel1 IS NOT INITIAL.
      CLEAR fv_check_file.
    ELSEIF rb_upd1 IS NOT INITIAL.
      fv_check_file = abap_true.
    ENDIF.
  ENDIF.
* 2F  E101 - Create New Acquisition Debit Memo Request
  IF rb_dm_cr IS NOT INITIAL.
    fv_check_file = abap_true.
  ENDIF.
* 2G  E101 - Create Regular Order
  IF rb_or_ct IS NOT INITIAL.
    fv_check_file = abap_true.
  ENDIF.
* 2H  E101 - Modify Regular Order
  IF rb_or_cn IS NOT INITIAL.
    IF rb_sel2 IS NOT INITIAL.
      CLEAR fv_check_file.
    ELSEIF rb_upd2 IS NOT INITIAL.
      fv_check_file = abap_true.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_UPDATED_ALV_VALUES
*&---------------------------------------------------------------------*
* Get Updated Values from ALV and Capture in the File.
*----------------------------------------------------------------------*
FORM f_get_updated_alv_values  CHANGING fp_output_x TYPE tt_output_x.

* This FM will get the reference of the changed data in ref_grid
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* Get Updated Values from ALV and Capture in the File.
  CLEAR fp_output_x[].
  fp_output_x[] = i_output_x[].
  DELETE fp_output_x WHERE sel NE abap_true.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_UPDATED_ALV_VALUES_ORD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LI_ORD_ALV  text
*----------------------------------------------------------------------*
FORM f_get_updated_alv_values_ord  CHANGING fp_ord_alv TYPE tt_ord_alv.

* This FM will get the reference of the changed data in ref_grid
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = o_ref_grid.

  IF o_ref_grid IS NOT INITIAL.
    CALL METHOD o_ref_grid->check_changed_data( ).
  ENDIF. " IF o_ref_grid IS NOT INITIAL

* Get Updated Values from ALV and Capture in the File.
  CLEAR fp_ord_alv[].
  fp_ord_alv[] = i_ord_alv[].
  DELETE fp_ord_alv WHERE sel NE abap_true.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_ROW_COLUMN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_get_row_column  CHANGING fp_begin_row  TYPE I
                                fp_begin_col  TYPE I
                                fp_end_row    TYPE I
                                fp_end_col    TYPE I.

  DATA: lst_const TYPE ty_const.

* RB_CREA -  2A	E101 - Create New Subscription Order
  IF RB_CREA IS NOT INITIAL.
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_CREA'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ELSEIF RB_CROS IS NOT INITIAL.
* RB_CROS -  2B	E101 - Create Ren Ord with SubrefID
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_CROS'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ELSEIF RB_MODI IS NOT INITIAL.
* RB_MODI -  2C	E101 - Modify Existing Subscription
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_MODI'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ELSEIF RB_CREM IS NOT INITIAL.
* RB_CREM -  2D	E101 - Create New Credit Memo
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_CREM'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ELSEIF RB_CRCG IS NOT INITIAL.
* RB_CRCG -  2E	E101 - Change Existing Credit Memo       *
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_CRCG'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ELSEIF RB_DM_CR IS NOT INITIAL.
* RB_DM_CR - 2F	E101 - Create New Acquisition Debit Memo Request
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_DM_CR'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ELSEIF RB_OR_CT IS NOT INITIAL.
* RB_OR_CT - 2G	E101 - Create Regular Order
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_OR_CT'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ELSEIF RB_OR_CN IS NOT INITIAL.
* RB_OR_CN - 2H	E101 - Modify Regular Order
    LOOP AT i_const INTO lst_const WHERE devid = c_e101
                                     AND param1 = 'RB_OR_CN'.
      IF lst_const-param2 = 'BEG_END_COL'.
        fp_begin_col = lst_const-low.
        fp_end_col   = lst_const-high.
      ELSEIF lst_const-param2 = 'BEG_END_ROW'.
        fp_begin_row = lst_const-low.
        fp_end_row   = lst_const-high.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_CUSTOMERS_ORD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_get_customers_ord  USING    fp_i_final_ord TYPE tt_final_ord
                          CHANGING fp_i_customer  TYPE tt_customer.

  DATA: li_final_ord TYPE tt_final_ord.
  DATA: li_customer  TYPE tt_customer.

  IF fp_i_final_ord[] IS NOT INITIAL.
*
    li_final_ord[] = fp_i_final_ord[].
    SORT li_final_ord BY customer.
    DELETE ADJACENT DUPLICATES FROM li_final_ord COMPARING customer.
    LOOP AT li_final_ord INTO DATA(lst_final_ord).
      APPEND INITIAL LINE TO li_customer ASSIGNING FIELD-SYMBOL(<lfs_customer>).
      <lfs_customer>-partner = lst_final_ord-customer.
    ENDLOOP.
*
    li_final_ord[] = fp_i_final_ord[].
    SORT li_final_ord BY partner. "kunnr.
    DELETE ADJACENT DUPLICATES FROM li_final_ord COMPARING partner.
    LOOP AT li_final_ord INTO lst_final_ord.
      APPEND INITIAL LINE TO li_customer ASSIGNING <lfs_customer>.
      <lfs_customer>-partner = lst_final_ord-partner.
    ENDLOOP.
*
    SORT li_customer BY partner.
    DELETE ADJACENT DUPLICATES FROM li_customer COMPARING partner.

*   Select Customers from BUT000
    SELECT partner
      INTO TABLE @fp_i_customer
      FROM but000
      FOR ALL ENTRIES IN @li_customer
      WHERE ( partner = @li_customer-partner ).

*   Append Selected Customers from KNA1.
    SELECT kunnr
      APPENDING TABLE @fp_i_customer
      FROM kna1
      FOR ALL ENTRIES IN @li_customer
      WHERE ( kunnr = @li_customer-partner ).
  ENDIF.

  SORT fp_i_customer BY partner.
  DELETE ADJACENT DUPLICATES FROM fp_i_customer COMPARING partner.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_MATERIAL_GROUP_ORD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_get_material_group_ord  USING    fp_i_final_ord TYPE tt_final_ord
                               CHANGING fp_i_matnr     TYPE tt_matnr
                                      fp_i_mvke      TYPE tt_mvke.
  DATA: li_final_ord  TYPE tt_final_ord.

  IF fp_i_final_ord[] IS NOT INITIAL.
    li_final_ord[] = fp_i_final_ord[].
    SORT li_final_ord BY matnr.
    DELETE ADJACENT DUPLICATES FROM li_final_ord COMPARING matnr.

*   Select Materials from MARA
    SELECT matnr
      INTO TABLE @fp_i_matnr
      FROM mara
      FOR ALL ENTRIES IN @li_final_ord
      WHERE matnr = @li_final_ord-matnr.

    li_final_ord[] = fp_i_final_ord[].
    SORT li_final_ord BY matnr vkorg vtweg.
    DELETE ADJACENT DUPLICATES FROM li_final_ord COMPARING matnr vkorg vtweg.

*   Select Material Group from MVKE
    SELECT matnr,
           vkorg,
           vtweg,
           mvgr5
      INTO TABLE @fp_i_mvke
      FROM mvke
      FOR ALL ENTRIES IN @li_final_ord
      WHERE matnr = @li_final_ord-matnr
        AND vkorg = @li_final_ord-vkorg
        AND vtweg = @li_final_ord-vtweg.
  ENDIF.

  SORT fp_i_matnr BY matnr.
  DELETE ADJACENT DUPLICATES FROM fp_i_matnr COMPARING matnr.

  SORT fp_i_mvke BY matnr vkorg vtweg.
  DELETE ADJACENT DUPLICATES FROM fp_i_mvke COMPARING matnr vkorg vtweg.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREATE_LOG_STAGING_ORD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_create_log_staging_ord  USING    fp_lst_final_ord TYPE ty_excel_ord_enhanced
                                        fp_oid        TYPE numc10
                                        fp_item       TYPE posnr
                               CHANGING fp_lv_log     TYPE balognr
                                        fp_msgty      TYPE c
                                        fp_loghandle  TYPE balloghndl.


  STATICS:lst_final_ord2   TYPE ty_excel_ord_enhanced,
          lst_log_handle   TYPE balloghndl.
  DATA:lv_subrc TYPE sy-subrc.
  DATA:lv_matnr_err TYPE c.
  DATA:lst_mvke TYPE ty_mvke.

* Processing Header
  IF fp_lst_final_ord-posnr IS INITIAL. "fp_lst_final-parvw = 'AG'.
    CLEAR: v_error_file.
    lst_final_ord2    = fp_lst_final_ord.
*    fp_lst_final3 = fp_lst_final.

    st_log-object     = 'ZQTC'.
    st_log-subobject  = 'ZBP_ORDER'.
    st_log-extnumber  = fp_oid.
    st_log-aldate     = sy-datum.
    st_log-altime     = sy-uzeit.
    st_log-aluser     = sy-uname.
    st_log-alprog     = sy-repid.

*   Create Log to Add message(s)
    CLEAR:st_log_handle.
    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log                 = st_log
      IMPORTING
        e_log_handle            = st_log_handle
      EXCEPTIONS
        log_header_inconsistent = 1
        OTHERS                  = 2.
    IF sy-subrc IS INITIAL.
      lst_log_handle = st_log_handle.
    ENDIF.
  ENDIF. " IF fp_lst_final-posnr IS INITIAL. "fp_lst_final-parvw = 'AG'.

  IF fp_lst_final_ord-posnr IS INITIAL.
* New Order
    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_lst_final_ord-identifier.
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ENDIF.
  ELSEIF fp_lst_final_ord-posnr IS NOT INITIAL.
* Line Items of the Order
    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_lst_final_ord-identifier.
      st_msg-msgv3 = 'Item'(126).
      st_msg-msgv4 = fp_lst_final_ord-posnr.
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ENDIF.
  ENDIF.

* Fields in Both Header and Line Items
*-----Partner Function
    IF fp_lst_final_ord-parvw IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Partner Function is missing in the file'(127).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSEIF fp_lst_final_ord-parvw IS NOT INITIAL.
      READ TABLE i_parvw TRANSPORTING NO FIELDS WITH KEY parvw = fp_lst_final_ord-parvw
                                                           BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Partner Function in the file is Invalid'(128).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.


* Fields in Header
  IF fp_lst_final_ord-posnr IS INITIAL.
*-----Partner Number - Header
    IF fp_lst_final_ord-customer IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'BP is missing in the file'(129).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSE.
      READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final_ord-customer.
      IF sy-subrc NE 0.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'BP in the file is Invalid'(130).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Sales Organization
    IF fp_lst_final_ord-vkorg IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 = 'Sales Organization is missing in the file'(131).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSEIF fp_lst_final_ord-vkorg IS NOT INITIAL.
      READ TABLE i_vkorg TRANSPORTING NO FIELDS WITH KEY vkorg = fp_lst_final_ord-vkorg
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'Sales Organization in the file is Invalid'(132).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Distribution Channel
    IF fp_lst_final_ord-vtweg IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Distribution Channel is missing in the file'(133).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.

    ELSEIF fp_lst_final_ord-vtweg IS NOT INITIAL.
      READ TABLE i_vtweg TRANSPORTING NO FIELDS WITH KEY vtweg = fp_lst_final_ord-vtweg
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Distribution Channel in the file is Invalid'(134).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Division
    IF fp_lst_final_ord-spart IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Division is missing in the file'(135).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSEIF fp_lst_final_ord-spart IS NOT INITIAL.
      READ TABLE i_spart TRANSPORTING NO FIELDS WITH KEY spart = fp_lst_final_ord-spart
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Division in the file in Invalid'(136).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----PO Type
    IF fp_lst_final_ord-bsark IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'PO Type is missing in the file'.
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSEIF fp_lst_final_ord-bsark IS NOT INITIAL.
      READ TABLE i_bsark TRANSPORTING NO FIELDS WITH KEY bsark = fp_lst_final_ord-bsark
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'PO Type in the file is Invalid'.
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Sales Office
    IF fp_lst_final_ord-vkbur IS INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Sales Office is missing in the file'(137).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSEIF fp_lst_final_ord-vkbur IS NOT INITIAL.
      READ TABLE i_vkbur TRANSPORTING NO FIELDS WITH KEY vkbur = fp_lst_final_ord-vkbur
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Sales Office in the file is Invalid'(138).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Document Type
    IF fp_lst_final_ord-auart IS INITIAL.
*---BOC NPALLA Staging Changes 05/24/2022 ED2K927377 E101  OTCM-47267
      CLEAR:st_msg.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Sales Document Type is missing in the file'(139).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
*---EOC NPALLA Staging Changes 05/24/2022 ED2K927377 E101  OTCM-47267
    ELSEIF fp_lst_final_ord-auart IS NOT INITIAL.
      READ TABLE i_auart TRANSPORTING NO FIELDS WITH KEY auart = fp_lst_final_ord-auart
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 =  'Sales Document Type in the file is Invalid'(140).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Contract Start Date
    IF fp_lst_final_ord-guebg IS INITIAL OR fp_lst_final_ord-guebg = c_init_date.
**     Contract Start Date Optional for Orders
    ELSEIF fp_lst_final_ord-guebg IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final_ord-guebg
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract Start Date in the file is Invalid'(142).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Contract End Date
    IF fp_lst_final_ord-gueen IS INITIAL OR fp_lst_final_ord-gueen = c_init_date.
**     Contract End Date Optional for Orders
    ELSEIF fp_lst_final_ord-gueen IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final_ord-gueen
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract End Date in the file is Invalid'(144).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
  ENDIF.

*Fields at Line Item
  IF fp_lst_final_ord-posnr IS NOT INITIAL.
*-----Partner Number (at Line Item)
    IF fp_lst_final_ord-partner IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'BP is missing in the file'(129).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSE.
      READ TABLE i_customer TRANSPORTING NO FIELDS WITH KEY partner = fp_lst_final_ord-partner.
      IF sy-subrc NE 0.
        CLEAR:st_msg.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'BP in the file is Invalid'(130).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Material
    CLEAR lv_matnr_err.
    IF fp_lst_final_ord-matnr IS INITIAL.
      CLEAR:st_msg.
      lv_matnr_err = abap_true.
      st_msg-msgty = c_e.
      st_msg-msgv1 =  'Material is missing in the file'(147).
      PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                               CHANGING   fp_lv_log
                                          fp_msgty
                                          fp_loghandle.
    ELSEIF fp_lst_final_ord-matnr IS NOT INITIAL.
      READ TABLE i_matnr TRANSPORTING NO FIELDS WITH KEY matnr = fp_lst_final_ord-matnr
                                                         BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR:st_msg.
        lv_matnr_err = abap_true.
        st_msg-msgty = c_e.
        st_msg-msgv1 = 'Material in the file is Invalid'(148).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Material Group 5 / PO Validation
    IF lv_matnr_err IS INITIAL.
      READ TABLE i_mvke INTO lst_mvke WITH KEY  matnr = fp_lst_final_ord-matnr
                                                vkorg = lst_final_ord2-vkorg  "from header
                                                vtweg = lst_final_ord2-vtweg  "from header
                                                BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
          CLEAR:st_msg.
          lv_matnr_err = abap_true.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Material not extended to '(149).
          CONCATENATE 'Sales Organization'(025) lst_final_ord2-vkorg INTO st_msg-msgv2 SEPARATED BY space.
          CONCATENATE 'Distribution Channel'(026) lst_final_ord2-vtweg INTO st_msg-msgv3 SEPARATED BY space.
          PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                   CHANGING   fp_lv_log
                                              fp_msgty
                                              fp_loghandle.
      ELSE. "IF sy-subrc IS NOT INITIAL
*     If entry entry exists in i_mvke or selected from MVKE table Validate Material Group and PO validation
        IF lst_mvke-mvgr5 IN ir_mvgr5 AND  "Material group 5
           fp_lst_final_ord-bstnk IS INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_w.
          st_msg-msgv1 = 'Purchase Order should not be blank for this order'(150).
          PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                   CHANGING   fp_lv_log
                                              fp_msgty
                                              fp_loghandle.
        ENDIF.
      ENDIF.
    ENDIF.
*-----Contract Start Date
    IF fp_lst_final_ord-guebg IS INITIAL OR fp_lst_final_ord-guebg = c_init_date.
**     Contract Start Date Optional at Line Item
    ELSEIF fp_lst_final_ord-guebg IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final_ord-guebg
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract Start Date in the file is Invalid'(142).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
*-----Contract End Date
    IF fp_lst_final_ord-gueen IS INITIAL OR fp_lst_final_ord-gueen = c_init_date.
**     Contract End Date Optional at Line Item
    ELSEIF fp_lst_final_ord-gueen IS NOT INITIAL.
      PERFORM f_check_date_plausibility USING fp_lst_final_ord-gueen
                                        CHANGING lv_subrc.
      IF lv_subrc IS NOT INITIAL.
          CLEAR:st_msg.
          st_msg-msgty = c_e.
          st_msg-msgv1 = 'Contract End Date in the file is Invalid'(144).
        PERFORM f_adding_log_ord USING fp_lst_final_ord fp_item
                                 CHANGING   fp_lv_log
                                            fp_msgty
                                            fp_loghandle.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ADDING_LOG_ORD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_adding_log_ord  USING fp_lst_final_ord TYPE ty_excel_ord_enhanced
                             fp_item TYPE posnr
                       CHANGING   fp_lv_log   TYPE balognr
                                  fp_msgty    TYPE c
                                  fp_loghandle TYPE balloghndl.
  DATA:lv_logno       TYPE balognr,
       lst_log_handle TYPE balloghndl.
  st_msg-msgid = 'ZQTC_R2'.
  st_msg-msgno = '000'.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle     = st_log_handle
      i_s_msg          = st_msg
    EXCEPTIONS
      log_not_found    = 1
      msg_inconsistent = 2
      log_is_full      = 3
      OTHERS           = 4.
*
  APPEND st_log_handle TO st_loghandle.
  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
      i_client         = sy-mandt
      i_save_all       = abap_true
      i_t_log_handle   = st_loghandle
    IMPORTING
      e_new_lognumbers = i_lognum
    EXCEPTIONS
      log_not_found    = 1
      save_not_allowed = 2
      numbering_error  = 3
      OTHERS           = 4.
  IF sy-subrc EQ 0.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
    IF sy-subrc EQ 0.
      CLEAR:st_e101_stage.
    ENDIF.
    READ TABLE i_lognum ASSIGNING FIELD-SYMBOL(<lfs_lognum>) INDEX 1.
    IF sy-subrc EQ 0.
      st_e101_stage-zlogno = <lfs_lognum>-lognumber.
      lv_logno =  <lfs_lognum>-lognumber.
      fp_loghandle = <lfs_lognum>-log_handle.
      fp_lv_log = st_e101_stage-zlogno.
    ELSE.
      st_e101_stage-zlogno =  fp_lv_log."lv_logno.
    ENDIF.
    st_e101_stage-mandt = sy-mandt.
    st_e101_stage-zuid_upld =  p_v_oid."File Identifier
    st_e101_stage-zoid = fp_lst_final_ord-identifier. " Order Identifier.
    st_e101_stage-zitem = fp_item.
    st_e101_stage-zuser = sy-uname.
    st_e101_stage-zfilepath = p_file.
    st_e101_stage-zbp = fp_lst_final_ord-customer.
    st_e101_stage-zcrtdat = sy-datum.
    st_e101_stage-zcrttim = sy-uzeit.
*   Capture the Message Type "Errors / Warning / Success.
    fp_msgty = st_msg-msgty.
*   If Error Update all lines of the Order to Error Status.
    IF v_error_file EQ abap_true OR st_msg-msgty = c_e.
      fp_msgty = c_e.
      st_e101_stage-zprcstat = c_f1. "'F1'.
      IF v_error_file NE abap_true.
        v_error_file = abap_true.
        LOOP AT i_e101_stage ASSIGNING FIELD-SYMBOL(<lfs_e101_stage>)
                             WHERE zuid_upld = p_v_oid
                               AND zoid      = fp_lst_final_ord-identifier.
          <lfs_e101_stage>-zprcstat = c_f1. "'F1'.
        ENDLOOP.
      ENDIF.
    ENDIF.
*
    PERFORM f_get_intf_stage_id CHANGING st_e101_stage.
*
    APPEND st_e101_stage TO i_e101_stage.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_UPDATE_LOG_2H
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_update_log_2h  CHANGING fp_li_change_reg_ord TYPE tt_order_alv
                               fp_i_ord_alv         TYPE tt_order_alv.

  DATA: lst_change_reg_ord TYPE ty_ord_alv.
  DATA: lv_oid          TYPE numc10,          " File Identification Number
        lv_item         TYPE posnr,
        lv_log          TYPE balognr,
        lv_loghandle    TYPE balloghndl,
        lv_msgty        TYPE char1,
        lv_msg          TYPE char100,
        lv_log_flg      TYPE char1.
  STATICS: lv_ord_status   TYPE c.
  FIELD-SYMBOLS: <lfs_change_reg_ord> TYPE ty_ord_alv.

* Create Log if
  CHECK rb_or_cn IS NOT INITIAL. "2H E101 - Modify Regular Order
  CHECK rb_sel2 IS NOT INITIAL. "Select Records
* Check if Log already exists, proceed only if it does not exist
  LOOP AT fp_li_change_reg_ord INTO lst_change_reg_ord WHERE zlogno IS NOT INITIAL.
    lv_log_flg = abap_true.
    EXIT.
  ENDLOOP.
  CHECK lv_log_flg IS INITIAL.

* Update Log
  IF fp_li_change_reg_ord IS NOT INITIAL.
    IF p_v_oid IS NOT INITIAL.
      v_oid   = p_v_oid.
      lv_oid  = p_v_oid.
    ELSE.
      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr             = c_zq
          object                  = c_zqtc_uplid
          quantity                = c_quantity
        IMPORTING
          number                  = lv_oid
        EXCEPTIONS
          interval_not_found      = 1
          number_range_not_intern = 2
          object_not_found        = 3
          quantity_is_0           = 4
          quantity_is_not_1       = 5
          interval_overflow       = 6
          buffer_overflow         = 7
          OTHERS                  = 8.
      IF sy-subrc EQ 0.
        v_oid   = lv_oid.
        p_v_oid = lv_oid.
      ENDIF.
    ENDIF.
    IF lv_oid IS NOT INITIAL.
      CONCATENATE 'Your Upload File Identification Number is'(124)
                  lv_oid
             INTO lv_msg SEPARATED BY space.
      CALL FUNCTION 'POPUP_TO_INFORM'
        EXPORTING
          titel = text-114
          txt1  = lv_msg
          txt2  = ''.
    ENDIF.
  ENDIF. "IF fp_i_final IS NOT INITIAL.

  LOOP AT fp_li_change_reg_ord ASSIGNING <lfs_change_reg_ord>.
    lst_change_reg_ord = <lfs_change_reg_ord>.
    lv_item = lst_change_reg_ord-posnr.
    PERFORM f_create_log_staging_2h USING    lst_change_reg_ord  lv_oid   lv_item
                                    CHANGING lv_log    lv_msgty   lv_loghandle.
    IF lv_msgty IS INITIAL.
      lv_msgty = c_i.
    ENDIF.
    PERFORM f_retain_log_status USING    lv_msgty
                                CHANGING lv_ord_status.
    <lfs_change_reg_ord>-zlogno     = lv_log.  "st_e101_stage-zlogno.  "Application log: log number
    <lfs_change_reg_ord>-log_handle = lv_loghandle.                    "Application Log: Log Handle
    <lfs_change_reg_ord>-zoid       = lv_oid.  "st_e101_stage-zoid.    "Order Identifier in Upload File
    AT END OF identifier.
*     At Last Identifier (Order) - Update all Lines of the Order with message Status
      LOOP AT fp_li_change_reg_ord ASSIGNING FIELD-SYMBOL(<lfs_change_reg_ord_1>)
                                     WHERE identifier = lst_change_reg_ord-identifier.
        <lfs_change_reg_ord_1>-msgty = lv_ord_status.
        CASE lv_ord_status.
          WHEN c_i OR c_s.
            <lfs_change_reg_ord_1>-msgv1 = 'File Validation - Successful'.
          WHEN c_w.
            <lfs_change_reg_ord_1>-msgv1 = 'File Validation - Warnings'.
          WHEN c_e.
            <lfs_change_reg_ord_1>-msgv1 = 'File Validation - Error'.
          WHEN OTHERS.
        ENDCASE.
*  To Update Logs in ALV Output
        READ TABLE fp_i_ord_alv ASSIGNING FIELD-SYMBOL(<lfs_i_ord_alv>)
                                      WITH KEY identifier = <lfs_change_reg_ord_1>-identifier
                                               posnr      = <lfs_change_reg_ord_1>-posnr
                                               BINARY SEARCH.
        IF sy-subrc = 0.
          <lfs_i_ord_alv>-zlogno     = <lfs_change_reg_ord_1>-zlogno.      "Application log: log number
          <lfs_i_ord_alv>-log_handle = <lfs_change_reg_ord_1>-log_handle.  "Application Log: Log Handle
          <lfs_i_ord_alv>-zoid       = <lfs_change_reg_ord_1>-zoid.        "Order Identifier in Upload File
          <lfs_i_ord_alv>-msgty      = <lfs_change_reg_ord_1>-msgty.       "Message Type
          <lfs_i_ord_alv>-msgv1      = <lfs_change_reg_ord_1>-msgv1.       "Message Text.
        ENDIF.
      ENDLOOP.
      CLEAR: lv_ord_status.
    ENDAT.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_CREATE_LOG_STAGING_2H
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_create_log_staging_2h  USING    fp_change_reg_ord TYPE ty_ord_alv
                                       fp_oid        TYPE numc10
                                       fp_item       TYPE posnr
                              CHANGING fp_lv_log     TYPE balognr
                                       fp_msgty      TYPE c
                                       fp_loghandle  TYPE balloghndl.

  STATICS:lst_change_reg_ord2 TYPE ty_ord_alv,
          lst_log_handle   TYPE balloghndl.
  DATA:lv_subrc TYPE sy-subrc.
  DATA:lv_matnr_err TYPE c.
  DATA:lst_mvke TYPE ty_mvke.

* Processing Header
  IF fp_change_reg_ord-posnr IS INITIAL. "fp_lst_final-parvw = 'AG'.
    CLEAR: v_error_file.
    lst_change_reg_ord2 = fp_change_reg_ord.
*    fp_lst_final3 = fp_change_subs.

    st_log-object     = 'ZQTC'.
    st_log-subobject  = 'ZBP_ORDER'.
    st_log-extnumber  = fp_oid.
    st_log-aldate     = sy-datum.
    st_log-altime     = sy-uzeit.
    st_log-aluser     = sy-uname.
    st_log-alprog     = sy-repid.

*   Create Log to Add message(s)
    CLEAR:st_log_handle.
    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log                 = st_log
      IMPORTING
        e_log_handle            = st_log_handle
      EXCEPTIONS
        log_header_inconsistent = 1
        OTHERS                  = 2.
    IF sy-subrc IS INITIAL.
      lst_log_handle = st_log_handle.
    ENDIF.
  ENDIF. " IF fp_change_subs-posnr IS INITIAL. "fp_lst_final-parvw = 'AG'.

  IF fp_change_reg_ord-posnr IS INITIAL.
* New Order
    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_change_reg_ord-identifier.
      PERFORM f_adding_log_2h USING fp_change_reg_ord fp_item
                              CHANGING fp_lv_log
                                       fp_msgty
                                       fp_loghandle.
    ENDIF.
  ELSEIF fp_change_reg_ord-posnr IS NOT INITIAL.
* Line Items of the Order
    IF st_log_handle IS NOT INITIAL.
      CLEAR:st_msg.
      st_msg-msgty = c_i.
      st_msg-msgv1 = 'Processing Order'(125).
      st_msg-msgv2 = fp_change_reg_ord-identifier.
      st_msg-msgv3 = 'Item'(126).
      st_msg-msgv4 = fp_change_reg_ord-posnr.
      PERFORM f_adding_log_2h USING    fp_change_reg_ord fp_item
                              CHANGING fp_lv_log
                                       fp_msgty
                                       fp_loghandle.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ADDING_LOG_2H
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_adding_log_2h  USING   fp_change_reg_ord TYPE ty_ord_alv
                              fp_item           TYPE posnr
                     CHANGING fp_lv_log    TYPE balognr
                              fp_msgty     TYPE c
                              fp_loghandle TYPE balloghndl.

  DATA:lv_logno       TYPE balognr,
       lst_log_handle TYPE balloghndl.
  st_msg-msgid = 'ZQTC_R2'.
  st_msg-msgno = '000'.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle     = st_log_handle
      i_s_msg          = st_msg
    EXCEPTIONS
      log_not_found    = 1
      msg_inconsistent = 2
      log_is_full      = 3
      OTHERS           = 4.
*
  APPEND st_log_handle TO st_loghandle.
  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
      i_client         = sy-mandt
      i_save_all       = abap_true
      i_t_log_handle   = st_loghandle
    IMPORTING
      e_new_lognumbers = i_lognum
    EXCEPTIONS
      log_not_found    = 1
      save_not_allowed = 2
      numbering_error  = 3
      OTHERS           = 4.
  IF sy-subrc EQ 0.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
    IF sy-subrc EQ 0.
      CLEAR:st_e101_stage.
    ENDIF.
    READ TABLE i_lognum ASSIGNING FIELD-SYMBOL(<lfs_lognum>) INDEX 1.
    IF sy-subrc EQ 0.
      st_e101_stage-zlogno = <lfs_lognum>-lognumber.
      lv_logno             = <lfs_lognum>-lognumber.
      fp_loghandle         = <lfs_lognum>-log_handle.
      fp_lv_log            = st_e101_stage-zlogno.
    ELSE.
      st_e101_stage-zlogno =  fp_lv_log."lv_logno.
    ENDIF.
    st_e101_stage-mandt     = sy-mandt.
    st_e101_stage-zuid_upld =  p_v_oid."File Identifier
    st_e101_stage-zoid      = fp_change_reg_ord-identifier. " Order Identifier.
    st_e101_stage-zitem     = fp_item.
    st_e101_stage-zuser     = sy-uname.
    st_e101_stage-zfilepath = p_file.
    st_e101_stage-zbp       = fp_change_reg_ord-customer.
    st_e101_stage-zcrtdat   = sy-datum.
    st_e101_stage-zcrttim   = sy-uzeit.
*   Capture the Message Type "Errors / Warning / Success.
    fp_msgty = st_msg-msgty.
*   If Error Update all lines of the Order to Error Status.
    IF v_error_file EQ abap_true OR st_msg-msgty = c_e.
      fp_msgty = c_e.
      st_e101_stage-zprcstat = c_f1. "'F1'.
      IF v_error_file NE abap_true.
        v_error_file = abap_true.
        LOOP AT i_e101_stage ASSIGNING FIELD-SYMBOL(<lfs_e101_stage>)
                             WHERE zuid_upld =  p_v_oid
                               AND zoid      = fp_change_reg_ord-identifier.
          <lfs_e101_stage>-zprcstat = c_f1. "'F1'.
        ENDLOOP.
      ENDIF.
    ENDIF.
*
    PERFORM f_get_intf_stage_id CHANGING st_e101_stage.
*
    APPEND st_e101_stage TO i_e101_stage.
  ENDIF.

ENDFORM.
*---EOC NPALLA Staging Changes 09/01/2021 ED2K924398 E101 OTCM-47267
*&---------------------------------------------------------------------*
*&      Form  F_GET_VENDORS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_get_vendors  USING    fp_i_final    TYPE tt_excel_enh
                    CHANGING fp_i_vendor   TYPE tt_vendor.

  DATA: li_final  TYPE tt_excel_enh.

  IF fp_i_final IS NOT INITIAL.
*
    li_final[] = fp_i_final[].
    SORT li_final BY parvw kunnr.
    DELETE li_final WHERE parvw NE c_sp.
    DELETE ADJACENT DUPLICATES FROM li_final COMPARING kunnr.

* Select entries from LFA1
    SELECT lifnr
      FROM lfa1
      INTO TABLE fp_i_vendor
      FOR ALL ENTRIES IN li_final
      WHERE lifnr = li_final-kunnr.
    IF sy-subrc = 0.
      SORT fp_i_vendor BY lifnr.
    ENDIF.
  ENDIF.

ENDFORM.
